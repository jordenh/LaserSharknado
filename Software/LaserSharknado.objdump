
LaserSharknado.elf:     file format elf32-littlenios2
LaserSharknado.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00010018 memsz 0x00010018 flags r-x
    LOAD off    0x00011038 vaddr 0x00810038 paddr 0x00811b5c align 2**12
         filesz 0x00001b24 memsz 0x00001b24 flags rw-
    LOAD off    0x00013680 vaddr 0x00813680 paddr 0x00813680 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f7ac  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006d8  0080f960  0080f960  00010960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b24  00810038  00811b5c  00011038  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  00813680  00813680  00013680  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00012b5c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e78  00000000  00000000  00012b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001abb  00000000  00000000  00013a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027bdd  00000000  00000000  000154bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008cc9  00000000  00000000  0003d098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016b5f  00000000  00000000  00045d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001f08  00000000  00000000  0005c8c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024ca  00000000  00000000  0005e7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c96e  00000000  00000000  00060c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006d600  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a48  00000000  00000000  0006d660  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00071a41  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00071a44  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00071a50  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00071a51  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00071a52  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00071a5d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00071a68  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00071a73  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004b  00000000  00000000  00071a7e  2**0
                  CONTENTS, READONLY
 26 .jdi          000057f2  00000000  00000000  00071ac9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007dd55  00000000  00000000  000772bb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080f960 l    d  .rodata	00000000 .rodata
00810038 l    d  .rwdata	00000000 .rwdata
00813680 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 excercise2.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008018dc l     F .text	00000058 __sprint_r
0080fdee l     O .rodata	00000010 blanks.3452
0080fdde l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00803940 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080533c l     F .text	00000058 std
00805448 l     F .text	00000008 __fp_lock
00805450 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00810038 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00811b28 l     O .rwdata	00000004 charset
0080fe24 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080ff6c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
008095dc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080a708 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080abe8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ac48 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ad48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080ae68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080af48 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080b0a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080b2d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00811b4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080b740 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008109f4 l     O .rwdata	00001060 jtag_uart_0
00811a54 l     O .rwdata	0000002c character_lcd_0
00811a80 l     O .rwdata	00000048 char_drawer
00811ac8 l     O .rwdata	00000054 pixel_buffer_dma
0080bb24 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080bd64 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080bf8c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080c608 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080e9a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080ee60 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080ef9c l     F .text	000000dc alt_file_locked
0080f200 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080f6dc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080f890 l     F .text	00000040 alt_sim_halt
008070f8 g     F .text	00000094 _mprec_log10
008071e4 g     F .text	00000088 __any_on
008088f0 g     F .text	00000070 _isatty_r
0080ff44 g     O .rodata	00000028 __mprec_tinytens
0080b104 g     F .text	0000006c alt_main
0080dd10 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
008017b4 g     F .text	000000a0 _puts_r
008136e4 g     O .bss	00000100 alt_irq
00808960 g     F .text	00000078 _lseek_r
00811b5c g       *ABS*	00000000 __flash_rwdata_start
0080c8ec g     F .text	00000034 alt_up_character_lcd_send_cmd
00800b34 g     F .text	00000048 setHardwareTimerPeriod
0080a0fc g     F .text	00000088 __eqdf2
00813974 g       *ABS*	00000000 __alt_heap_start
0080173c g     F .text	00000044 printf
008083bc g     F .text	00000068 __sseek
008053a4 g     F .text	000000a4 __sinit
0080cf34 g     F .text	00000114 alt_up_char_buffer_string
0080607c g     F .text	00000084 _setlocale_r
008054a4 g     F .text	00000068 __sfmoreglue
0080b190 g     F .text	00000020 __malloc_unlock
00800e28 g     F .text	00000174 __divsf3
0080ce64 g     F .text	000000d0 alt_up_char_buffer_draw
008136b4 g     O .bss	00000004 altera_avalon_timer_ts_freq
00806b74 g     F .text	000000e0 memmove
00800200 g     F .text	00000094 setupMatrixA
00805494 g     F .text	00000010 _cleanup
0080726c g     F .text	000000bc _Balloc
0080d0e4 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0080a20c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0080c870 g     F .text	0000007c get_DDRAM_addr
0080d0a4 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00800dcc g     F .text	0000005c drawBox
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080887c g     F .text	00000074 _fstat_r
00813698 g     O .bss	00000004 errno
00801148 g     F .text	00000038 __make_dp
008136a0 g     O .bss	00000004 alt_argv
00819b1c g       *ABS*	00000000 _gp
0080b5f0 g     F .text	00000030 usleep
0080d284 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00810874 g     O .rwdata	00000180 alt_fd_list
0080ead0 g     F .text	00000094 alt_find_dev
00806ad4 g     F .text	000000a0 memcpy
0080ca84 g     F .text	0000004c alt_up_character_lcd_write_fd
0080d048 g     F .text	0000005c alt_up_char_buffer_clear
00805488 g     F .text	0000000c _cleanup_r
0080a3a4 g     F .text	000000f8 __floatsidf
0080ef24 g     F .text	00000078 alt_io_redirect
0080a31c g     F .text	00000088 __ltdf2
0080f960 g       *ABS*	00000000 __DTOR_END__
00801854 g     F .text	00000014 puts
00807048 g     F .text	000000b0 __ratio
0080d334 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080c1a4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00801780 g     F .text	00000034 _printf_r
0080a844 g     F .text	00000008 __udivsi3
0080ada8 g     F .text	000000c0 isatty
0080fe54 g     O .rodata	000000c8 __mprec_tens
0080d9c0 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00806058 g     F .text	00000008 __locale_charset
0080032c g     F .text	00000280 matrixMultiply
0080f458 g     F .text	00000090 alt_icache_flush
0081368c g     O .bss	00000004 __malloc_top_pad
00811b24 g     O .rwdata	00000004 __mb_cur_max
00806060 g     F .text	0000000c _localeconv_r
00807964 g     F .text	0000003c __i2b
00805a3c g     F .text	0000049c __sfvwrite_r
008008a4 g     F .text	00000290 timer_test
00808344 g     F .text	00000070 _sbrk_r
0080e1a4 g     F .text	000000d0 helper_plot_pixel
00800bb0 g     F .text	00000028 hasHardwareTimerExpired
008089d8 g     F .text	00000078 _read_r
00810438 g     O .rwdata	0000000c __lc_ctype
00811b44 g     O .rwdata	00000004 alt_max_fd
0080a8ec g     F .text	00000138 __unpack_d
00808758 g     F .text	00000110 _fclose_r
00805308 g     F .text	00000034 fflush
00813690 g     O .bss	00000004 __malloc_max_sbrked_mem
00801034 g     F .text	00000054 __extendsfdf2
00809a6c g     F .text	00000074 __adddf3
00806f28 g     F .text	00000120 __b2d
0080d368 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0080902c g     F .text	000005b0 __umoddi3
0080afb4 g     F .text	000000f0 lseek
00811b20 g     O .rwdata	00000004 _global_impure_ptr
00807ce0 g     F .text	000005f4 _realloc_r
00813974 g       *ABS*	00000000 __bss_end
0080ed68 g     F .text	000000f8 alt_iic_isr_register
0080d4cc g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0080b4e4 g     F .text	0000010c alt_tick
00808a50 g     F .text	000005dc __udivdi3
0080ff1c g     O .rodata	00000028 __mprec_bigtens
00807bc0 g     F .text	00000120 __s2b
0080a574 g     F .text	00000194 __floatunsidf
00806e48 g     F .text	00000060 __mcmp
00805470 g     F .text	00000018 __fp_lock_all
0080ed20 g     F .text	00000048 alt_ic_irq_enabled
0080b44c g     F .text	00000098 alt_alarm_stop
008136b8 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0081084c g     O .rwdata	00000028 alt_dev_null
00801360 g     F .text	000000c8 __unpack_f
0080cd6c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0080e8b0 g     F .text	00000044 alt_dcache_flush_all
00806d14 g     F .text	00000070 __hi0bits
0080e0e0 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0080a49c g     F .text	000000d8 __fixdfsi
00811b5c g       *ABS*	00000000 __ram_rwdata_end
00811b3c g     O .rwdata	00000008 alt_dev_list
0080b620 g     F .text	00000120 write
0080c848 g     F .text	00000028 alt_timestamp_freq
0080e274 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00810038 g       *ABS*	00000000 __ram_rodata_end
0080ac74 g     F .text	000000d4 fstat
00807aa0 g     F .text	00000120 __pow5mult
00813680 g     O .bss	00000004 __nlocale_changed
0080a84c g     F .text	00000008 __umodsi3
00813974 g       *ABS*	00000000 end
00801200 g     F .text	00000160 __pack_f
0080cda0 g     F .text	00000084 alt_up_char_buffer_init
00800b7c g     F .text	00000034 isHardwareTimerRunning
0080bca4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080f95c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080c678 g     F .text	00000090 alt_avalon_timer_sc_init
00801180 g     F .text	00000080 __clzsi2
00800294 g     F .text	00000098 setupMatrixB
0080c3c8 g     F .text	00000240 altera_avalon_jtag_uart_write
00805394 g     F .text	00000004 __sfp_lock_acquire
008069f0 g     F .text	000000e4 memchr
0080c994 g     F .text	00000078 alt_up_character_lcd_write
00801934 g     F .text	00001eac ___vfprintf_internal_r
00800d78 g     F .text	00000054 printLine
00805728 g     F .text	00000314 _free_r
0080f6e0 g     F .text	000001b0 __call_exitprocs
00813684 g     O .bss	00000004 __mlocale_changed
00811b30 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
008136a8 g     O .bss	00000004 _alt_tick_rate
00807630 g     F .text	0000014c __lshift
008136ac g     O .bss	00000004 _alt_nticks
0080b1b0 g     F .text	00000120 read
0080b7d4 g     F .text	00000350 alt_sys_init
0080cbf8 g     F .text	000000b0 alt_up_character_lcd_shift_display
00800f9c g     F .text	00000098 __floatsisf
0080f5a8 g     F .text	00000134 __register_exitproc
0080777c g     F .text	000001e8 __multiply
0080cca8 g     F .text	00000090 alt_up_character_lcd_erase_pos
0080c03c g     F .text	00000074 altera_avalon_jtag_uart_close
00810038 g       *ABS*	00000000 __ram_rwdata_start
0080f960 g       *ABS*	00000000 __ram_rodata_start
008136bc g     O .bss	00000028 __malloc_current_mallinfo
00807328 g     F .text	0000017c __d2b
008005ac g     F .text	0000017c timeMatrixMultiply
0080bb5c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080f3a0 g     F .text	000000b8 alt_get_fd
0080e764 g     F .text	0000014c alt_busy_sleep
0080aa24 g     F .text	000000c8 __fpcmp_parts_d
008086e8 g     F .text	00000070 _close_r
0080f534 g     F .text	00000074 memcmp
0080bc0c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00813974 g       *ABS*	00000000 __alt_stack_base
0080bc54 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00803804 g     F .text	0000013c __swsetup_r
00809ea4 g     F .text	00000258 __divdf3
0080550c g     F .text	000000f0 __sfp
0080718c g     F .text	00000058 __copybits
00810444 g     O .rwdata	00000408 __malloc_av_
008053a0 g     F .text	00000004 __sinit_lock_release
00809ae0 g     F .text	000003c4 __muldf3
008084a0 g     F .text	00000060 __sread
0080fc6c g     O .rodata	00000010 __thenan_sf
0080f280 g     F .text	00000120 alt_find_file
0080e8f4 g     F .text	000000b4 alt_dev_llist_insert
0080b170 g     F .text	00000020 __malloc_lock
0080b390 g     F .text	000000bc sbrk
0080510c g     F .text	000001fc _fflush_r
00808634 g     F .text	000000b4 _calloc_r
00800bd8 g     F .text	0000002c startHardwareTimer
00813680 g       *ABS*	00000000 __bss_start
00806c54 g     F .text	00000098 memset
00800728 g     F .text	0000017c main
008136a4 g     O .bss	00000004 alt_envp
00813694 g     O .bss	00000004 __malloc_max_total_mem
0080d2dc g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0080ce24 g     F .text	00000040 alt_up_char_buffer_open_dev
0080bbb4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080cb48 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
008083b4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00808868 g     F .text	00000014 fclose
0080c708 g     F .text	000000a4 alt_timestamp_start
008137e4 g     O .bss	00000190 _atexit0
00803b58 g     F .text	000015b4 _dtoa_r
008062b0 g     F .text	00000740 _malloc_r
00811b48 g     O .rwdata	00000004 alt_errno
00805fa0 g     F .text	000000b8 _fwalk
0080a784 g     F .text	00000060 __divsi3
0080ff78 g     O .rodata	00000014 __thenan_df
0080c954 g     F .text	00000040 alt_up_character_lcd_open_dev
008055fc g     F .text	0000012c _malloc_trim_r
0080f960 g       *ABS*	00000000 __CTOR_END__
0080c920 g     F .text	00000034 alt_up_character_lcd_init
00808500 g     F .text	000000bc strcmp
0080f960 g       *ABS*	00000000 __flash_rodata_start
0080f960 g       *ABS*	00000000 __DTOR_LIST__
0080a184 g     F .text	00000088 __nedf2
0080b7a0 g     F .text	00000034 alt_irq_init
00800cb0 g     F .text	000000c8 drawLine
0080b330 g     F .text	00000060 alt_release_fd
0080cd38 g     F .text	00000034 alt_up_character_lcd_cursor_off
0080fc7c g     O .rodata	00000100 __clz_tab
00813688 g     O .bss	00000004 _PathLocale
0080f4e8 g     F .text	00000014 atexit
008085bc g     F .text	00000078 _write_r
00806100 g     F .text	0000001c setlocale
00811b1c g     O .rwdata	00000004 _impure_ptr
0081369c g     O .bss	00000004 alt_argc
008136b0 g     O .bss	00000004 altera_avalon_timer_ts_base
0080ea6c g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00806ea8 g     F .text	00000080 __ulp
008082d4 g     F .text	00000040 __isinfd
00805458 g     F .text	00000018 __fp_unlock_all
00811b34 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080606c g     F .text	00000010 localeconv
0080c7ac g     F .text	0000009c alt_timestamp
0080eb94 g     F .text	00000050 alt_ic_isr_register
00800c04 g     F .text	0000005c setUp
00811b5c g       *ABS*	00000000 _edata
00813974 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080c0b0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080ec80 g     F .text	000000a0 alt_ic_irq_disable
00808424 g     F .text	0000007c __swrite
00811b2c g     O .rwdata	00000004 __malloc_trim_threshold
0080f260 g     F .text	00000020 altera_nios2_qsys_irq_init
0080f4fc g     F .text	00000038 exit
00805ed8 g     F .text	000000c8 _fwalk_reent
00801088 g     F .text	000000c0 __floatunsisf
008074a4 g     F .text	0000018c __mdiff
0080a7e4 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00805398 g     F .text	00000004 __sfp_lock_release
0080ca0c g     F .text	00000078 alt_up_character_lcd_string
0080f8d0 g     F .text	00000020 _exit
00808314 g     F .text	00000030 __isnand
0080e610 g     F .text	00000154 alt_alarm_start
0080a854 g     F .text	00000098 __muldi3
0080611c g     F .text	00000194 __smakebuf_r
00801868 g     F .text	00000074 strlen
0080f078 g     F .text	00000188 open
0080a294 g     F .text	00000088 __gedf2
00800c60 g     F .text	00000050 clearScreen
0080eb64 g     F .text	00000030 alt_icache_flush_all
0080cad0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00811b58 g     O .rwdata	00000004 alt_priority_mask
0080ebe4 g     F .text	0000009c alt_ic_irq_enable
008037e0 g     F .text	00000024 __vfprintf_internal
008099ec g     F .text	00000080 __subdf3
00806d84 g     F .text	000000c4 __lo0bits
00811b50 g     O .rwdata	00000008 alt_alarm_list
0080ea08 g     F .text	00000064 _do_ctors
0080aaec g     F .text	000000fc close
0080aec8 g     F .text	00000080 alt_load
00801428 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0080539c g     F .text	00000004 __sinit_lock_acquire
008079a0 g     F .text	00000100 __multadd
00806cec g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18cdb904 	addi	r3,r3,14052
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18cdb904 	addi	r3,r3,14052
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6a6c714 	ori	gp,gp,39708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	108da014 	ori	r2,r2,13952

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18ce5d14 	ori	r3,r3,14708

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	080aec80 	call	80aec8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	080b1040 	call	80b104 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <setupMatrixA>:
#include "../timer.h"

#define MATRIX_SIZE 100

void setupMatrixA(int matrix[MATRIX_SIZE][MATRIX_SIZE])
{
  800200:	defffc04 	addi	sp,sp,-16
  800204:	df000315 	stw	fp,12(sp)
  800208:	df000304 	addi	fp,sp,12
  80020c:	e13fff15 	stw	r4,-4(fp)
	int i;
	int j;

	for (i = 0; i < MATRIX_SIZE; i++) {
  800210:	e03ffe15 	stw	zero,-8(fp)
  800214:	00001806 	br	800278 <setupMatrixA+0x78>
		for (j = 0; j < MATRIX_SIZE; j ++) {
  800218:	e03ffd15 	stw	zero,-12(fp)
  80021c:	00001006 	br	800260 <setupMatrixA+0x60>
			matrix[i][j] = i * j;
  800220:	e0bffe17 	ldw	r2,-8(fp)
  800224:	10806424 	muli	r2,r2,400
  800228:	1007883a 	mov	r3,r2
  80022c:	e0bfff17 	ldw	r2,-4(fp)
  800230:	188b883a 	add	r5,r3,r2
  800234:	e13ffd17 	ldw	r4,-12(fp)
  800238:	e0fffe17 	ldw	r3,-8(fp)
  80023c:	e0bffd17 	ldw	r2,-12(fp)
  800240:	1887383a 	mul	r3,r3,r2
  800244:	2105883a 	add	r2,r4,r4
  800248:	1085883a 	add	r2,r2,r2
  80024c:	1145883a 	add	r2,r2,r5
  800250:	10c00015 	stw	r3,0(r2)
{
	int i;
	int j;

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j ++) {
  800254:	e0bffd17 	ldw	r2,-12(fp)
  800258:	10800044 	addi	r2,r2,1
  80025c:	e0bffd15 	stw	r2,-12(fp)
  800260:	e0bffd17 	ldw	r2,-12(fp)
  800264:	10801910 	cmplti	r2,r2,100
  800268:	103fed1e 	bne	r2,zero,800220 <setupMatrixA+0x20>
void setupMatrixA(int matrix[MATRIX_SIZE][MATRIX_SIZE])
{
	int i;
	int j;

	for (i = 0; i < MATRIX_SIZE; i++) {
  80026c:	e0bffe17 	ldw	r2,-8(fp)
  800270:	10800044 	addi	r2,r2,1
  800274:	e0bffe15 	stw	r2,-8(fp)
  800278:	e0bffe17 	ldw	r2,-8(fp)
  80027c:	10801910 	cmplti	r2,r2,100
  800280:	103fe51e 	bne	r2,zero,800218 <setupMatrixA+0x18>
		for (j = 0; j < MATRIX_SIZE; j ++) {
			matrix[i][j] = i * j;
		}
	}
}
  800284:	e037883a 	mov	sp,fp
  800288:	df000017 	ldw	fp,0(sp)
  80028c:	dec00104 	addi	sp,sp,4
  800290:	f800283a 	ret

00800294 <setupMatrixB>:

void setupMatrixB(int matrix[MATRIX_SIZE][MATRIX_SIZE])
{
  800294:	defffc04 	addi	sp,sp,-16
  800298:	df000315 	stw	fp,12(sp)
  80029c:	df000304 	addi	fp,sp,12
  8002a0:	e13fff15 	stw	r4,-4(fp)
	int i;
	int j;

	for (i = MATRIX_SIZE - 1; i >= 0; i--) {
  8002a4:	008018c4 	movi	r2,99
  8002a8:	e0bffe15 	stw	r2,-8(fp)
  8002ac:	00001806 	br	800310 <setupMatrixB+0x7c>
		for (j = 0; j < MATRIX_SIZE; j ++) {
  8002b0:	e03ffd15 	stw	zero,-12(fp)
  8002b4:	00001006 	br	8002f8 <setupMatrixB+0x64>
			matrix[i][j] = i * j;
  8002b8:	e0bffe17 	ldw	r2,-8(fp)
  8002bc:	10806424 	muli	r2,r2,400
  8002c0:	1007883a 	mov	r3,r2
  8002c4:	e0bfff17 	ldw	r2,-4(fp)
  8002c8:	188b883a 	add	r5,r3,r2
  8002cc:	e13ffd17 	ldw	r4,-12(fp)
  8002d0:	e0fffe17 	ldw	r3,-8(fp)
  8002d4:	e0bffd17 	ldw	r2,-12(fp)
  8002d8:	1887383a 	mul	r3,r3,r2
  8002dc:	2105883a 	add	r2,r4,r4
  8002e0:	1085883a 	add	r2,r2,r2
  8002e4:	1145883a 	add	r2,r2,r5
  8002e8:	10c00015 	stw	r3,0(r2)
{
	int i;
	int j;

	for (i = MATRIX_SIZE - 1; i >= 0; i--) {
		for (j = 0; j < MATRIX_SIZE; j ++) {
  8002ec:	e0bffd17 	ldw	r2,-12(fp)
  8002f0:	10800044 	addi	r2,r2,1
  8002f4:	e0bffd15 	stw	r2,-12(fp)
  8002f8:	e0bffd17 	ldw	r2,-12(fp)
  8002fc:	10801910 	cmplti	r2,r2,100
  800300:	103fed1e 	bne	r2,zero,8002b8 <setupMatrixB+0x24>
void setupMatrixB(int matrix[MATRIX_SIZE][MATRIX_SIZE])
{
	int i;
	int j;

	for (i = MATRIX_SIZE - 1; i >= 0; i--) {
  800304:	e0bffe17 	ldw	r2,-8(fp)
  800308:	10bfffc4 	addi	r2,r2,-1
  80030c:	e0bffe15 	stw	r2,-8(fp)
  800310:	e0bffe17 	ldw	r2,-8(fp)
  800314:	1004403a 	cmpge	r2,r2,zero
  800318:	103fe51e 	bne	r2,zero,8002b0 <setupMatrixB+0x1c>
		for (j = 0; j < MATRIX_SIZE; j ++) {
			matrix[i][j] = i * j;
		}
	}
}
  80031c:	e037883a 	mov	sp,fp
  800320:	df000017 	ldw	fp,0(sp)
  800324:	dec00104 	addi	sp,sp,4
  800328:	f800283a 	ret

0080032c <matrixMultiply>:

void matrixMultiply(int a[MATRIX_SIZE][MATRIX_SIZE], int b[MATRIX_SIZE][MATRIX_SIZE])
{
  80032c:	deffff04 	addi	sp,sp,-4
  800330:	df000015 	stw	fp,0(sp)
  800334:	d839883a 	mov	fp,sp
  800338:	023ffff4 	movhi	r8,65535
  80033c:	4218ea04 	addi	r8,r8,25512
  800340:	da37883a 	add	sp,sp,r8
  800344:	00a71414 	movui	r2,40016
  800348:	00fffff4 	movhi	r3,65535
  80034c:	18d8ea04 	addi	r3,r3,25512
  800350:	1f07883a 	add	r3,r3,fp
  800354:	1885883a 	add	r2,r3,r2
  800358:	11000015 	stw	r4,0(r2)
  80035c:	00a71514 	movui	r2,40020
  800360:	013ffff4 	movhi	r4,65535
  800364:	2118ea04 	addi	r4,r4,25512
  800368:	2709883a 	add	r4,r4,fp
  80036c:	2085883a 	add	r2,r4,r2
  800370:	11400015 	stw	r5,0(r2)
	int i, j, k;
	int sum;
	int c[100][100];

	for (i = 0; i < MATRIX_SIZE; i++) {
  800374:	017ffff4 	movhi	r5,65535
  800378:	2958ed04 	addi	r5,r5,25524
  80037c:	2f0b883a 	add	r5,r5,fp
  800380:	28000015 	stw	zero,0(r5)
  800384:	00007f06 	br	800584 <matrixMultiply+0x258>
		for (j = 0; j < MATRIX_SIZE; j++) {
  800388:	00bffff4 	movhi	r2,65535
  80038c:	1098ec04 	addi	r2,r2,25520
  800390:	1705883a 	add	r2,r2,fp
  800394:	10000015 	stw	zero,0(r2)
  800398:	00006b06 	br	800548 <matrixMultiply+0x21c>
			sum = 0;
  80039c:	00fffff4 	movhi	r3,65535
  8003a0:	18d8ea04 	addi	r3,r3,25512
  8003a4:	1f07883a 	add	r3,r3,fp
  8003a8:	18000015 	stw	zero,0(r3)
			for (k = 0; k < MATRIX_SIZE; k++) {
  8003ac:	013ffff4 	movhi	r4,65535
  8003b0:	2118eb04 	addi	r4,r4,25516
  8003b4:	2709883a 	add	r4,r4,fp
  8003b8:	20000015 	stw	zero,0(r4)
  8003bc:	00003d06 	br	8004b4 <matrixMultiply+0x188>
				sum = sum + a[i][k] * b[k][j];
  8003c0:	017ffff4 	movhi	r5,65535
  8003c4:	2958ed04 	addi	r5,r5,25524
  8003c8:	2f0b883a 	add	r5,r5,fp
  8003cc:	28800017 	ldw	r2,0(r5)
  8003d0:	10806424 	muli	r2,r2,400
  8003d4:	1007883a 	mov	r3,r2
  8003d8:	00a71414 	movui	r2,40016
  8003dc:	013ffff4 	movhi	r4,65535
  8003e0:	2118ea04 	addi	r4,r4,25512
  8003e4:	2709883a 	add	r4,r4,fp
  8003e8:	2085883a 	add	r2,r4,r2
  8003ec:	10800017 	ldw	r2,0(r2)
  8003f0:	1887883a 	add	r3,r3,r2
  8003f4:	017ffff4 	movhi	r5,65535
  8003f8:	2958eb04 	addi	r5,r5,25516
  8003fc:	2f0b883a 	add	r5,r5,fp
  800400:	28800017 	ldw	r2,0(r5)
  800404:	1085883a 	add	r2,r2,r2
  800408:	1085883a 	add	r2,r2,r2
  80040c:	10c5883a 	add	r2,r2,r3
  800410:	11000017 	ldw	r4,0(r2)
  800414:	00fffff4 	movhi	r3,65535
  800418:	18d8eb04 	addi	r3,r3,25516
  80041c:	1f07883a 	add	r3,r3,fp
  800420:	18800017 	ldw	r2,0(r3)
  800424:	10806424 	muli	r2,r2,400
  800428:	1007883a 	mov	r3,r2
  80042c:	00a71514 	movui	r2,40020
  800430:	017ffff4 	movhi	r5,65535
  800434:	2958ea04 	addi	r5,r5,25512
  800438:	2f0b883a 	add	r5,r5,fp
  80043c:	2885883a 	add	r2,r5,r2
  800440:	10800017 	ldw	r2,0(r2)
  800444:	1887883a 	add	r3,r3,r2
  800448:	017ffff4 	movhi	r5,65535
  80044c:	2958ec04 	addi	r5,r5,25520
  800450:	2f0b883a 	add	r5,r5,fp
  800454:	28800017 	ldw	r2,0(r5)
  800458:	1085883a 	add	r2,r2,r2
  80045c:	1085883a 	add	r2,r2,r2
  800460:	10c5883a 	add	r2,r2,r3
  800464:	10800017 	ldw	r2,0(r2)
  800468:	2087383a 	mul	r3,r4,r2
  80046c:	013ffff4 	movhi	r4,65535
  800470:	2118ea04 	addi	r4,r4,25512
  800474:	2709883a 	add	r4,r4,fp
  800478:	20800017 	ldw	r2,0(r4)
  80047c:	10c5883a 	add	r2,r2,r3
  800480:	017ffff4 	movhi	r5,65535
  800484:	2958ea04 	addi	r5,r5,25512
  800488:	2f0b883a 	add	r5,r5,fp
  80048c:	28800015 	stw	r2,0(r5)
	int c[100][100];

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j++) {
			sum = 0;
			for (k = 0; k < MATRIX_SIZE; k++) {
  800490:	00fffff4 	movhi	r3,65535
  800494:	18d8eb04 	addi	r3,r3,25516
  800498:	1f07883a 	add	r3,r3,fp
  80049c:	18800017 	ldw	r2,0(r3)
  8004a0:	10800044 	addi	r2,r2,1
  8004a4:	013ffff4 	movhi	r4,65535
  8004a8:	2118eb04 	addi	r4,r4,25516
  8004ac:	2709883a 	add	r4,r4,fp
  8004b0:	20800015 	stw	r2,0(r4)
  8004b4:	017ffff4 	movhi	r5,65535
  8004b8:	2958eb04 	addi	r5,r5,25516
  8004bc:	2f0b883a 	add	r5,r5,fp
  8004c0:	28800017 	ldw	r2,0(r5)
  8004c4:	10801910 	cmplti	r2,r2,100
  8004c8:	103fbd1e 	bne	r2,zero,8003c0 <matrixMultiply+0x94>
				sum = sum + a[i][k] * b[k][j];
			}
			c[i][j] = sum;
  8004cc:	00fffff4 	movhi	r3,65535
  8004d0:	18d8ed04 	addi	r3,r3,25524
  8004d4:	1f07883a 	add	r3,r3,fp
  8004d8:	18800017 	ldw	r2,0(r3)
  8004dc:	013ffff4 	movhi	r4,65535
  8004e0:	2118ec04 	addi	r4,r4,25520
  8004e4:	2709883a 	add	r4,r4,fp
  8004e8:	20c00017 	ldw	r3,0(r4)
  8004ec:	10801924 	muli	r2,r2,100
  8004f0:	10c5883a 	add	r2,r2,r3
  8004f4:	1085883a 	add	r2,r2,r2
  8004f8:	1085883a 	add	r2,r2,r2
  8004fc:	017ffff4 	movhi	r5,65535
  800500:	2958ea04 	addi	r5,r5,25512
  800504:	2f0b883a 	add	r5,r5,fp
  800508:	1145883a 	add	r2,r2,r5
  80050c:	10c00404 	addi	r3,r2,16
  800510:	013ffff4 	movhi	r4,65535
  800514:	2118ea04 	addi	r4,r4,25512
  800518:	2709883a 	add	r4,r4,fp
  80051c:	20800017 	ldw	r2,0(r4)
  800520:	18800015 	stw	r2,0(r3)
	int i, j, k;
	int sum;
	int c[100][100];

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j++) {
  800524:	017ffff4 	movhi	r5,65535
  800528:	2958ec04 	addi	r5,r5,25520
  80052c:	2f0b883a 	add	r5,r5,fp
  800530:	28800017 	ldw	r2,0(r5)
  800534:	10800044 	addi	r2,r2,1
  800538:	00fffff4 	movhi	r3,65535
  80053c:	18d8ec04 	addi	r3,r3,25520
  800540:	1f07883a 	add	r3,r3,fp
  800544:	18800015 	stw	r2,0(r3)
  800548:	013ffff4 	movhi	r4,65535
  80054c:	2118ec04 	addi	r4,r4,25520
  800550:	2709883a 	add	r4,r4,fp
  800554:	20800017 	ldw	r2,0(r4)
  800558:	10801910 	cmplti	r2,r2,100
  80055c:	103f8f1e 	bne	r2,zero,80039c <matrixMultiply+0x70>
{
	int i, j, k;
	int sum;
	int c[100][100];

	for (i = 0; i < MATRIX_SIZE; i++) {
  800560:	017ffff4 	movhi	r5,65535
  800564:	2958ed04 	addi	r5,r5,25524
  800568:	2f0b883a 	add	r5,r5,fp
  80056c:	28800017 	ldw	r2,0(r5)
  800570:	10800044 	addi	r2,r2,1
  800574:	00fffff4 	movhi	r3,65535
  800578:	18d8ed04 	addi	r3,r3,25524
  80057c:	1f07883a 	add	r3,r3,fp
  800580:	18800015 	stw	r2,0(r3)
  800584:	013ffff4 	movhi	r4,65535
  800588:	2118ed04 	addi	r4,r4,25524
  80058c:	2709883a 	add	r4,r4,fp
  800590:	20800017 	ldw	r2,0(r4)
  800594:	10801910 	cmplti	r2,r2,100
  800598:	103f7b1e 	bne	r2,zero,800388 <matrixMultiply+0x5c>
				sum = sum + a[i][k] * b[k][j];
			}
			c[i][j] = sum;
		}
	}
}
  80059c:	e037883a 	mov	sp,fp
  8005a0:	df000017 	ldw	fp,0(sp)
  8005a4:	dec00104 	addi	sp,sp,4
  8005a8:	f800283a 	ret

008005ac <timeMatrixMultiply>:

void timeMatrixMultiply(void)
{
  8005ac:	defffe04 	addi	sp,sp,-8
  8005b0:	dfc00115 	stw	ra,4(sp)
  8005b4:	df000015 	stw	fp,0(sp)
  8005b8:	d839883a 	mov	fp,sp
  8005bc:	023ffff4 	movhi	r8,65535
  8005c0:	4231db04 	addi	r8,r8,-14484
  8005c4:	da37883a 	add	sp,sp,r8
	int a[MATRIX_SIZE][MATRIX_SIZE];
	int b[MATRIX_SIZE][MATRIX_SIZE];
	int startTime, endTime, ticks;
	float freq, time;
	setupMatrixA(a);
  8005c8:	00bffff4 	movhi	r2,65535
  8005cc:	10b1e004 	addi	r2,r2,-14464
  8005d0:	e089883a 	add	r4,fp,r2
  8005d4:	08002000 	call	800200 <setupMatrixA>
	setupMatrixB(b);
  8005d8:	00a71514 	movui	r2,40020
  8005dc:	00fffff4 	movhi	r3,65535
  8005e0:	18f1db04 	addi	r3,r3,-14484
  8005e4:	1f07883a 	add	r3,r3,fp
  8005e8:	1889883a 	add	r4,r3,r2
  8005ec:	08002940 	call	800294 <setupMatrixB>

	startTime = (int)alt_timestamp();
  8005f0:	080c7ac0 	call	80c7ac <alt_timestamp>
  8005f4:	013ffff4 	movhi	r4,65535
  8005f8:	2131df04 	addi	r4,r4,-14468
  8005fc:	2709883a 	add	r4,r4,fp
  800600:	20800015 	stw	r2,0(r4)
	matrixMultiply(a, b);
  800604:	00bffff4 	movhi	r2,65535
  800608:	10b1e004 	addi	r2,r2,-14464
  80060c:	e089883a 	add	r4,fp,r2
  800610:	00a71514 	movui	r2,40020
  800614:	00fffff4 	movhi	r3,65535
  800618:	18f1db04 	addi	r3,r3,-14484
  80061c:	1f07883a 	add	r3,r3,fp
  800620:	188b883a 	add	r5,r3,r2
  800624:	080032c0 	call	80032c <matrixMultiply>
	endTime = (int)alt_timestamp();
  800628:	080c7ac0 	call	80c7ac <alt_timestamp>
  80062c:	013ffff4 	movhi	r4,65535
  800630:	2131de04 	addi	r4,r4,-14472
  800634:	2709883a 	add	r4,r4,fp
  800638:	20800015 	stw	r2,0(r4)
	ticks = endTime - startTime;
  80063c:	00bffff4 	movhi	r2,65535
  800640:	10b1de04 	addi	r2,r2,-14472
  800644:	1705883a 	add	r2,r2,fp
  800648:	10c00017 	ldw	r3,0(r2)
  80064c:	013ffff4 	movhi	r4,65535
  800650:	2131df04 	addi	r4,r4,-14468
  800654:	2709883a 	add	r4,r4,fp
  800658:	20800017 	ldw	r2,0(r4)
  80065c:	1885c83a 	sub	r2,r3,r2
  800660:	00fffff4 	movhi	r3,65535
  800664:	18f1dd04 	addi	r3,r3,-14476
  800668:	1f07883a 	add	r3,r3,fp
  80066c:	18800015 	stw	r2,0(r3)
	freq = (float)alt_timestamp_freq();
  800670:	080c8480 	call	80c848 <alt_timestamp_freq>
  800674:	1009883a 	mov	r4,r2
  800678:	08010880 	call	801088 <__floatunsisf>
  80067c:	013ffff4 	movhi	r4,65535
  800680:	2131dc04 	addi	r4,r4,-14480
  800684:	2709883a 	add	r4,r4,fp
  800688:	20800015 	stw	r2,0(r4)
	time = (float)ticks / freq;
  80068c:	00bffff4 	movhi	r2,65535
  800690:	10b1dd04 	addi	r2,r2,-14476
  800694:	1705883a 	add	r2,r2,fp
  800698:	11000017 	ldw	r4,0(r2)
  80069c:	0800f9c0 	call	800f9c <__floatsisf>
  8006a0:	1009883a 	mov	r4,r2
  8006a4:	00fffff4 	movhi	r3,65535
  8006a8:	18f1dc04 	addi	r3,r3,-14480
  8006ac:	1f07883a 	add	r3,r3,fp
  8006b0:	19400017 	ldw	r5,0(r3)
  8006b4:	0800e280 	call	800e28 <__divsf3>
  8006b8:	013ffff4 	movhi	r4,65535
  8006bc:	2131db04 	addi	r4,r4,-14484
  8006c0:	2709883a 	add	r4,r4,fp
  8006c4:	20800015 	stw	r2,0(r4)

	printf("Time taken: %d clock ticks\n", ticks);
  8006c8:	01002074 	movhi	r4,129
  8006cc:	213e5804 	addi	r4,r4,-1696
  8006d0:	00bffff4 	movhi	r2,65535
  8006d4:	10b1dd04 	addi	r2,r2,-14476
  8006d8:	1705883a 	add	r2,r2,fp
  8006dc:	11400017 	ldw	r5,0(r2)
  8006e0:	080173c0 	call	80173c <printf>
	printf("            %f seconds\n", time);
  8006e4:	00fffff4 	movhi	r3,65535
  8006e8:	18f1db04 	addi	r3,r3,-14484
  8006ec:	1f07883a 	add	r3,r3,fp
  8006f0:	19000017 	ldw	r4,0(r3)
  8006f4:	08010340 	call	801034 <__extendsfdf2>
  8006f8:	100d883a 	mov	r6,r2
  8006fc:	180f883a 	mov	r7,r3
  800700:	01002074 	movhi	r4,129
  800704:	213e5f04 	addi	r4,r4,-1668
  800708:	300b883a 	mov	r5,r6
  80070c:	380d883a 	mov	r6,r7
  800710:	080173c0 	call	80173c <printf>
}
  800714:	e037883a 	mov	sp,fp
  800718:	dfc00117 	ldw	ra,4(sp)
  80071c:	df000017 	ldw	fp,0(sp)
  800720:	dec00204 	addi	sp,sp,8
  800724:	f800283a 	ret

00800728 <main>:

#define switches (volatile char *) 0x1001060
#define leds (char *) 0x1001070

int main()
{
  800728:	defff504 	addi	sp,sp,-44
  80072c:	dfc00a15 	stw	ra,40(sp)
  800730:	df000915 	stw	fp,36(sp)
  800734:	df000904 	addi	fp,sp,36
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");//("/dev/Char_LCD_16x2");
  800738:	01002074 	movhi	r4,129
  80073c:	213e6504 	addi	r4,r4,-1644
  800740:	080c9540 	call	80c954 <alt_up_character_lcd_open_dev>
  800744:	e0bffb15 	stw	r2,-20(fp)
	if ( char_lcd_dev == NULL)
  800748:	e0bffb17 	ldw	r2,-20(fp)
  80074c:	1004c03a 	cmpne	r2,r2,zero
  800750:	1000041e 	bne	r2,zero,800764 <main+0x3c>
		printf ("Error: could not open character LCD device\n");
  800754:	01002074 	movhi	r4,129
  800758:	213e6b04 	addi	r4,r4,-1620
  80075c:	08018540 	call	801854 <puts>
  800760:	00000306 	br	800770 <main+0x48>
	else
		printf ("Opened character LCD device\n");
  800764:	01002074 	movhi	r4,129
  800768:	213e7604 	addi	r4,r4,-1576
  80076c:	08018540 	call	801854 <puts>
	/* Initialize the character display */
	alt_up_character_lcd_init (char_lcd_dev);
  800770:	e13ffb17 	ldw	r4,-20(fp)
  800774:	080c9200 	call	80c920 <alt_up_character_lcd_init>
	/* Write "Welcome to" in the first row */
	alt_up_character_lcd_string(char_lcd_dev, "Welcome to");
  800778:	e13ffb17 	ldw	r4,-20(fp)
  80077c:	01402074 	movhi	r5,129
  800780:	297e7d04 	addi	r5,r5,-1548
  800784:	080ca0c0 	call	80ca0c <alt_up_character_lcd_string>
	/* Write "the DE2 board" in the second row */
	char second_row[] = "the DE2 board\0";
  800788:	00c02074 	movhi	r3,129
  80078c:	18fe8404 	addi	r3,r3,-1520
  800790:	18800017 	ldw	r2,0(r3)
  800794:	e0bffc15 	stw	r2,-16(fp)
  800798:	18800117 	ldw	r2,4(r3)
  80079c:	e0bffd15 	stw	r2,-12(fp)
  8007a0:	18800217 	ldw	r2,8(r3)
  8007a4:	e0bffe15 	stw	r2,-8(fp)
  8007a8:	1880030b 	ldhu	r2,12(r3)
  8007ac:	e0bfff0d 	sth	r2,-4(fp)
  8007b0:	18800383 	ldbu	r2,14(r3)
  8007b4:	e0bfff85 	stb	r2,-2(fp)
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
  8007b8:	e13ffb17 	ldw	r4,-20(fp)
  8007bc:	000b883a 	mov	r5,zero
  8007c0:	01800044 	movi	r6,1
  8007c4:	080cad00 	call	80cad0 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, second_row);
  8007c8:	e17ffc04 	addi	r5,fp,-16
  8007cc:	e13ffb17 	ldw	r4,-20(fp)
  8007d0:	080ca0c0 	call	80ca0c <alt_up_character_lcd_string>

	printf("hello, world!\n");
  8007d4:	01002074 	movhi	r4,129
  8007d8:	213e8004 	addi	r4,r4,-1536
  8007dc:	08018540 	call	801854 <puts>
	alt_up_pixel_buffer_dma_dev* pixel_buffer = setUp();
  8007e0:	0800c040 	call	800c04 <setUp>
  8007e4:	e0bffa15 	stw	r2,-24(fp)
	clearScreen(pixel_buffer);
  8007e8:	e13ffa17 	ldw	r4,-24(fp)
  8007ec:	0800c600 	call	800c60 <clearScreen>
	drawLine(pixel_buffer, 64, 0, 64, 240, 0xFFFF);
  8007f0:	00803c04 	movi	r2,240
  8007f4:	d8800015 	stw	r2,0(sp)
  8007f8:	00bfffd4 	movui	r2,65535
  8007fc:	d8800115 	stw	r2,4(sp)
  800800:	e13ffa17 	ldw	r4,-24(fp)
  800804:	01401004 	movi	r5,64
  800808:	000d883a 	mov	r6,zero
  80080c:	01c01004 	movi	r7,64
  800810:	0800cb00 	call	800cb0 <drawLine>
	drawLine(pixel_buffer, 64, 0, 320, 240, 0xFFFF);
  800814:	00803c04 	movi	r2,240
  800818:	d8800015 	stw	r2,0(sp)
  80081c:	00bfffd4 	movui	r2,65535
  800820:	d8800115 	stw	r2,4(sp)
  800824:	e13ffa17 	ldw	r4,-24(fp)
  800828:	01401004 	movi	r5,64
  80082c:	000d883a 	mov	r6,zero
  800830:	01c05004 	movi	r7,320
  800834:	0800cb00 	call	800cb0 <drawLine>
	drawLine(pixel_buffer, 64, 240, 320, 0, 0xFFFF);
  800838:	d8000015 	stw	zero,0(sp)
  80083c:	00bfffd4 	movui	r2,65535
  800840:	d8800115 	stw	r2,4(sp)
  800844:	e13ffa17 	ldw	r4,-24(fp)
  800848:	01401004 	movi	r5,64
  80084c:	01803c04 	movi	r6,240
  800850:	01c05004 	movi	r7,320
  800854:	0800cb00 	call	800cb0 <drawLine>
	drawBox(pixel_buffer, 7, 90, 57, 150, 0xFFFF);
  800858:	00802584 	movi	r2,150
  80085c:	d8800015 	stw	r2,0(sp)
  800860:	00bfffd4 	movui	r2,65535
  800864:	d8800115 	stw	r2,4(sp)
  800868:	e13ffa17 	ldw	r4,-24(fp)
  80086c:	014001c4 	movi	r5,7
  800870:	01801684 	movi	r6,90
  800874:	01c00e44 	movi	r7,57
  800878:	0800dcc0 	call	800dcc <drawBox>
	printLine();
  80087c:	0800d780 	call	800d78 <printLine>

	char keys;

	while (1)
	{
		keys = IORD_8DIRECT(0x1001080, 0);
  800880:	00804034 	movhi	r2,256
  800884:	10842004 	addi	r2,r2,4224
  800888:	10800023 	ldbuio	r2,0(r2)
  80088c:	e0bff905 	stb	r2,-28(fp)
		IOWR_8DIRECT(0x1001070, 0, keys);
  800890:	e0fff907 	ldb	r3,-28(fp)
  800894:	00804034 	movhi	r2,256
  800898:	10841c04 	addi	r2,r2,4208
  80089c:	10c00025 	stbio	r3,0(r2)
	}
  8008a0:	003ff706 	br	800880 <main+0x158>

008008a4 <timer_test>:
#include "sys/alt_alarm.h"
#include "system.h"
#include "timer.h"

// Test code from lab
void timer_test(void) {
  8008a4:	defff304 	addi	sp,sp,-52
  8008a8:	dfc00c15 	stw	ra,48(sp)
  8008ac:	df000b15 	stw	fp,44(sp)
  8008b0:	dc000a15 	stw	r16,40(sp)
  8008b4:	df000a04 	addi	fp,sp,40
	int ticks_duration;
	int timer_period;
	int status;
	int done;

	printf("Timers\n");
  8008b8:	01002074 	movhi	r4,129
  8008bc:	213e8804 	addi	r4,r4,-1504
  8008c0:	08018540 	call	801854 <puts>
	printf(" Sys Clock Timer\n");
  8008c4:	01002074 	movhi	r4,129
  8008c8:	213e8a04 	addi	r4,r4,-1496
  8008cc:	08018540 	call	801854 <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8008d0:	00802074 	movhi	r2,129
  8008d4:	108daa04 	addi	r2,r2,13992
  8008d8:	10800017 	ldw	r2,0(r2)
	ticks_per_s = alt_ticks_per_second();
  8008dc:	e0bffa15 	stw	r2,-24(fp)
	printf("Tick Freq: %d\n", ticks_per_s);
  8008e0:	01002074 	movhi	r4,129
  8008e4:	213e8f04 	addi	r4,r4,-1476
  8008e8:	e17ffa17 	ldw	r5,-24(fp)
  8008ec:	080173c0 	call	80173c <printf>
	printf(" Recording starting ticks\n");
  8008f0:	01002074 	movhi	r4,129
  8008f4:	213e9304 	addi	r4,r4,-1460
  8008f8:	08018540 	call	801854 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8008fc:	00802074 	movhi	r2,129
  800900:	108dab04 	addi	r2,r2,13996
  800904:	10800017 	ldw	r2,0(r2)
	ticks_start = alt_nticks();
  800908:	e0bffc15 	stw	r2,-16(fp)
	printf(" Sleeping for 5 seconds\n");
  80090c:	01002074 	movhi	r4,129
  800910:	213e9a04 	addi	r4,r4,-1432
  800914:	08018540 	call	801854 <puts>
	usleep(5000000);
  800918:	01001334 	movhi	r4,76
  80091c:	2112d004 	addi	r4,r4,19264
  800920:	080b5f00 	call	80b5f0 <usleep>
	printf(" Recording ending ticks\n");
  800924:	01002074 	movhi	r4,129
  800928:	213ea004 	addi	r4,r4,-1408
  80092c:	08018540 	call	801854 <puts>
  800930:	00802074 	movhi	r2,129
  800934:	108dab04 	addi	r2,r2,13996
  800938:	10800017 	ldw	r2,0(r2)
	ticks_end = alt_nticks();
  80093c:	e0bffb15 	stw	r2,-20(fp)
	ticks_duration = ticks_end -ticks_start;
  800940:	e0fffb17 	ldw	r3,-20(fp)
  800944:	e0bffc17 	ldw	r2,-16(fp)
  800948:	1885c83a 	sub	r2,r3,r2
  80094c:	e0bff915 	stw	r2,-28(fp)
	duration = (float) ticks_duration / (float) ticks_per_s;
  800950:	e13ff917 	ldw	r4,-28(fp)
  800954:	0800f9c0 	call	800f9c <__floatsisf>
  800958:	1021883a 	mov	r16,r2
  80095c:	e13ffa17 	ldw	r4,-24(fp)
  800960:	0800f9c0 	call	800f9c <__floatsisf>
  800964:	8009883a 	mov	r4,r16
  800968:	100b883a 	mov	r5,r2
  80096c:	0800e280 	call	800e28 <__divsf3>
  800970:	e0bffd15 	stw	r2,-12(fp)
	printf(" The program slept for %d ticks (%f seconds)\n\n", ticks_duration,
  800974:	e13ffd17 	ldw	r4,-12(fp)
  800978:	08010340 	call	801034 <__extendsfdf2>
  80097c:	100f883a 	mov	r7,r2
  800980:	1811883a 	mov	r8,r3
  800984:	01002074 	movhi	r4,129
  800988:	213ea604 	addi	r4,r4,-1384
  80098c:	e17ff917 	ldw	r5,-28(fp)
  800990:	380d883a 	mov	r6,r7
  800994:	400f883a 	mov	r7,r8
  800998:	080173c0 	call	80173c <printf>
	duration);

	printf(" Timestamp Timer\n");
  80099c:	01002074 	movhi	r4,129
  8009a0:	213eb204 	addi	r4,r4,-1336
  8009a4:	08018540 	call	801854 <puts>
	freq = alt_timestamp_freq();
  8009a8:	080c8480 	call	80c848 <alt_timestamp_freq>
  8009ac:	e0bfff15 	stw	r2,-4(fp)
	printf(" CPU Freq: %d\n", freq);
  8009b0:	01002074 	movhi	r4,129
  8009b4:	213eb704 	addi	r4,r4,-1316
  8009b8:	e17fff17 	ldw	r5,-4(fp)
  8009bc:	080173c0 	call	80173c <printf>
	printf(" Resetting Timestamp timer\n");
  8009c0:	01002074 	movhi	r4,129
  8009c4:	213ebb04 	addi	r4,r4,-1300
  8009c8:	08018540 	call	801854 <puts>
	alt_timestamp_start();
  8009cc:	080c7080 	call	80c708 <alt_timestamp_start>
	printf(" ...Timing the print of this statement...\n");
  8009d0:	01002074 	movhi	r4,129
  8009d4:	213ec204 	addi	r4,r4,-1272
  8009d8:	08018540 	call	801854 <puts>
	cycles = alt_timestamp();
  8009dc:	080c7ac0 	call	80c7ac <alt_timestamp>
  8009e0:	e0bffe15 	stw	r2,-8(fp)
	duration = (float) cycles / (float) freq;
  8009e4:	e13ffe17 	ldw	r4,-8(fp)
  8009e8:	0800f9c0 	call	800f9c <__floatsisf>
  8009ec:	1021883a 	mov	r16,r2
  8009f0:	e13fff17 	ldw	r4,-4(fp)
  8009f4:	0800f9c0 	call	800f9c <__floatsisf>
  8009f8:	8009883a 	mov	r4,r16
  8009fc:	100b883a 	mov	r5,r2
  800a00:	0800e280 	call	800e28 <__divsf3>
  800a04:	e0bffd15 	stw	r2,-12(fp)
	printf(" It took %d cycles (%f seconds) to print the statement\n\n",
  800a08:	e13ffd17 	ldw	r4,-12(fp)
  800a0c:	08010340 	call	801034 <__extendsfdf2>
  800a10:	100f883a 	mov	r7,r2
  800a14:	1811883a 	mov	r8,r3
  800a18:	01002074 	movhi	r4,129
  800a1c:	213ecd04 	addi	r4,r4,-1228
  800a20:	e17ffe17 	ldw	r5,-8(fp)
  800a24:	380d883a 	mov	r6,r7
  800a28:	400f883a 	mov	r7,r8
  800a2c:	080173c0 	call	80173c <printf>
	cycles, duration);

	printf(" Hardware-Only Timer\n");
  800a30:	01002074 	movhi	r4,129
  800a34:	213edc04 	addi	r4,r4,-1168
  800a38:	08018540 	call	801854 <puts>
	printf(" Setting timer period to 5 seconds.\n");
  800a3c:	01002074 	movhi	r4,129
  800a40:	213ee204 	addi	r4,r4,-1144
  800a44:	08018540 	call	801854 <puts>
	timer_period = 5 * CLOCK_FREQ;
  800a48:	0083b9f4 	movhi	r2,3815
  800a4c:	10aca004 	addi	r2,r2,-19840
  800a50:	e0bff815 	stw	r2,-32(fp)
	// Setting the period registers must be done in 2 steps as they are only 16 bits wide
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 8, timer_period & 0xFFFF); // less significant word
  800a54:	e0bff817 	ldw	r2,-32(fp)
  800a58:	10ffffcc 	andi	r3,r2,65535
  800a5c:	00804034 	movhi	r2,256
  800a60:	10841204 	addi	r2,r2,4168
  800a64:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE,12, timer_period >> 16); // more significant word
  800a68:	e0bff817 	ldw	r2,-32(fp)
  800a6c:	1007d43a 	srai	r3,r2,16
  800a70:	00804034 	movhi	r2,256
  800a74:	10841304 	addi	r2,r2,4172
  800a78:	10c0002d 	sthio	r3,0(r2)
	printf(" Stopping Timer\n");
  800a7c:	01002074 	movhi	r4,129
  800a80:	213eeb04 	addi	r4,r4,-1108
  800a84:	08018540 	call	801854 <puts>
	status = IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0); // read status registers
  800a88:	00804034 	movhi	r2,256
  800a8c:	10841004 	addi	r2,r2,4160
  800a90:	1080002b 	ldhuio	r2,0(r2)
  800a94:	e0bff715 	stw	r2,-36(fp)
	// Write the control registers
	if(status & 0x2) {
  800a98:	e0bff717 	ldw	r2,-36(fp)
  800a9c:	1080008c 	andi	r2,r2,2
  800aa0:	1005003a 	cmpeq	r2,r2,zero
  800aa4:	1000041e 	bne	r2,zero,800ab8 <timer_test+0x214>
		IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 4, 1 << 3); // stop the timer if it was started
  800aa8:	00c04034 	movhi	r3,256
  800aac:	18c41104 	addi	r3,r3,4164
  800ab0:	00800204 	movi	r2,8
  800ab4:	1880002d 	sthio	r2,0(r3)
	}
	printf(" Starting Timer\n");
  800ab8:	01002074 	movhi	r4,129
  800abc:	213eef04 	addi	r4,r4,-1092
  800ac0:	08018540 	call	801854 <puts>
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 4, 1 << 2); // start the timer
  800ac4:	00c04034 	movhi	r3,256
  800ac8:	18c41104 	addi	r3,r3,4164
  800acc:	00800104 	movi	r2,4
  800ad0:	1880002d 	sthio	r2,0(r3)

	printf("  Waiting for timer to expire...\n");
  800ad4:	01002074 	movhi	r4,129
  800ad8:	213ef304 	addi	r4,r4,-1076
  800adc:	08018540 	call	801854 <puts>
	done = 0;
  800ae0:	e03ff615 	stw	zero,-40(fp)
	while(! done) {
  800ae4:	00000706 	br	800b04 <timer_test+0x260>
		status = IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0); // read status registers
  800ae8:	00804034 	movhi	r2,256
  800aec:	10841004 	addi	r2,r2,4160
  800af0:	1080002b 	ldhuio	r2,0(r2)
  800af4:	e0bff715 	stw	r2,-36(fp)
		done = status & 0x1;
  800af8:	e0bff717 	ldw	r2,-36(fp)
  800afc:	1080004c 	andi	r2,r2,1
  800b00:	e0bff615 	stw	r2,-40(fp)
	printf(" Starting Timer\n");
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 4, 1 << 2); // start the timer

	printf("  Waiting for timer to expire...\n");
	done = 0;
	while(! done) {
  800b04:	e0bff617 	ldw	r2,-40(fp)
  800b08:	1005003a 	cmpeq	r2,r2,zero
  800b0c:	103ff61e 	bne	r2,zero,800ae8 <timer_test+0x244>
		status = IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0); // read status registers
		done = status & 0x1;
	}
	printf(" 5 seconds timer is done\n");
  800b10:	01002074 	movhi	r4,129
  800b14:	213efc04 	addi	r4,r4,-1040
  800b18:	08018540 	call	801854 <puts>
}
  800b1c:	e037883a 	mov	sp,fp
  800b20:	dfc00217 	ldw	ra,8(sp)
  800b24:	df000117 	ldw	fp,4(sp)
  800b28:	dc000017 	ldw	r16,0(sp)
  800b2c:	dec00304 	addi	sp,sp,12
  800b30:	f800283a 	ret

00800b34 <setHardwareTimerPeriod>:

// Period is in clock cycles
// ie 5 seconds would be 5 * CLOCK_FREQ
void setHardwareTimerPeriod(int period)
{
  800b34:	defffe04 	addi	sp,sp,-8
  800b38:	df000115 	stw	fp,4(sp)
  800b3c:	df000104 	addi	fp,sp,4
  800b40:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 8, period & 0xFFFF); // less significant word
  800b44:	e0bfff17 	ldw	r2,-4(fp)
  800b48:	10ffffcc 	andi	r3,r2,65535
  800b4c:	00804034 	movhi	r2,256
  800b50:	10841204 	addi	r2,r2,4168
  800b54:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE,12, period >> 16); // more significant word
  800b58:	e0bfff17 	ldw	r2,-4(fp)
  800b5c:	1007d43a 	srai	r3,r2,16
  800b60:	00804034 	movhi	r2,256
  800b64:	10841304 	addi	r2,r2,4172
  800b68:	10c0002d 	sthio	r3,0(r2)
}
  800b6c:	e037883a 	mov	sp,fp
  800b70:	df000017 	ldw	fp,0(sp)
  800b74:	dec00104 	addi	sp,sp,4
  800b78:	f800283a 	ret

00800b7c <isHardwareTimerRunning>:

int isHardwareTimerRunning(void)
{
  800b7c:	defffe04 	addi	sp,sp,-8
  800b80:	df000115 	stw	fp,4(sp)
  800b84:	df000104 	addi	fp,sp,4
	int status = IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0);
  800b88:	00804034 	movhi	r2,256
  800b8c:	10841004 	addi	r2,r2,4160
  800b90:	1080002b 	ldhuio	r2,0(r2)
  800b94:	e0bfff15 	stw	r2,-4(fp)
	return status & 0x2; // not totally sure on this
  800b98:	e0bfff17 	ldw	r2,-4(fp)
  800b9c:	1080008c 	andi	r2,r2,2
}
  800ba0:	e037883a 	mov	sp,fp
  800ba4:	df000017 	ldw	fp,0(sp)
  800ba8:	dec00104 	addi	sp,sp,4
  800bac:	f800283a 	ret

00800bb0 <hasHardwareTimerExpired>:

int hasHardwareTimerExpired(void)
{
  800bb0:	deffff04 	addi	sp,sp,-4
  800bb4:	df000015 	stw	fp,0(sp)
  800bb8:	d839883a 	mov	fp,sp
	return IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0);
  800bbc:	00804034 	movhi	r2,256
  800bc0:	10841004 	addi	r2,r2,4160
  800bc4:	1080002b 	ldhuio	r2,0(r2)
}
  800bc8:	e037883a 	mov	sp,fp
  800bcc:	df000017 	ldw	fp,0(sp)
  800bd0:	dec00104 	addi	sp,sp,4
  800bd4:	f800283a 	ret

00800bd8 <startHardwareTimer>:

void startHardwareTimer(void)
{
  800bd8:	deffff04 	addi	sp,sp,-4
  800bdc:	df000015 	stw	fp,0(sp)
  800be0:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 4, 1 << 2);
  800be4:	00c04034 	movhi	r3,256
  800be8:	18c41104 	addi	r3,r3,4164
  800bec:	00800104 	movi	r2,4
  800bf0:	1880002d 	sthio	r2,0(r3)
}
  800bf4:	e037883a 	mov	sp,fp
  800bf8:	df000017 	ldw	fp,0(sp)
  800bfc:	dec00104 	addi	sp,sp,4
  800c00:	f800283a 	ret

00800c04 <setUp>:
 *  Created on: 2013-09-17
 *      Author: SarahLynn
 */
#include "vga.h"
alt_up_pixel_buffer_dma_dev* setUp(void)
{
  800c04:	defffd04 	addi	sp,sp,-12
  800c08:	dfc00215 	stw	ra,8(sp)
  800c0c:	df000115 	stw	fp,4(sp)
  800c10:	df000104 	addi	fp,sp,4
	alt_up_pixel_buffer_dma_dev* pixel_buffer;

	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
  800c14:	01002074 	movhi	r4,129
  800c18:	213f0304 	addi	r4,r4,-1012
  800c1c:	080d0a40 	call	80d0a4 <alt_up_pixel_buffer_dma_open_dev>
  800c20:	e0bfff15 	stw	r2,-4(fp)

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, PIXEL_BUFFER_BASE);
  800c24:	e13fff17 	ldw	r4,-4(fp)
  800c28:	01404234 	movhi	r5,264
  800c2c:	080d2840 	call	80d284 <alt_up_pixel_buffer_dma_change_back_buffer_address>

	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  800c30:	e13fff17 	ldw	r4,-4(fp)
  800c34:	080d2dc0 	call	80d2dc <alt_up_pixel_buffer_dma_swap_buffers>

	while
		(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  800c38:	e13fff17 	ldw	r4,-4(fp)
  800c3c:	080d3340 	call	80d334 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  800c40:	1004c03a 	cmpne	r2,r2,zero
  800c44:	103ffc1e 	bne	r2,zero,800c38 <setUp+0x34>

	return pixel_buffer;
  800c48:	e0bfff17 	ldw	r2,-4(fp)
}
  800c4c:	e037883a 	mov	sp,fp
  800c50:	dfc00117 	ldw	ra,4(sp)
  800c54:	df000017 	ldw	fp,0(sp)
  800c58:	dec00204 	addi	sp,sp,8
  800c5c:	f800283a 	ret

00800c60 <clearScreen>:

void clearScreen(alt_up_pixel_buffer_dma_dev* pixel_buffer)
{
  800c60:	defffd04 	addi	sp,sp,-12
  800c64:	dfc00215 	stw	ra,8(sp)
  800c68:	df000115 	stw	fp,4(sp)
  800c6c:	df000104 	addi	fp,sp,4
  800c70:	e13fff15 	stw	r4,-4(fp)
	printf("Clearing Screen!\n");
  800c74:	01002074 	movhi	r4,129
  800c78:	213f0904 	addi	r4,r4,-988
  800c7c:	08018540 	call	801854 <puts>

	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
  800c80:	01002074 	movhi	r4,129
  800c84:	213f0304 	addi	r4,r4,-1012
  800c88:	080d0a40 	call	80d0a4 <alt_up_pixel_buffer_dma_open_dev>
  800c8c:	e0bfff15 	stw	r2,-4(fp)

	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  800c90:	e13fff17 	ldw	r4,-4(fp)
  800c94:	000b883a 	mov	r5,zero
  800c98:	080d3680 	call	80d368 <alt_up_pixel_buffer_dma_clear_screen>

	return;
}
  800c9c:	e037883a 	mov	sp,fp
  800ca0:	dfc00117 	ldw	ra,4(sp)
  800ca4:	df000017 	ldw	fp,0(sp)
  800ca8:	dec00204 	addi	sp,sp,8
  800cac:	f800283a 	ret

00800cb0 <drawLine>:

void drawLine(alt_up_pixel_buffer_dma_dev* pixel_buffer, int x0, int y0, int x1, int y1, int color)
{
  800cb0:	defff704 	addi	sp,sp,-36
  800cb4:	dfc00815 	stw	ra,32(sp)
  800cb8:	df000715 	stw	fp,28(sp)
  800cbc:	df000704 	addi	fp,sp,28
  800cc0:	e13ffc15 	stw	r4,-16(fp)
  800cc4:	e17ffd15 	stw	r5,-12(fp)
  800cc8:	e1bffe15 	stw	r6,-8(fp)
  800ccc:	e1ffff15 	stw	r7,-4(fp)
	printf("Drawing Line!\n");
  800cd0:	01002074 	movhi	r4,129
  800cd4:	213f0e04 	addi	r4,r4,-968
  800cd8:	08018540 	call	801854 <puts>


	if (y0 == y1)
  800cdc:	e0fffe17 	ldw	r3,-8(fp)
  800ce0:	e0800217 	ldw	r2,8(fp)
  800ce4:	1880091e 	bne	r3,r2,800d0c <drawLine+0x5c>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, 0);
  800ce8:	e0800317 	ldw	r2,12(fp)
  800cec:	d8800015 	stw	r2,0(sp)
  800cf0:	d8000115 	stw	zero,4(sp)
  800cf4:	e13ffc17 	ldw	r4,-16(fp)
  800cf8:	e17ffd17 	ldw	r5,-12(fp)
  800cfc:	e1bfff17 	ldw	r6,-4(fp)
  800d00:	e1fffe17 	ldw	r7,-8(fp)
  800d04:	080d9c00 	call	80d9c0 <alt_up_pixel_buffer_dma_draw_hline>
  800d08:	00001606 	br	800d64 <drawLine+0xb4>
	}
	else if (x0 == x1)
  800d0c:	e0fffd17 	ldw	r3,-12(fp)
  800d10:	e0bfff17 	ldw	r2,-4(fp)
  800d14:	1880091e 	bne	r3,r2,800d3c <drawLine+0x8c>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, y0, y1, color, 0);
  800d18:	e0800317 	ldw	r2,12(fp)
  800d1c:	d8800015 	stw	r2,0(sp)
  800d20:	d8000115 	stw	zero,4(sp)
  800d24:	e13ffc17 	ldw	r4,-16(fp)
  800d28:	e17ffd17 	ldw	r5,-12(fp)
  800d2c:	e1bffe17 	ldw	r6,-8(fp)
  800d30:	e1c00217 	ldw	r7,8(fp)
  800d34:	080d9c00 	call	80d9c0 <alt_up_pixel_buffer_dma_draw_hline>
  800d38:	00000a06 	br	800d64 <drawLine+0xb4>
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, color, 0);
  800d3c:	e0800217 	ldw	r2,8(fp)
  800d40:	d8800015 	stw	r2,0(sp)
  800d44:	e0800317 	ldw	r2,12(fp)
  800d48:	d8800115 	stw	r2,4(sp)
  800d4c:	d8000215 	stw	zero,8(sp)
  800d50:	e13ffc17 	ldw	r4,-16(fp)
  800d54:	e17ffd17 	ldw	r5,-12(fp)
  800d58:	e1bffe17 	ldw	r6,-8(fp)
  800d5c:	e1ffff17 	ldw	r7,-4(fp)
  800d60:	080e2740 	call	80e274 <alt_up_pixel_buffer_dma_draw_line>
	}

	return;
}
  800d64:	e037883a 	mov	sp,fp
  800d68:	dfc00117 	ldw	ra,4(sp)
  800d6c:	df000017 	ldw	fp,0(sp)
  800d70:	dec00204 	addi	sp,sp,8
  800d74:	f800283a 	ret

00800d78 <printLine>:

void printLine(void)
{
  800d78:	defffd04 	addi	sp,sp,-12
  800d7c:	dfc00215 	stw	ra,8(sp)
  800d80:	df000115 	stw	fp,4(sp)
  800d84:	df000104 	addi	fp,sp,4
	alt_up_char_buffer_dev *char_buffer;
	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  800d88:	01002074 	movhi	r4,129
  800d8c:	213f1204 	addi	r4,r4,-952
  800d90:	080ce240 	call	80ce24 <alt_up_char_buffer_open_dev>
  800d94:	e0bfff15 	stw	r2,-4(fp)
	alt_up_char_buffer_init(char_buffer);
  800d98:	e13fff17 	ldw	r4,-4(fp)
  800d9c:	080cda00 	call	80cda0 <alt_up_char_buffer_init>
	alt_up_char_buffer_string(char_buffer, "LaserSharknado", 40, 30);
  800da0:	e13fff17 	ldw	r4,-4(fp)
  800da4:	01402074 	movhi	r5,129
  800da8:	297f1704 	addi	r5,r5,-932
  800dac:	01800a04 	movi	r6,40
  800db0:	01c00784 	movi	r7,30
  800db4:	080cf340 	call	80cf34 <alt_up_char_buffer_string>

	return;
}
  800db8:	e037883a 	mov	sp,fp
  800dbc:	dfc00117 	ldw	ra,4(sp)
  800dc0:	df000017 	ldw	fp,0(sp)
  800dc4:	dec00204 	addi	sp,sp,8
  800dc8:	f800283a 	ret

00800dcc <drawBox>:

void drawBox(alt_up_pixel_buffer_dma_dev* pixel_buffer, int x0, int y0, int x1, int y1, int color)
{
  800dcc:	defff704 	addi	sp,sp,-36
  800dd0:	dfc00815 	stw	ra,32(sp)
  800dd4:	df000715 	stw	fp,28(sp)
  800dd8:	df000704 	addi	fp,sp,28
  800ddc:	e13ffc15 	stw	r4,-16(fp)
  800de0:	e17ffd15 	stw	r5,-12(fp)
  800de4:	e1bffe15 	stw	r6,-8(fp)
  800de8:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x0, y0, x1, y1, color, 0);
  800dec:	e0800217 	ldw	r2,8(fp)
  800df0:	d8800015 	stw	r2,0(sp)
  800df4:	e0800317 	ldw	r2,12(fp)
  800df8:	d8800115 	stw	r2,4(sp)
  800dfc:	d8000215 	stw	zero,8(sp)
  800e00:	e13ffc17 	ldw	r4,-16(fp)
  800e04:	e17ffd17 	ldw	r5,-12(fp)
  800e08:	e1bffe17 	ldw	r6,-8(fp)
  800e0c:	e1ffff17 	ldw	r7,-4(fp)
  800e10:	080d4cc0 	call	80d4cc <alt_up_pixel_buffer_dma_draw_box>
}
  800e14:	e037883a 	mov	sp,fp
  800e18:	dfc00117 	ldw	ra,4(sp)
  800e1c:	df000017 	ldw	fp,0(sp)
  800e20:	dec00204 	addi	sp,sp,8
  800e24:	f800283a 	ret

00800e28 <__divsf3>:
  800e28:	defff304 	addi	sp,sp,-52
  800e2c:	dc400b15 	stw	r17,44(sp)
  800e30:	dc400204 	addi	r17,sp,8
  800e34:	dc000a15 	stw	r16,40(sp)
  800e38:	d9000015 	stw	r4,0(sp)
  800e3c:	d9400115 	stw	r5,4(sp)
  800e40:	d809883a 	mov	r4,sp
  800e44:	880b883a 	mov	r5,r17
  800e48:	dc000604 	addi	r16,sp,24
  800e4c:	dfc00c15 	stw	ra,48(sp)
  800e50:	08013600 	call	801360 <__unpack_f>
  800e54:	d9000104 	addi	r4,sp,4
  800e58:	800b883a 	mov	r5,r16
  800e5c:	08013600 	call	801360 <__unpack_f>
  800e60:	d9000217 	ldw	r4,8(sp)
  800e64:	00800044 	movi	r2,1
  800e68:	01800104 	movi	r6,4
  800e6c:	11000a2e 	bgeu	r2,r4,800e98 <__divsf3+0x70>
  800e70:	d9400617 	ldw	r5,24(sp)
  800e74:	1140432e 	bgeu	r2,r5,800f84 <__divsf3+0x15c>
  800e78:	d8800317 	ldw	r2,12(sp)
  800e7c:	d8c00717 	ldw	r3,28(sp)
  800e80:	10c4f03a 	xor	r2,r2,r3
  800e84:	d8800315 	stw	r2,12(sp)
  800e88:	21800226 	beq	r4,r6,800e94 <__divsf3+0x6c>
  800e8c:	00800084 	movi	r2,2
  800e90:	2080101e 	bne	r4,r2,800ed4 <__divsf3+0xac>
  800e94:	29000726 	beq	r5,r4,800eb4 <__divsf3+0x8c>
  800e98:	8809883a 	mov	r4,r17
  800e9c:	08012000 	call	801200 <__pack_f>
  800ea0:	dfc00c17 	ldw	ra,48(sp)
  800ea4:	dc400b17 	ldw	r17,44(sp)
  800ea8:	dc000a17 	ldw	r16,40(sp)
  800eac:	dec00d04 	addi	sp,sp,52
  800eb0:	f800283a 	ret
  800eb4:	01002074 	movhi	r4,129
  800eb8:	213f1b04 	addi	r4,r4,-916
  800ebc:	08012000 	call	801200 <__pack_f>
  800ec0:	dfc00c17 	ldw	ra,48(sp)
  800ec4:	dc400b17 	ldw	r17,44(sp)
  800ec8:	dc000a17 	ldw	r16,40(sp)
  800ecc:	dec00d04 	addi	sp,sp,52
  800ed0:	f800283a 	ret
  800ed4:	29802d26 	beq	r5,r6,800f8c <__divsf3+0x164>
  800ed8:	28801a26 	beq	r5,r2,800f44 <__divsf3+0x11c>
  800edc:	d8c00417 	ldw	r3,16(sp)
  800ee0:	d8800817 	ldw	r2,32(sp)
  800ee4:	d9000517 	ldw	r4,20(sp)
  800ee8:	d9800917 	ldw	r6,36(sp)
  800eec:	1885c83a 	sub	r2,r3,r2
  800ef0:	d8800415 	stw	r2,16(sp)
  800ef4:	2180032e 	bgeu	r4,r6,800f04 <__divsf3+0xdc>
  800ef8:	10bfffc4 	addi	r2,r2,-1
  800efc:	d8800415 	stw	r2,16(sp)
  800f00:	2109883a 	add	r4,r4,r4
  800f04:	01500034 	movhi	r5,16384
  800f08:	0007883a 	mov	r3,zero
  800f0c:	0005883a 	mov	r2,zero
  800f10:	01c007c4 	movi	r7,31
  800f14:	10800044 	addi	r2,r2,1
  800f18:	21800236 	bltu	r4,r6,800f24 <__divsf3+0xfc>
  800f1c:	1946b03a 	or	r3,r3,r5
  800f20:	2189c83a 	sub	r4,r4,r6
  800f24:	280ad07a 	srli	r5,r5,1
  800f28:	2109883a 	add	r4,r4,r4
  800f2c:	11fff91e 	bne	r2,r7,800f14 <__divsf3+0xec>
  800f30:	19401fcc 	andi	r5,r3,127
  800f34:	00801004 	movi	r2,64
  800f38:	28800a26 	beq	r5,r2,800f64 <__divsf3+0x13c>
  800f3c:	d8c00515 	stw	r3,20(sp)
  800f40:	003fd506 	br	800e98 <__divsf3+0x70>
  800f44:	8809883a 	mov	r4,r17
  800f48:	d9800215 	stw	r6,8(sp)
  800f4c:	08012000 	call	801200 <__pack_f>
  800f50:	dfc00c17 	ldw	ra,48(sp)
  800f54:	dc400b17 	ldw	r17,44(sp)
  800f58:	dc000a17 	ldw	r16,40(sp)
  800f5c:	dec00d04 	addi	sp,sp,52
  800f60:	f800283a 	ret
  800f64:	1880200c 	andi	r2,r3,128
  800f68:	103ff41e 	bne	r2,zero,800f3c <__divsf3+0x114>
  800f6c:	203ff326 	beq	r4,zero,800f3c <__divsf3+0x114>
  800f70:	1947883a 	add	r3,r3,r5
  800f74:	00bfe004 	movi	r2,-128
  800f78:	1886703a 	and	r3,r3,r2
  800f7c:	d8c00515 	stw	r3,20(sp)
  800f80:	003fc506 	br	800e98 <__divsf3+0x70>
  800f84:	8009883a 	mov	r4,r16
  800f88:	003fc406 	br	800e9c <__divsf3+0x74>
  800f8c:	8809883a 	mov	r4,r17
  800f90:	d8000515 	stw	zero,20(sp)
  800f94:	d8000415 	stw	zero,16(sp)
  800f98:	003fc006 	br	800e9c <__divsf3+0x74>

00800f9c <__floatsisf>:
  800f9c:	2006d7fa 	srli	r3,r4,31
  800fa0:	defffa04 	addi	sp,sp,-24
  800fa4:	008000c4 	movi	r2,3
  800fa8:	dfc00515 	stw	ra,20(sp)
  800fac:	dc000415 	stw	r16,16(sp)
  800fb0:	d8800015 	stw	r2,0(sp)
  800fb4:	d8c00115 	stw	r3,4(sp)
  800fb8:	2000081e 	bne	r4,zero,800fdc <__floatsisf+0x40>
  800fbc:	00800084 	movi	r2,2
  800fc0:	d8800015 	stw	r2,0(sp)
  800fc4:	d809883a 	mov	r4,sp
  800fc8:	08012000 	call	801200 <__pack_f>
  800fcc:	dfc00517 	ldw	ra,20(sp)
  800fd0:	dc000417 	ldw	r16,16(sp)
  800fd4:	dec00604 	addi	sp,sp,24
  800fd8:	f800283a 	ret
  800fdc:	00800784 	movi	r2,30
  800fe0:	1807003a 	cmpeq	r3,r3,zero
  800fe4:	d8800215 	stw	r2,8(sp)
  800fe8:	18000e1e 	bne	r3,zero,801024 <__floatsisf+0x88>
  800fec:	00a00034 	movhi	r2,32768
  800ff0:	20800e26 	beq	r4,r2,80102c <__floatsisf+0x90>
  800ff4:	0121c83a 	sub	r16,zero,r4
  800ff8:	8009883a 	mov	r4,r16
  800ffc:	dc000315 	stw	r16,12(sp)
  801000:	08011800 	call	801180 <__clzsi2>
  801004:	117fffc4 	addi	r5,r2,-1
  801008:	017fee0e 	bge	zero,r5,800fc4 <__floatsisf+0x28>
  80100c:	d8800217 	ldw	r2,8(sp)
  801010:	8146983a 	sll	r3,r16,r5
  801014:	1145c83a 	sub	r2,r2,r5
  801018:	d8c00315 	stw	r3,12(sp)
  80101c:	d8800215 	stw	r2,8(sp)
  801020:	003fe806 	br	800fc4 <__floatsisf+0x28>
  801024:	2021883a 	mov	r16,r4
  801028:	003ff306 	br	800ff8 <__floatsisf+0x5c>
  80102c:	00b3c034 	movhi	r2,52992
  801030:	003fe606 	br	800fcc <__floatsisf+0x30>

00801034 <__extendsfdf2>:
  801034:	defff904 	addi	sp,sp,-28
  801038:	d9000115 	stw	r4,4(sp)
  80103c:	d9400204 	addi	r5,sp,8
  801040:	d9000104 	addi	r4,sp,4
  801044:	dfc00615 	stw	ra,24(sp)
  801048:	08013600 	call	801360 <__unpack_f>
  80104c:	d9c00517 	ldw	r7,20(sp)
  801050:	0011883a 	mov	r8,zero
  801054:	400697ba 	slli	r3,r8,30
  801058:	3812d0ba 	srli	r9,r7,2
  80105c:	380497ba 	slli	r2,r7,30
  801060:	d9000217 	ldw	r4,8(sp)
  801064:	d9400317 	ldw	r5,12(sp)
  801068:	d9800417 	ldw	r6,16(sp)
  80106c:	48c6b03a 	or	r3,r9,r3
  801070:	100f883a 	mov	r7,r2
  801074:	d8c00015 	stw	r3,0(sp)
  801078:	08011480 	call	801148 <__make_dp>
  80107c:	dfc00617 	ldw	ra,24(sp)
  801080:	dec00704 	addi	sp,sp,28
  801084:	f800283a 	ret

00801088 <__floatunsisf>:
  801088:	defff904 	addi	sp,sp,-28
  80108c:	dc400515 	stw	r17,20(sp)
  801090:	dc000415 	stw	r16,16(sp)
  801094:	dfc00615 	stw	ra,24(sp)
  801098:	04400784 	movi	r17,30
  80109c:	2021883a 	mov	r16,r4
  8010a0:	d8000115 	stw	zero,4(sp)
  8010a4:	2000091e 	bne	r4,zero,8010cc <__floatunsisf+0x44>
  8010a8:	00800084 	movi	r2,2
  8010ac:	d8800015 	stw	r2,0(sp)
  8010b0:	d809883a 	mov	r4,sp
  8010b4:	08012000 	call	801200 <__pack_f>
  8010b8:	dfc00617 	ldw	ra,24(sp)
  8010bc:	dc400517 	ldw	r17,20(sp)
  8010c0:	dc000417 	ldw	r16,16(sp)
  8010c4:	dec00704 	addi	sp,sp,28
  8010c8:	f800283a 	ret
  8010cc:	008000c4 	movi	r2,3
  8010d0:	d9000315 	stw	r4,12(sp)
  8010d4:	d8800015 	stw	r2,0(sp)
  8010d8:	dc400215 	stw	r17,8(sp)
  8010dc:	08011800 	call	801180 <__clzsi2>
  8010e0:	117fffc4 	addi	r5,r2,-1
  8010e4:	0147c83a 	sub	r3,zero,r5
  8010e8:	00800044 	movi	r2,1
  8010ec:	10c4983a 	sll	r2,r2,r3
  8010f0:	80c6d83a 	srl	r3,r16,r3
  8010f4:	8949c83a 	sub	r4,r17,r5
  8010f8:	10bfffc4 	addi	r2,r2,-1
  8010fc:	8084703a 	and	r2,r16,r2
  801100:	1004c03a 	cmpne	r2,r2,zero
  801104:	1886b03a 	or	r3,r3,r2
  801108:	28000c16 	blt	r5,zero,80113c <__floatunsisf+0xb4>
  80110c:	8144983a 	sll	r2,r16,r5
  801110:	8947c83a 	sub	r3,r17,r5
  801114:	283fe626 	beq	r5,zero,8010b0 <__floatunsisf+0x28>
  801118:	d809883a 	mov	r4,sp
  80111c:	d8800315 	stw	r2,12(sp)
  801120:	d8c00215 	stw	r3,8(sp)
  801124:	08012000 	call	801200 <__pack_f>
  801128:	dfc00617 	ldw	ra,24(sp)
  80112c:	dc400517 	ldw	r17,20(sp)
  801130:	dc000417 	ldw	r16,16(sp)
  801134:	dec00704 	addi	sp,sp,28
  801138:	f800283a 	ret
  80113c:	d8c00315 	stw	r3,12(sp)
  801140:	d9000215 	stw	r4,8(sp)
  801144:	003fda06 	br	8010b0 <__floatunsisf+0x28>

00801148 <__make_dp>:
  801148:	defff904 	addi	sp,sp,-28
  80114c:	d8c00717 	ldw	r3,28(sp)
  801150:	d9000015 	stw	r4,0(sp)
  801154:	d809883a 	mov	r4,sp
  801158:	dfc00515 	stw	ra,20(sp)
  80115c:	d9c00615 	stw	r7,24(sp)
  801160:	d9400115 	stw	r5,4(sp)
  801164:	d9800215 	stw	r6,8(sp)
  801168:	d8c00415 	stw	r3,16(sp)
  80116c:	d9c00315 	stw	r7,12(sp)
  801170:	08014280 	call	801428 <__pack_d>
  801174:	dfc00517 	ldw	ra,20(sp)
  801178:	dec00704 	addi	sp,sp,28
  80117c:	f800283a 	ret

00801180 <__clzsi2>:
  801180:	00bfffd4 	movui	r2,65535
  801184:	11000e36 	bltu	r2,r4,8011c0 <__clzsi2+0x40>
  801188:	00803fc4 	movi	r2,255
  80118c:	01400204 	movi	r5,8
  801190:	0007883a 	mov	r3,zero
  801194:	11001036 	bltu	r2,r4,8011d8 <__clzsi2+0x58>
  801198:	000b883a 	mov	r5,zero
  80119c:	20c6d83a 	srl	r3,r4,r3
  8011a0:	00802074 	movhi	r2,129
  8011a4:	10bf1f04 	addi	r2,r2,-900
  8011a8:	1887883a 	add	r3,r3,r2
  8011ac:	18800003 	ldbu	r2,0(r3)
  8011b0:	00c00804 	movi	r3,32
  8011b4:	2885883a 	add	r2,r5,r2
  8011b8:	1885c83a 	sub	r2,r3,r2
  8011bc:	f800283a 	ret
  8011c0:	01400404 	movi	r5,16
  8011c4:	00804034 	movhi	r2,256
  8011c8:	10bfffc4 	addi	r2,r2,-1
  8011cc:	2807883a 	mov	r3,r5
  8011d0:	113ff22e 	bgeu	r2,r4,80119c <__clzsi2+0x1c>
  8011d4:	01400604 	movi	r5,24
  8011d8:	2807883a 	mov	r3,r5
  8011dc:	20c6d83a 	srl	r3,r4,r3
  8011e0:	00802074 	movhi	r2,129
  8011e4:	10bf1f04 	addi	r2,r2,-900
  8011e8:	1887883a 	add	r3,r3,r2
  8011ec:	18800003 	ldbu	r2,0(r3)
  8011f0:	00c00804 	movi	r3,32
  8011f4:	2885883a 	add	r2,r5,r2
  8011f8:	1885c83a 	sub	r2,r3,r2
  8011fc:	f800283a 	ret

00801200 <__pack_f>:
  801200:	20c00017 	ldw	r3,0(r4)
  801204:	01c00044 	movi	r7,1
  801208:	21800317 	ldw	r6,12(r4)
  80120c:	21400117 	ldw	r5,4(r4)
  801210:	38c02d2e 	bgeu	r7,r3,8012c8 <__pack_f+0xc8>
  801214:	00800104 	movi	r2,4
  801218:	18802826 	beq	r3,r2,8012bc <__pack_f+0xbc>
  80121c:	00800084 	movi	r2,2
  801220:	18800126 	beq	r3,r2,801228 <__pack_f+0x28>
  801224:	3000101e 	bne	r6,zero,801268 <__pack_f+0x68>
  801228:	000d883a 	mov	r6,zero
  80122c:	0007883a 	mov	r3,zero
  801230:	19003fcc 	andi	r4,r3,255
  801234:	200895fa 	slli	r4,r4,23
  801238:	00c02034 	movhi	r3,128
  80123c:	18ffffc4 	addi	r3,r3,-1
  801240:	30c6703a 	and	r3,r6,r3
  801244:	10a0002c 	andhi	r2,r2,32768
  801248:	10c4b03a 	or	r2,r2,r3
  80124c:	280a97fa 	slli	r5,r5,31
  801250:	1104b03a 	or	r2,r2,r4
  801254:	00e00034 	movhi	r3,32768
  801258:	18ffffc4 	addi	r3,r3,-1
  80125c:	10c4703a 	and	r2,r2,r3
  801260:	1144b03a 	or	r2,r2,r5
  801264:	f800283a 	ret
  801268:	21000217 	ldw	r4,8(r4)
  80126c:	00bfe084 	movi	r2,-126
  801270:	20801b16 	blt	r4,r2,8012e0 <__pack_f+0xe0>
  801274:	00801fc4 	movi	r2,127
  801278:	11001016 	blt	r2,r4,8012bc <__pack_f+0xbc>
  80127c:	308e703a 	and	r7,r6,r2
  801280:	2087883a 	add	r3,r4,r2
  801284:	00801004 	movi	r2,64
  801288:	38800526 	beq	r7,r2,8012a0 <__pack_f+0xa0>
  80128c:	31800fc4 	addi	r6,r6,63
  801290:	30000716 	blt	r6,zero,8012b0 <__pack_f+0xb0>
  801294:	300490ba 	slli	r2,r6,2
  801298:	100cd27a 	srli	r6,r2,9
  80129c:	003fe406 	br	801230 <__pack_f+0x30>
  8012a0:	3080200c 	andi	r2,r6,128
  8012a4:	103ffa26 	beq	r2,zero,801290 <__pack_f+0x90>
  8012a8:	31cd883a 	add	r6,r6,r7
  8012ac:	003ff806 	br	801290 <__pack_f+0x90>
  8012b0:	300cd07a 	srli	r6,r6,1
  8012b4:	18c00044 	addi	r3,r3,1
  8012b8:	003ff606 	br	801294 <__pack_f+0x94>
  8012bc:	000d883a 	mov	r6,zero
  8012c0:	00ffffc4 	movi	r3,-1
  8012c4:	003fda06 	br	801230 <__pack_f+0x30>
  8012c8:	31800434 	orhi	r6,r6,16
  8012cc:	00802034 	movhi	r2,128
  8012d0:	10bfffc4 	addi	r2,r2,-1
  8012d4:	308c703a 	and	r6,r6,r2
  8012d8:	00ffffc4 	movi	r3,-1
  8012dc:	003fd406 	br	801230 <__pack_f+0x30>
  8012e0:	1109c83a 	sub	r4,r2,r4
  8012e4:	00800644 	movi	r2,25
  8012e8:	11001216 	blt	r2,r4,801334 <__pack_f+0x134>
  8012ec:	3904983a 	sll	r2,r7,r4
  8012f0:	3106d83a 	srl	r3,r6,r4
  8012f4:	10bfffc4 	addi	r2,r2,-1
  8012f8:	3084703a 	and	r2,r6,r2
  8012fc:	1004c03a 	cmpne	r2,r2,zero
  801300:	1886b03a 	or	r3,r3,r2
  801304:	19001fcc 	andi	r4,r3,127
  801308:	00801004 	movi	r2,64
  80130c:	20800c26 	beq	r4,r2,801340 <__pack_f+0x140>
  801310:	18c00fc4 	addi	r3,r3,63
  801314:	00900034 	movhi	r2,16384
  801318:	10bfffc4 	addi	r2,r2,-1
  80131c:	180cd1fa 	srli	r6,r3,7
  801320:	10c7803a 	cmpltu	r3,r2,r3
  801324:	00802034 	movhi	r2,128
  801328:	10bfffc4 	addi	r2,r2,-1
  80132c:	308c703a 	and	r6,r6,r2
  801330:	003fbf06 	br	801230 <__pack_f+0x30>
  801334:	0007883a 	mov	r3,zero
  801338:	000d883a 	mov	r6,zero
  80133c:	003ff906 	br	801324 <__pack_f+0x124>
  801340:	1880200c 	andi	r2,r3,128
  801344:	10000126 	beq	r2,zero,80134c <__pack_f+0x14c>
  801348:	1907883a 	add	r3,r3,r4
  80134c:	180cd1fa 	srli	r6,r3,7
  801350:	00900034 	movhi	r2,16384
  801354:	10bfffc4 	addi	r2,r2,-1
  801358:	10c7803a 	cmpltu	r3,r2,r3
  80135c:	003ff106 	br	801324 <__pack_f+0x124>

00801360 <__unpack_f>:
  801360:	21800017 	ldw	r6,0(r4)
  801364:	00c02034 	movhi	r3,128
  801368:	18ffffc4 	addi	r3,r3,-1
  80136c:	3004d5fa 	srli	r2,r6,23
  801370:	3008d7fa 	srli	r4,r6,31
  801374:	30ce703a 	and	r7,r6,r3
  801378:	10c03fcc 	andi	r3,r2,255
  80137c:	29000115 	stw	r4,4(r5)
  801380:	1800131e 	bne	r3,zero,8013d0 <__unpack_f+0x70>
  801384:	38000f26 	beq	r7,zero,8013c4 <__unpack_f+0x64>
  801388:	380691fa 	slli	r3,r7,7
  80138c:	01bfe084 	movi	r6,-126
  801390:	008000c4 	movi	r2,3
  801394:	01100034 	movhi	r4,16384
  801398:	213fffc4 	addi	r4,r4,-1
  80139c:	28800015 	stw	r2,0(r5)
  8013a0:	29800215 	stw	r6,8(r5)
  8013a4:	20c00536 	bltu	r4,r3,8013bc <__unpack_f+0x5c>
  8013a8:	3005883a 	mov	r2,r6
  8013ac:	18c7883a 	add	r3,r3,r3
  8013b0:	10bfffc4 	addi	r2,r2,-1
  8013b4:	20fffd2e 	bgeu	r4,r3,8013ac <__unpack_f+0x4c>
  8013b8:	28800215 	stw	r2,8(r5)
  8013bc:	28c00315 	stw	r3,12(r5)
  8013c0:	f800283a 	ret
  8013c4:	00800084 	movi	r2,2
  8013c8:	28800015 	stw	r2,0(r5)
  8013cc:	f800283a 	ret
  8013d0:	00803fc4 	movi	r2,255
  8013d4:	18800826 	beq	r3,r2,8013f8 <__unpack_f+0x98>
  8013d8:	380491fa 	slli	r2,r7,7
  8013dc:	18ffe044 	addi	r3,r3,-127
  8013e0:	28c00215 	stw	r3,8(r5)
  8013e4:	10900034 	orhi	r2,r2,16384
  8013e8:	28800315 	stw	r2,12(r5)
  8013ec:	008000c4 	movi	r2,3
  8013f0:	28800015 	stw	r2,0(r5)
  8013f4:	f800283a 	ret
  8013f8:	3800031e 	bne	r7,zero,801408 <__unpack_f+0xa8>
  8013fc:	00800104 	movi	r2,4
  801400:	28800015 	stw	r2,0(r5)
  801404:	f800283a 	ret
  801408:	3080042c 	andhi	r2,r6,16
  80140c:	10000426 	beq	r2,zero,801420 <__unpack_f+0xc0>
  801410:	00800044 	movi	r2,1
  801414:	28800015 	stw	r2,0(r5)
  801418:	29c00315 	stw	r7,12(r5)
  80141c:	f800283a 	ret
  801420:	28000015 	stw	zero,0(r5)
  801424:	003ffc06 	br	801418 <__unpack_f+0xb8>

00801428 <__pack_d>:
  801428:	20c00017 	ldw	r3,0(r4)
  80142c:	defffd04 	addi	sp,sp,-12
  801430:	dc000015 	stw	r16,0(sp)
  801434:	dc800215 	stw	r18,8(sp)
  801438:	dc400115 	stw	r17,4(sp)
  80143c:	00800044 	movi	r2,1
  801440:	22000317 	ldw	r8,12(r4)
  801444:	001f883a 	mov	r15,zero
  801448:	22400417 	ldw	r9,16(r4)
  80144c:	24000117 	ldw	r16,4(r4)
  801450:	10c0552e 	bgeu	r2,r3,8015a8 <__pack_d+0x180>
  801454:	00800104 	movi	r2,4
  801458:	18804f26 	beq	r3,r2,801598 <__pack_d+0x170>
  80145c:	00800084 	movi	r2,2
  801460:	18800226 	beq	r3,r2,80146c <__pack_d+0x44>
  801464:	4244b03a 	or	r2,r8,r9
  801468:	10001a1e 	bne	r2,zero,8014d4 <__pack_d+0xac>
  80146c:	000d883a 	mov	r6,zero
  801470:	000f883a 	mov	r7,zero
  801474:	0011883a 	mov	r8,zero
  801478:	00800434 	movhi	r2,16
  80147c:	10bfffc4 	addi	r2,r2,-1
  801480:	301d883a 	mov	r14,r6
  801484:	3884703a 	and	r2,r7,r2
  801488:	400a953a 	slli	r5,r8,20
  80148c:	79bffc2c 	andhi	r6,r15,65520
  801490:	308cb03a 	or	r6,r6,r2
  801494:	00e00434 	movhi	r3,32784
  801498:	18ffffc4 	addi	r3,r3,-1
  80149c:	800497fa 	slli	r2,r16,31
  8014a0:	30c6703a 	and	r3,r6,r3
  8014a4:	1946b03a 	or	r3,r3,r5
  8014a8:	01600034 	movhi	r5,32768
  8014ac:	297fffc4 	addi	r5,r5,-1
  8014b0:	194a703a 	and	r5,r3,r5
  8014b4:	288ab03a 	or	r5,r5,r2
  8014b8:	2807883a 	mov	r3,r5
  8014bc:	7005883a 	mov	r2,r14
  8014c0:	dc800217 	ldw	r18,8(sp)
  8014c4:	dc400117 	ldw	r17,4(sp)
  8014c8:	dc000017 	ldw	r16,0(sp)
  8014cc:	dec00304 	addi	sp,sp,12
  8014d0:	f800283a 	ret
  8014d4:	21000217 	ldw	r4,8(r4)
  8014d8:	00bf0084 	movi	r2,-1022
  8014dc:	20803f16 	blt	r4,r2,8015dc <__pack_d+0x1b4>
  8014e0:	0080ffc4 	movi	r2,1023
  8014e4:	11002c16 	blt	r2,r4,801598 <__pack_d+0x170>
  8014e8:	00803fc4 	movi	r2,255
  8014ec:	408c703a 	and	r6,r8,r2
  8014f0:	00802004 	movi	r2,128
  8014f4:	0007883a 	mov	r3,zero
  8014f8:	000f883a 	mov	r7,zero
  8014fc:	2280ffc4 	addi	r10,r4,1023
  801500:	30801e26 	beq	r6,r2,80157c <__pack_d+0x154>
  801504:	00801fc4 	movi	r2,127
  801508:	4089883a 	add	r4,r8,r2
  80150c:	220d803a 	cmpltu	r6,r4,r8
  801510:	324d883a 	add	r6,r6,r9
  801514:	2011883a 	mov	r8,r4
  801518:	3013883a 	mov	r9,r6
  80151c:	00880034 	movhi	r2,8192
  801520:	10bfffc4 	addi	r2,r2,-1
  801524:	12400d36 	bltu	r2,r9,80155c <__pack_d+0x134>
  801528:	4804963a 	slli	r2,r9,24
  80152c:	400cd23a 	srli	r6,r8,8
  801530:	480ed23a 	srli	r7,r9,8
  801534:	013fffc4 	movi	r4,-1
  801538:	118cb03a 	or	r6,r2,r6
  80153c:	01400434 	movhi	r5,16
  801540:	297fffc4 	addi	r5,r5,-1
  801544:	3104703a 	and	r2,r6,r4
  801548:	3946703a 	and	r3,r7,r5
  80154c:	5201ffcc 	andi	r8,r10,2047
  801550:	100d883a 	mov	r6,r2
  801554:	180f883a 	mov	r7,r3
  801558:	003fc706 	br	801478 <__pack_d+0x50>
  80155c:	480897fa 	slli	r4,r9,31
  801560:	4004d07a 	srli	r2,r8,1
  801564:	4806d07a 	srli	r3,r9,1
  801568:	52800044 	addi	r10,r10,1
  80156c:	2084b03a 	or	r2,r4,r2
  801570:	1011883a 	mov	r8,r2
  801574:	1813883a 	mov	r9,r3
  801578:	003feb06 	br	801528 <__pack_d+0x100>
  80157c:	383fe11e 	bne	r7,zero,801504 <__pack_d+0xdc>
  801580:	01004004 	movi	r4,256
  801584:	4104703a 	and	r2,r8,r4
  801588:	10c4b03a 	or	r2,r2,r3
  80158c:	103fe326 	beq	r2,zero,80151c <__pack_d+0xf4>
  801590:	3005883a 	mov	r2,r6
  801594:	003fdc06 	br	801508 <__pack_d+0xe0>
  801598:	000d883a 	mov	r6,zero
  80159c:	000f883a 	mov	r7,zero
  8015a0:	0201ffc4 	movi	r8,2047
  8015a4:	003fb406 	br	801478 <__pack_d+0x50>
  8015a8:	0005883a 	mov	r2,zero
  8015ac:	00c00234 	movhi	r3,8
  8015b0:	408cb03a 	or	r6,r8,r2
  8015b4:	48ceb03a 	or	r7,r9,r3
  8015b8:	013fffc4 	movi	r4,-1
  8015bc:	01400434 	movhi	r5,16
  8015c0:	297fffc4 	addi	r5,r5,-1
  8015c4:	3104703a 	and	r2,r6,r4
  8015c8:	3946703a 	and	r3,r7,r5
  8015cc:	100d883a 	mov	r6,r2
  8015d0:	180f883a 	mov	r7,r3
  8015d4:	0201ffc4 	movi	r8,2047
  8015d8:	003fa706 	br	801478 <__pack_d+0x50>
  8015dc:	1109c83a 	sub	r4,r2,r4
  8015e0:	00800e04 	movi	r2,56
  8015e4:	11004316 	blt	r2,r4,8016f4 <__pack_d+0x2cc>
  8015e8:	21fff804 	addi	r7,r4,-32
  8015ec:	38004516 	blt	r7,zero,801704 <__pack_d+0x2dc>
  8015f0:	49d8d83a 	srl	r12,r9,r7
  8015f4:	001b883a 	mov	r13,zero
  8015f8:	0023883a 	mov	r17,zero
  8015fc:	01400044 	movi	r5,1
  801600:	0025883a 	mov	r18,zero
  801604:	38004716 	blt	r7,zero,801724 <__pack_d+0x2fc>
  801608:	29d6983a 	sll	r11,r5,r7
  80160c:	0015883a 	mov	r10,zero
  801610:	00bfffc4 	movi	r2,-1
  801614:	5089883a 	add	r4,r10,r2
  801618:	588b883a 	add	r5,r11,r2
  80161c:	228d803a 	cmpltu	r6,r4,r10
  801620:	314b883a 	add	r5,r6,r5
  801624:	4104703a 	and	r2,r8,r4
  801628:	4946703a 	and	r3,r9,r5
  80162c:	10c4b03a 	or	r2,r2,r3
  801630:	10000226 	beq	r2,zero,80163c <__pack_d+0x214>
  801634:	04400044 	movi	r17,1
  801638:	0025883a 	mov	r18,zero
  80163c:	00803fc4 	movi	r2,255
  801640:	644eb03a 	or	r7,r12,r17
  801644:	3892703a 	and	r9,r7,r2
  801648:	00802004 	movi	r2,128
  80164c:	6c90b03a 	or	r8,r13,r18
  801650:	0015883a 	mov	r10,zero
  801654:	48801626 	beq	r9,r2,8016b0 <__pack_d+0x288>
  801658:	01001fc4 	movi	r4,127
  80165c:	3905883a 	add	r2,r7,r4
  801660:	11cd803a 	cmpltu	r6,r2,r7
  801664:	320d883a 	add	r6,r6,r8
  801668:	100f883a 	mov	r7,r2
  80166c:	00840034 	movhi	r2,4096
  801670:	10bfffc4 	addi	r2,r2,-1
  801674:	3011883a 	mov	r8,r6
  801678:	0007883a 	mov	r3,zero
  80167c:	11801b36 	bltu	r2,r6,8016ec <__pack_d+0x2c4>
  801680:	4004963a 	slli	r2,r8,24
  801684:	3808d23a 	srli	r4,r7,8
  801688:	400ad23a 	srli	r5,r8,8
  80168c:	1813883a 	mov	r9,r3
  801690:	1108b03a 	or	r4,r2,r4
  801694:	00bfffc4 	movi	r2,-1
  801698:	00c00434 	movhi	r3,16
  80169c:	18ffffc4 	addi	r3,r3,-1
  8016a0:	208c703a 	and	r6,r4,r2
  8016a4:	28ce703a 	and	r7,r5,r3
  8016a8:	4a01ffcc 	andi	r8,r9,2047
  8016ac:	003f7206 	br	801478 <__pack_d+0x50>
  8016b0:	503fe91e 	bne	r10,zero,801658 <__pack_d+0x230>
  8016b4:	01004004 	movi	r4,256
  8016b8:	3904703a 	and	r2,r7,r4
  8016bc:	0007883a 	mov	r3,zero
  8016c0:	10c4b03a 	or	r2,r2,r3
  8016c4:	10000626 	beq	r2,zero,8016e0 <__pack_d+0x2b8>
  8016c8:	3a45883a 	add	r2,r7,r9
  8016cc:	11cd803a 	cmpltu	r6,r2,r7
  8016d0:	320d883a 	add	r6,r6,r8
  8016d4:	100f883a 	mov	r7,r2
  8016d8:	3011883a 	mov	r8,r6
  8016dc:	0007883a 	mov	r3,zero
  8016e0:	00840034 	movhi	r2,4096
  8016e4:	10bfffc4 	addi	r2,r2,-1
  8016e8:	123fe52e 	bgeu	r2,r8,801680 <__pack_d+0x258>
  8016ec:	00c00044 	movi	r3,1
  8016f0:	003fe306 	br	801680 <__pack_d+0x258>
  8016f4:	0009883a 	mov	r4,zero
  8016f8:	0013883a 	mov	r9,zero
  8016fc:	000b883a 	mov	r5,zero
  801700:	003fe406 	br	801694 <__pack_d+0x26c>
  801704:	4a47883a 	add	r3,r9,r9
  801708:	008007c4 	movi	r2,31
  80170c:	1105c83a 	sub	r2,r2,r4
  801710:	1886983a 	sll	r3,r3,r2
  801714:	4118d83a 	srl	r12,r8,r4
  801718:	491ad83a 	srl	r13,r9,r4
  80171c:	1b18b03a 	or	r12,r3,r12
  801720:	003fb506 	br	8015f8 <__pack_d+0x1d0>
  801724:	2806d07a 	srli	r3,r5,1
  801728:	008007c4 	movi	r2,31
  80172c:	1105c83a 	sub	r2,r2,r4
  801730:	1896d83a 	srl	r11,r3,r2
  801734:	2914983a 	sll	r10,r5,r4
  801738:	003fb506 	br	801610 <__pack_d+0x1e8>

0080173c <printf>:
  80173c:	defffb04 	addi	sp,sp,-20
  801740:	dfc00115 	stw	ra,4(sp)
  801744:	d9400215 	stw	r5,8(sp)
  801748:	d9800315 	stw	r6,12(sp)
  80174c:	d9c00415 	stw	r7,16(sp)
  801750:	00802074 	movhi	r2,129
  801754:	1086c704 	addi	r2,r2,6940
  801758:	10c00017 	ldw	r3,0(r2)
  80175c:	200b883a 	mov	r5,r4
  801760:	d8800204 	addi	r2,sp,8
  801764:	19000217 	ldw	r4,8(r3)
  801768:	100d883a 	mov	r6,r2
  80176c:	d8800015 	stw	r2,0(sp)
  801770:	08037e00 	call	8037e0 <__vfprintf_internal>
  801774:	dfc00117 	ldw	ra,4(sp)
  801778:	dec00504 	addi	sp,sp,20
  80177c:	f800283a 	ret

00801780 <_printf_r>:
  801780:	defffc04 	addi	sp,sp,-16
  801784:	dfc00115 	stw	ra,4(sp)
  801788:	d9800215 	stw	r6,8(sp)
  80178c:	d9c00315 	stw	r7,12(sp)
  801790:	280d883a 	mov	r6,r5
  801794:	21400217 	ldw	r5,8(r4)
  801798:	d8c00204 	addi	r3,sp,8
  80179c:	180f883a 	mov	r7,r3
  8017a0:	d8c00015 	stw	r3,0(sp)
  8017a4:	08019340 	call	801934 <___vfprintf_internal_r>
  8017a8:	dfc00117 	ldw	ra,4(sp)
  8017ac:	dec00404 	addi	sp,sp,16
  8017b0:	f800283a 	ret

008017b4 <_puts_r>:
  8017b4:	defff604 	addi	sp,sp,-40
  8017b8:	dc400715 	stw	r17,28(sp)
  8017bc:	2023883a 	mov	r17,r4
  8017c0:	2809883a 	mov	r4,r5
  8017c4:	dfc00915 	stw	ra,36(sp)
  8017c8:	dcc00815 	stw	r19,32(sp)
  8017cc:	2827883a 	mov	r19,r5
  8017d0:	08018680 	call	801868 <strlen>
  8017d4:	89400217 	ldw	r5,8(r17)
  8017d8:	00c02074 	movhi	r3,129
  8017dc:	18ff5f04 	addi	r3,r3,-644
  8017e0:	01c00044 	movi	r7,1
  8017e4:	12000044 	addi	r8,r2,1
  8017e8:	d8c00515 	stw	r3,20(sp)
  8017ec:	d9c00615 	stw	r7,24(sp)
  8017f0:	d8c00304 	addi	r3,sp,12
  8017f4:	01c00084 	movi	r7,2
  8017f8:	8809883a 	mov	r4,r17
  8017fc:	d80d883a 	mov	r6,sp
  801800:	d8c00015 	stw	r3,0(sp)
  801804:	dcc00315 	stw	r19,12(sp)
  801808:	da000215 	stw	r8,8(sp)
  80180c:	d9c00115 	stw	r7,4(sp)
  801810:	d8800415 	stw	r2,16(sp)
  801814:	0805a3c0 	call	805a3c <__sfvwrite_r>
  801818:	00ffffc4 	movi	r3,-1
  80181c:	10000626 	beq	r2,zero,801838 <_puts_r+0x84>
  801820:	1805883a 	mov	r2,r3
  801824:	dfc00917 	ldw	ra,36(sp)
  801828:	dcc00817 	ldw	r19,32(sp)
  80182c:	dc400717 	ldw	r17,28(sp)
  801830:	dec00a04 	addi	sp,sp,40
  801834:	f800283a 	ret
  801838:	00c00284 	movi	r3,10
  80183c:	1805883a 	mov	r2,r3
  801840:	dfc00917 	ldw	ra,36(sp)
  801844:	dcc00817 	ldw	r19,32(sp)
  801848:	dc400717 	ldw	r17,28(sp)
  80184c:	dec00a04 	addi	sp,sp,40
  801850:	f800283a 	ret

00801854 <puts>:
  801854:	00802074 	movhi	r2,129
  801858:	1086c704 	addi	r2,r2,6940
  80185c:	200b883a 	mov	r5,r4
  801860:	11000017 	ldw	r4,0(r2)
  801864:	08017b41 	jmpi	8017b4 <_puts_r>

00801868 <strlen>:
  801868:	208000cc 	andi	r2,r4,3
  80186c:	2011883a 	mov	r8,r4
  801870:	1000161e 	bne	r2,zero,8018cc <strlen+0x64>
  801874:	20c00017 	ldw	r3,0(r4)
  801878:	017fbff4 	movhi	r5,65279
  80187c:	297fbfc4 	addi	r5,r5,-257
  801880:	01e02074 	movhi	r7,32897
  801884:	39e02004 	addi	r7,r7,-32640
  801888:	1945883a 	add	r2,r3,r5
  80188c:	11c4703a 	and	r2,r2,r7
  801890:	00c6303a 	nor	r3,zero,r3
  801894:	1886703a 	and	r3,r3,r2
  801898:	18000c1e 	bne	r3,zero,8018cc <strlen+0x64>
  80189c:	280d883a 	mov	r6,r5
  8018a0:	380b883a 	mov	r5,r7
  8018a4:	21000104 	addi	r4,r4,4
  8018a8:	20800017 	ldw	r2,0(r4)
  8018ac:	1187883a 	add	r3,r2,r6
  8018b0:	1946703a 	and	r3,r3,r5
  8018b4:	0084303a 	nor	r2,zero,r2
  8018b8:	10c4703a 	and	r2,r2,r3
  8018bc:	103ff926 	beq	r2,zero,8018a4 <strlen+0x3c>
  8018c0:	20800007 	ldb	r2,0(r4)
  8018c4:	10000326 	beq	r2,zero,8018d4 <strlen+0x6c>
  8018c8:	21000044 	addi	r4,r4,1
  8018cc:	20800007 	ldb	r2,0(r4)
  8018d0:	103ffd1e 	bne	r2,zero,8018c8 <strlen+0x60>
  8018d4:	2205c83a 	sub	r2,r4,r8
  8018d8:	f800283a 	ret

008018dc <__sprint_r>:
  8018dc:	30800217 	ldw	r2,8(r6)
  8018e0:	defffe04 	addi	sp,sp,-8
  8018e4:	dc000015 	stw	r16,0(sp)
  8018e8:	dfc00115 	stw	ra,4(sp)
  8018ec:	3021883a 	mov	r16,r6
  8018f0:	0007883a 	mov	r3,zero
  8018f4:	1000061e 	bne	r2,zero,801910 <__sprint_r+0x34>
  8018f8:	1805883a 	mov	r2,r3
  8018fc:	30000115 	stw	zero,4(r6)
  801900:	dfc00117 	ldw	ra,4(sp)
  801904:	dc000017 	ldw	r16,0(sp)
  801908:	dec00204 	addi	sp,sp,8
  80190c:	f800283a 	ret
  801910:	0805a3c0 	call	805a3c <__sfvwrite_r>
  801914:	1007883a 	mov	r3,r2
  801918:	1805883a 	mov	r2,r3
  80191c:	80000115 	stw	zero,4(r16)
  801920:	80000215 	stw	zero,8(r16)
  801924:	dfc00117 	ldw	ra,4(sp)
  801928:	dc000017 	ldw	r16,0(sp)
  80192c:	dec00204 	addi	sp,sp,8
  801930:	f800283a 	ret

00801934 <___vfprintf_internal_r>:
  801934:	defea404 	addi	sp,sp,-1392
  801938:	dd815815 	stw	r22,1376(sp)
  80193c:	dc015215 	stw	r16,1352(sp)
  801940:	d9c15115 	stw	r7,1348(sp)
  801944:	dfc15b15 	stw	ra,1388(sp)
  801948:	df015a15 	stw	fp,1384(sp)
  80194c:	ddc15915 	stw	r23,1380(sp)
  801950:	dd415715 	stw	r21,1372(sp)
  801954:	dd015615 	stw	r20,1368(sp)
  801958:	dcc15515 	stw	r19,1364(sp)
  80195c:	dc815415 	stw	r18,1360(sp)
  801960:	dc415315 	stw	r17,1356(sp)
  801964:	282d883a 	mov	r22,r5
  801968:	3021883a 	mov	r16,r6
  80196c:	d9014f15 	stw	r4,1340(sp)
  801970:	08060600 	call	806060 <_localeconv_r>
  801974:	10800017 	ldw	r2,0(r2)
  801978:	d9c15117 	ldw	r7,1348(sp)
  80197c:	d8814915 	stw	r2,1316(sp)
  801980:	d8814f17 	ldw	r2,1340(sp)
  801984:	10000226 	beq	r2,zero,801990 <___vfprintf_internal_r+0x5c>
  801988:	10800e17 	ldw	r2,56(r2)
  80198c:	10020d26 	beq	r2,zero,8021c4 <___vfprintf_internal_r+0x890>
  801990:	b080030b 	ldhu	r2,12(r22)
  801994:	1080020c 	andi	r2,r2,8
  801998:	10020e26 	beq	r2,zero,8021d4 <___vfprintf_internal_r+0x8a0>
  80199c:	b0800417 	ldw	r2,16(r22)
  8019a0:	10020c26 	beq	r2,zero,8021d4 <___vfprintf_internal_r+0x8a0>
  8019a4:	b200030b 	ldhu	r8,12(r22)
  8019a8:	00800284 	movi	r2,10
  8019ac:	40c0068c 	andi	r3,r8,26
  8019b0:	18802f1e 	bne	r3,r2,801a70 <___vfprintf_internal_r+0x13c>
  8019b4:	b080038f 	ldh	r2,14(r22)
  8019b8:	10002d16 	blt	r2,zero,801a70 <___vfprintf_internal_r+0x13c>
  8019bc:	b240038b 	ldhu	r9,14(r22)
  8019c0:	b2800717 	ldw	r10,28(r22)
  8019c4:	b2c00917 	ldw	r11,36(r22)
  8019c8:	d9014f17 	ldw	r4,1340(sp)
  8019cc:	dc402904 	addi	r17,sp,164
  8019d0:	d8804004 	addi	r2,sp,256
  8019d4:	00c10004 	movi	r3,1024
  8019d8:	423fff4c 	andi	r8,r8,65533
  8019dc:	800d883a 	mov	r6,r16
  8019e0:	880b883a 	mov	r5,r17
  8019e4:	da002c0d 	sth	r8,176(sp)
  8019e8:	da402c8d 	sth	r9,178(sp)
  8019ec:	da803015 	stw	r10,192(sp)
  8019f0:	dac03215 	stw	r11,200(sp)
  8019f4:	d8802d15 	stw	r2,180(sp)
  8019f8:	d8c02e15 	stw	r3,184(sp)
  8019fc:	d8802915 	stw	r2,164(sp)
  801a00:	d8c02b15 	stw	r3,172(sp)
  801a04:	d8002f15 	stw	zero,188(sp)
  801a08:	08019340 	call	801934 <___vfprintf_internal_r>
  801a0c:	d8814b15 	stw	r2,1324(sp)
  801a10:	10000416 	blt	r2,zero,801a24 <___vfprintf_internal_r+0xf0>
  801a14:	d9014f17 	ldw	r4,1340(sp)
  801a18:	880b883a 	mov	r5,r17
  801a1c:	080510c0 	call	80510c <_fflush_r>
  801a20:	1002321e 	bne	r2,zero,8022ec <___vfprintf_internal_r+0x9b8>
  801a24:	d8802c0b 	ldhu	r2,176(sp)
  801a28:	1080100c 	andi	r2,r2,64
  801a2c:	10000326 	beq	r2,zero,801a3c <___vfprintf_internal_r+0x108>
  801a30:	b080030b 	ldhu	r2,12(r22)
  801a34:	10801014 	ori	r2,r2,64
  801a38:	b080030d 	sth	r2,12(r22)
  801a3c:	d8814b17 	ldw	r2,1324(sp)
  801a40:	dfc15b17 	ldw	ra,1388(sp)
  801a44:	df015a17 	ldw	fp,1384(sp)
  801a48:	ddc15917 	ldw	r23,1380(sp)
  801a4c:	dd815817 	ldw	r22,1376(sp)
  801a50:	dd415717 	ldw	r21,1372(sp)
  801a54:	dd015617 	ldw	r20,1368(sp)
  801a58:	dcc15517 	ldw	r19,1364(sp)
  801a5c:	dc815417 	ldw	r18,1360(sp)
  801a60:	dc415317 	ldw	r17,1356(sp)
  801a64:	dc015217 	ldw	r16,1352(sp)
  801a68:	dec15c04 	addi	sp,sp,1392
  801a6c:	f800283a 	ret
  801a70:	0005883a 	mov	r2,zero
  801a74:	0007883a 	mov	r3,zero
  801a78:	dd401904 	addi	r21,sp,100
  801a7c:	d8814215 	stw	r2,1288(sp)
  801a80:	802f883a 	mov	r23,r16
  801a84:	d8c14315 	stw	r3,1292(sp)
  801a88:	d8014b15 	stw	zero,1324(sp)
  801a8c:	d8014815 	stw	zero,1312(sp)
  801a90:	d8014415 	stw	zero,1296(sp)
  801a94:	d8014715 	stw	zero,1308(sp)
  801a98:	dd400c15 	stw	r21,48(sp)
  801a9c:	d8000e15 	stw	zero,56(sp)
  801aa0:	d8000d15 	stw	zero,52(sp)
  801aa4:	b8800007 	ldb	r2,0(r23)
  801aa8:	10001926 	beq	r2,zero,801b10 <___vfprintf_internal_r+0x1dc>
  801aac:	00c00944 	movi	r3,37
  801ab0:	10c01726 	beq	r2,r3,801b10 <___vfprintf_internal_r+0x1dc>
  801ab4:	b821883a 	mov	r16,r23
  801ab8:	00000106 	br	801ac0 <___vfprintf_internal_r+0x18c>
  801abc:	10c00326 	beq	r2,r3,801acc <___vfprintf_internal_r+0x198>
  801ac0:	84000044 	addi	r16,r16,1
  801ac4:	80800007 	ldb	r2,0(r16)
  801ac8:	103ffc1e 	bne	r2,zero,801abc <___vfprintf_internal_r+0x188>
  801acc:	85e7c83a 	sub	r19,r16,r23
  801ad0:	98000e26 	beq	r19,zero,801b0c <___vfprintf_internal_r+0x1d8>
  801ad4:	dc800e17 	ldw	r18,56(sp)
  801ad8:	dc400d17 	ldw	r17,52(sp)
  801adc:	008001c4 	movi	r2,7
  801ae0:	94e5883a 	add	r18,r18,r19
  801ae4:	8c400044 	addi	r17,r17,1
  801ae8:	adc00015 	stw	r23,0(r21)
  801aec:	dc800e15 	stw	r18,56(sp)
  801af0:	acc00115 	stw	r19,4(r21)
  801af4:	dc400d15 	stw	r17,52(sp)
  801af8:	14428b16 	blt	r2,r17,802528 <___vfprintf_internal_r+0xbf4>
  801afc:	ad400204 	addi	r21,r21,8
  801b00:	d9014b17 	ldw	r4,1324(sp)
  801b04:	24c9883a 	add	r4,r4,r19
  801b08:	d9014b15 	stw	r4,1324(sp)
  801b0c:	802f883a 	mov	r23,r16
  801b10:	b8800007 	ldb	r2,0(r23)
  801b14:	10013c26 	beq	r2,zero,802008 <___vfprintf_internal_r+0x6d4>
  801b18:	bdc00044 	addi	r23,r23,1
  801b1c:	d8000405 	stb	zero,16(sp)
  801b20:	b8c00007 	ldb	r3,0(r23)
  801b24:	04ffffc4 	movi	r19,-1
  801b28:	d8014c15 	stw	zero,1328(sp)
  801b2c:	d8014a15 	stw	zero,1320(sp)
  801b30:	d8c14d15 	stw	r3,1332(sp)
  801b34:	bdc00044 	addi	r23,r23,1
  801b38:	d9414d17 	ldw	r5,1332(sp)
  801b3c:	00801604 	movi	r2,88
  801b40:	28fff804 	addi	r3,r5,-32
  801b44:	10c06036 	bltu	r2,r3,801cc8 <___vfprintf_internal_r+0x394>
  801b48:	18c5883a 	add	r2,r3,r3
  801b4c:	1085883a 	add	r2,r2,r2
  801b50:	00c02034 	movhi	r3,128
  801b54:	18c6d904 	addi	r3,r3,7012
  801b58:	10c5883a 	add	r2,r2,r3
  801b5c:	11000017 	ldw	r4,0(r2)
  801b60:	2000683a 	jmp	r4
  801b64:	00802ad8 	cmpnei	r2,zero,171
  801b68:	00801cc8 	cmpgei	r2,zero,115
  801b6c:	00801cc8 	cmpgei	r2,zero,115
  801b70:	00802ac4 	movi	r2,171
  801b74:	00801cc8 	cmpgei	r2,zero,115
  801b78:	00801cc8 	cmpgei	r2,zero,115
  801b7c:	00801cc8 	cmpgei	r2,zero,115
  801b80:	00801cc8 	cmpgei	r2,zero,115
  801b84:	00801cc8 	cmpgei	r2,zero,115
  801b88:	00801cc8 	cmpgei	r2,zero,115
  801b8c:	008028a4 	muli	r2,zero,162
  801b90:	00802ab4 	movhi	r2,170
  801b94:	00801cc8 	cmpgei	r2,zero,115
  801b98:	008028bc 	xorhi	r2,zero,162
  801b9c:	00802b50 	cmplti	r2,zero,173
  801ba0:	00801cc8 	cmpgei	r2,zero,115
  801ba4:	00802b3c 	xorhi	r2,zero,172
  801ba8:	00802b04 	movi	r2,172
  801bac:	00802b04 	movi	r2,172
  801bb0:	00802b04 	movi	r2,172
  801bb4:	00802b04 	movi	r2,172
  801bb8:	00802b04 	movi	r2,172
  801bbc:	00802b04 	movi	r2,172
  801bc0:	00802b04 	movi	r2,172
  801bc4:	00802b04 	movi	r2,172
  801bc8:	00802b04 	movi	r2,172
  801bcc:	00801cc8 	cmpgei	r2,zero,115
  801bd0:	00801cc8 	cmpgei	r2,zero,115
  801bd4:	00801cc8 	cmpgei	r2,zero,115
  801bd8:	00801cc8 	cmpgei	r2,zero,115
  801bdc:	00801cc8 	cmpgei	r2,zero,115
  801be0:	00801cc8 	cmpgei	r2,zero,115
  801be4:	00801cc8 	cmpgei	r2,zero,115
  801be8:	00801cc8 	cmpgei	r2,zero,115
  801bec:	00801cc8 	cmpgei	r2,zero,115
  801bf0:	00801cc8 	cmpgei	r2,zero,115
  801bf4:	00802320 	cmpeqi	r2,zero,140
  801bf8:	0080298c 	andi	r2,zero,166
  801bfc:	00801cc8 	cmpgei	r2,zero,115
  801c00:	0080298c 	andi	r2,zero,166
  801c04:	00801cc8 	cmpgei	r2,zero,115
  801c08:	00801cc8 	cmpgei	r2,zero,115
  801c0c:	00801cc8 	cmpgei	r2,zero,115
  801c10:	00801cc8 	cmpgei	r2,zero,115
  801c14:	00802af0 	cmpltui	r2,zero,171
  801c18:	00801cc8 	cmpgei	r2,zero,115
  801c1c:	00801cc8 	cmpgei	r2,zero,115
  801c20:	008023d4 	movui	r2,143
  801c24:	00801cc8 	cmpgei	r2,zero,115
  801c28:	00801cc8 	cmpgei	r2,zero,115
  801c2c:	00801cc8 	cmpgei	r2,zero,115
  801c30:	00801cc8 	cmpgei	r2,zero,115
  801c34:	00801cc8 	cmpgei	r2,zero,115
  801c38:	00802420 	cmpeqi	r2,zero,144
  801c3c:	00801cc8 	cmpgei	r2,zero,115
  801c40:	00801cc8 	cmpgei	r2,zero,115
  801c44:	00802a40 	call	802a4 <__reset-0x77fd5c>
  801c48:	00801cc8 	cmpgei	r2,zero,115
  801c4c:	00801cc8 	cmpgei	r2,zero,115
  801c50:	00801cc8 	cmpgei	r2,zero,115
  801c54:	00801cc8 	cmpgei	r2,zero,115
  801c58:	00801cc8 	cmpgei	r2,zero,115
  801c5c:	00801cc8 	cmpgei	r2,zero,115
  801c60:	00801cc8 	cmpgei	r2,zero,115
  801c64:	00801cc8 	cmpgei	r2,zero,115
  801c68:	00801cc8 	cmpgei	r2,zero,115
  801c6c:	00801cc8 	cmpgei	r2,zero,115
  801c70:	00802a14 	movui	r2,168
  801c74:	0080232c 	andhi	r2,zero,140
  801c78:	0080298c 	andi	r2,zero,166
  801c7c:	0080298c 	andi	r2,zero,166
  801c80:	0080298c 	andi	r2,zero,166
  801c84:	00802978 	rdprs	r2,zero,165
  801c88:	0080232c 	andhi	r2,zero,140
  801c8c:	00801cc8 	cmpgei	r2,zero,115
  801c90:	00801cc8 	cmpgei	r2,zero,115
  801c94:	00802900 	call	80290 <__reset-0x77fd70>
  801c98:	00801cc8 	cmpgei	r2,zero,115
  801c9c:	008028d0 	cmplti	r2,zero,163
  801ca0:	008023e0 	cmpeqi	r2,zero,143
  801ca4:	00802930 	cmpltui	r2,zero,164
  801ca8:	0080291c 	xori	r2,zero,164
  801cac:	00801cc8 	cmpgei	r2,zero,115
  801cb0:	00802bac 	andhi	r2,zero,174
  801cb4:	00801cc8 	cmpgei	r2,zero,115
  801cb8:	0080242c 	andhi	r2,zero,144
  801cbc:	00801cc8 	cmpgei	r2,zero,115
  801cc0:	00801cc8 	cmpgei	r2,zero,115
  801cc4:	00802aa4 	muli	r2,zero,170
  801cc8:	d9014d17 	ldw	r4,1332(sp)
  801ccc:	2000ce26 	beq	r4,zero,802008 <___vfprintf_internal_r+0x6d4>
  801cd0:	01400044 	movi	r5,1
  801cd4:	d9800f04 	addi	r6,sp,60
  801cd8:	d9c14015 	stw	r7,1280(sp)
  801cdc:	d9414515 	stw	r5,1300(sp)
  801ce0:	d9814115 	stw	r6,1284(sp)
  801ce4:	280f883a 	mov	r7,r5
  801ce8:	d9000f05 	stb	r4,60(sp)
  801cec:	d8000405 	stb	zero,16(sp)
  801cf0:	d8014615 	stw	zero,1304(sp)
  801cf4:	d8c14c17 	ldw	r3,1328(sp)
  801cf8:	1880008c 	andi	r2,r3,2
  801cfc:	1005003a 	cmpeq	r2,r2,zero
  801d00:	d8815015 	stw	r2,1344(sp)
  801d04:	1000031e 	bne	r2,zero,801d14 <___vfprintf_internal_r+0x3e0>
  801d08:	d9014517 	ldw	r4,1300(sp)
  801d0c:	21000084 	addi	r4,r4,2
  801d10:	d9014515 	stw	r4,1300(sp)
  801d14:	d9414c17 	ldw	r5,1328(sp)
  801d18:	2940210c 	andi	r5,r5,132
  801d1c:	d9414e15 	stw	r5,1336(sp)
  801d20:	28002d1e 	bne	r5,zero,801dd8 <___vfprintf_internal_r+0x4a4>
  801d24:	d9814a17 	ldw	r6,1320(sp)
  801d28:	d8814517 	ldw	r2,1300(sp)
  801d2c:	30a1c83a 	sub	r16,r6,r2
  801d30:	0400290e 	bge	zero,r16,801dd8 <___vfprintf_internal_r+0x4a4>
  801d34:	00800404 	movi	r2,16
  801d38:	1404580e 	bge	r2,r16,802e9c <___vfprintf_internal_r+0x1568>
  801d3c:	dc800e17 	ldw	r18,56(sp)
  801d40:	dc400d17 	ldw	r17,52(sp)
  801d44:	1027883a 	mov	r19,r2
  801d48:	07002074 	movhi	fp,129
  801d4c:	e73f7b84 	addi	fp,fp,-530
  801d50:	050001c4 	movi	r20,7
  801d54:	00000306 	br	801d64 <___vfprintf_internal_r+0x430>
  801d58:	843ffc04 	addi	r16,r16,-16
  801d5c:	ad400204 	addi	r21,r21,8
  801d60:	9c00130e 	bge	r19,r16,801db0 <___vfprintf_internal_r+0x47c>
  801d64:	94800404 	addi	r18,r18,16
  801d68:	8c400044 	addi	r17,r17,1
  801d6c:	af000015 	stw	fp,0(r21)
  801d70:	acc00115 	stw	r19,4(r21)
  801d74:	dc800e15 	stw	r18,56(sp)
  801d78:	dc400d15 	stw	r17,52(sp)
  801d7c:	a47ff60e 	bge	r20,r17,801d58 <___vfprintf_internal_r+0x424>
  801d80:	d9014f17 	ldw	r4,1340(sp)
  801d84:	b00b883a 	mov	r5,r22
  801d88:	d9800c04 	addi	r6,sp,48
  801d8c:	d9c15115 	stw	r7,1348(sp)
  801d90:	08018dc0 	call	8018dc <__sprint_r>
  801d94:	d9c15117 	ldw	r7,1348(sp)
  801d98:	10009e1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  801d9c:	843ffc04 	addi	r16,r16,-16
  801da0:	dc800e17 	ldw	r18,56(sp)
  801da4:	dc400d17 	ldw	r17,52(sp)
  801da8:	dd401904 	addi	r21,sp,100
  801dac:	9c3fed16 	blt	r19,r16,801d64 <___vfprintf_internal_r+0x430>
  801db0:	9425883a 	add	r18,r18,r16
  801db4:	8c400044 	addi	r17,r17,1
  801db8:	008001c4 	movi	r2,7
  801dbc:	af000015 	stw	fp,0(r21)
  801dc0:	ac000115 	stw	r16,4(r21)
  801dc4:	dc800e15 	stw	r18,56(sp)
  801dc8:	dc400d15 	stw	r17,52(sp)
  801dcc:	1441f516 	blt	r2,r17,8025a4 <___vfprintf_internal_r+0xc70>
  801dd0:	ad400204 	addi	r21,r21,8
  801dd4:	00000206 	br	801de0 <___vfprintf_internal_r+0x4ac>
  801dd8:	dc800e17 	ldw	r18,56(sp)
  801ddc:	dc400d17 	ldw	r17,52(sp)
  801de0:	d8800407 	ldb	r2,16(sp)
  801de4:	10000b26 	beq	r2,zero,801e14 <___vfprintf_internal_r+0x4e0>
  801de8:	00800044 	movi	r2,1
  801dec:	94800044 	addi	r18,r18,1
  801df0:	8c400044 	addi	r17,r17,1
  801df4:	a8800115 	stw	r2,4(r21)
  801df8:	d8c00404 	addi	r3,sp,16
  801dfc:	008001c4 	movi	r2,7
  801e00:	a8c00015 	stw	r3,0(r21)
  801e04:	dc800e15 	stw	r18,56(sp)
  801e08:	dc400d15 	stw	r17,52(sp)
  801e0c:	1441da16 	blt	r2,r17,802578 <___vfprintf_internal_r+0xc44>
  801e10:	ad400204 	addi	r21,r21,8
  801e14:	d9015017 	ldw	r4,1344(sp)
  801e18:	20000b1e 	bne	r4,zero,801e48 <___vfprintf_internal_r+0x514>
  801e1c:	d8800444 	addi	r2,sp,17
  801e20:	94800084 	addi	r18,r18,2
  801e24:	8c400044 	addi	r17,r17,1
  801e28:	a8800015 	stw	r2,0(r21)
  801e2c:	00c00084 	movi	r3,2
  801e30:	008001c4 	movi	r2,7
  801e34:	a8c00115 	stw	r3,4(r21)
  801e38:	dc800e15 	stw	r18,56(sp)
  801e3c:	dc400d15 	stw	r17,52(sp)
  801e40:	1441c216 	blt	r2,r17,80254c <___vfprintf_internal_r+0xc18>
  801e44:	ad400204 	addi	r21,r21,8
  801e48:	d9414e17 	ldw	r5,1336(sp)
  801e4c:	00802004 	movi	r2,128
  801e50:	2880b126 	beq	r5,r2,802118 <___vfprintf_internal_r+0x7e4>
  801e54:	d8c14617 	ldw	r3,1304(sp)
  801e58:	19e1c83a 	sub	r16,r3,r7
  801e5c:	0400260e 	bge	zero,r16,801ef8 <___vfprintf_internal_r+0x5c4>
  801e60:	00800404 	movi	r2,16
  801e64:	1403c90e 	bge	r2,r16,802d8c <___vfprintf_internal_r+0x1458>
  801e68:	1027883a 	mov	r19,r2
  801e6c:	07002074 	movhi	fp,129
  801e70:	e73f7784 	addi	fp,fp,-546
  801e74:	050001c4 	movi	r20,7
  801e78:	00000306 	br	801e88 <___vfprintf_internal_r+0x554>
  801e7c:	843ffc04 	addi	r16,r16,-16
  801e80:	ad400204 	addi	r21,r21,8
  801e84:	9c00130e 	bge	r19,r16,801ed4 <___vfprintf_internal_r+0x5a0>
  801e88:	94800404 	addi	r18,r18,16
  801e8c:	8c400044 	addi	r17,r17,1
  801e90:	af000015 	stw	fp,0(r21)
  801e94:	acc00115 	stw	r19,4(r21)
  801e98:	dc800e15 	stw	r18,56(sp)
  801e9c:	dc400d15 	stw	r17,52(sp)
  801ea0:	a47ff60e 	bge	r20,r17,801e7c <___vfprintf_internal_r+0x548>
  801ea4:	d9014f17 	ldw	r4,1340(sp)
  801ea8:	b00b883a 	mov	r5,r22
  801eac:	d9800c04 	addi	r6,sp,48
  801eb0:	d9c15115 	stw	r7,1348(sp)
  801eb4:	08018dc0 	call	8018dc <__sprint_r>
  801eb8:	d9c15117 	ldw	r7,1348(sp)
  801ebc:	1000551e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  801ec0:	843ffc04 	addi	r16,r16,-16
  801ec4:	dc800e17 	ldw	r18,56(sp)
  801ec8:	dc400d17 	ldw	r17,52(sp)
  801ecc:	dd401904 	addi	r21,sp,100
  801ed0:	9c3fed16 	blt	r19,r16,801e88 <___vfprintf_internal_r+0x554>
  801ed4:	9425883a 	add	r18,r18,r16
  801ed8:	8c400044 	addi	r17,r17,1
  801edc:	008001c4 	movi	r2,7
  801ee0:	af000015 	stw	fp,0(r21)
  801ee4:	ac000115 	stw	r16,4(r21)
  801ee8:	dc800e15 	stw	r18,56(sp)
  801eec:	dc400d15 	stw	r17,52(sp)
  801ef0:	14418216 	blt	r2,r17,8024fc <___vfprintf_internal_r+0xbc8>
  801ef4:	ad400204 	addi	r21,r21,8
  801ef8:	d9014c17 	ldw	r4,1328(sp)
  801efc:	2080400c 	andi	r2,r4,256
  801f00:	10004a1e 	bne	r2,zero,80202c <___vfprintf_internal_r+0x6f8>
  801f04:	d9414117 	ldw	r5,1284(sp)
  801f08:	91e5883a 	add	r18,r18,r7
  801f0c:	8c400044 	addi	r17,r17,1
  801f10:	008001c4 	movi	r2,7
  801f14:	a9400015 	stw	r5,0(r21)
  801f18:	a9c00115 	stw	r7,4(r21)
  801f1c:	dc800e15 	stw	r18,56(sp)
  801f20:	dc400d15 	stw	r17,52(sp)
  801f24:	14416716 	blt	r2,r17,8024c4 <___vfprintf_internal_r+0xb90>
  801f28:	a8c00204 	addi	r3,r21,8
  801f2c:	d9814c17 	ldw	r6,1328(sp)
  801f30:	3080010c 	andi	r2,r6,4
  801f34:	10002826 	beq	r2,zero,801fd8 <___vfprintf_internal_r+0x6a4>
  801f38:	d8814a17 	ldw	r2,1320(sp)
  801f3c:	d9014517 	ldw	r4,1300(sp)
  801f40:	1121c83a 	sub	r16,r2,r4
  801f44:	0400240e 	bge	zero,r16,801fd8 <___vfprintf_internal_r+0x6a4>
  801f48:	00800404 	movi	r2,16
  801f4c:	14044f0e 	bge	r2,r16,80308c <___vfprintf_internal_r+0x1758>
  801f50:	dc400d17 	ldw	r17,52(sp)
  801f54:	1027883a 	mov	r19,r2
  801f58:	07002074 	movhi	fp,129
  801f5c:	e73f7b84 	addi	fp,fp,-530
  801f60:	050001c4 	movi	r20,7
  801f64:	00000306 	br	801f74 <___vfprintf_internal_r+0x640>
  801f68:	843ffc04 	addi	r16,r16,-16
  801f6c:	18c00204 	addi	r3,r3,8
  801f70:	9c00110e 	bge	r19,r16,801fb8 <___vfprintf_internal_r+0x684>
  801f74:	94800404 	addi	r18,r18,16
  801f78:	8c400044 	addi	r17,r17,1
  801f7c:	1f000015 	stw	fp,0(r3)
  801f80:	1cc00115 	stw	r19,4(r3)
  801f84:	dc800e15 	stw	r18,56(sp)
  801f88:	dc400d15 	stw	r17,52(sp)
  801f8c:	a47ff60e 	bge	r20,r17,801f68 <___vfprintf_internal_r+0x634>
  801f90:	d9014f17 	ldw	r4,1340(sp)
  801f94:	b00b883a 	mov	r5,r22
  801f98:	d9800c04 	addi	r6,sp,48
  801f9c:	08018dc0 	call	8018dc <__sprint_r>
  801fa0:	10001c1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  801fa4:	843ffc04 	addi	r16,r16,-16
  801fa8:	dc800e17 	ldw	r18,56(sp)
  801fac:	dc400d17 	ldw	r17,52(sp)
  801fb0:	d8c01904 	addi	r3,sp,100
  801fb4:	9c3fef16 	blt	r19,r16,801f74 <___vfprintf_internal_r+0x640>
  801fb8:	9425883a 	add	r18,r18,r16
  801fbc:	8c400044 	addi	r17,r17,1
  801fc0:	008001c4 	movi	r2,7
  801fc4:	1f000015 	stw	fp,0(r3)
  801fc8:	1c000115 	stw	r16,4(r3)
  801fcc:	dc800e15 	stw	r18,56(sp)
  801fd0:	dc400d15 	stw	r17,52(sp)
  801fd4:	1440cb16 	blt	r2,r17,802304 <___vfprintf_internal_r+0x9d0>
  801fd8:	d8814a17 	ldw	r2,1320(sp)
  801fdc:	d9414517 	ldw	r5,1300(sp)
  801fe0:	1140010e 	bge	r2,r5,801fe8 <___vfprintf_internal_r+0x6b4>
  801fe4:	2805883a 	mov	r2,r5
  801fe8:	d9814b17 	ldw	r6,1324(sp)
  801fec:	308d883a 	add	r6,r6,r2
  801ff0:	d9814b15 	stw	r6,1324(sp)
  801ff4:	90013b1e 	bne	r18,zero,8024e4 <___vfprintf_internal_r+0xbb0>
  801ff8:	d9c14017 	ldw	r7,1280(sp)
  801ffc:	dd401904 	addi	r21,sp,100
  802000:	d8000d15 	stw	zero,52(sp)
  802004:	003ea706 	br	801aa4 <___vfprintf_internal_r+0x170>
  802008:	d8800e17 	ldw	r2,56(sp)
  80200c:	10053f1e 	bne	r2,zero,80350c <___vfprintf_internal_r+0x1bd8>
  802010:	d8000d15 	stw	zero,52(sp)
  802014:	b080030b 	ldhu	r2,12(r22)
  802018:	1080100c 	andi	r2,r2,64
  80201c:	103e8726 	beq	r2,zero,801a3c <___vfprintf_internal_r+0x108>
  802020:	00bfffc4 	movi	r2,-1
  802024:	d8814b15 	stw	r2,1324(sp)
  802028:	003e8406 	br	801a3c <___vfprintf_internal_r+0x108>
  80202c:	d9814d17 	ldw	r6,1332(sp)
  802030:	00801944 	movi	r2,101
  802034:	11806e16 	blt	r2,r6,8021f0 <___vfprintf_internal_r+0x8bc>
  802038:	d9414717 	ldw	r5,1308(sp)
  80203c:	00c00044 	movi	r3,1
  802040:	1943430e 	bge	r3,r5,802d50 <___vfprintf_internal_r+0x141c>
  802044:	d8814117 	ldw	r2,1284(sp)
  802048:	94800044 	addi	r18,r18,1
  80204c:	8c400044 	addi	r17,r17,1
  802050:	a8800015 	stw	r2,0(r21)
  802054:	008001c4 	movi	r2,7
  802058:	a8c00115 	stw	r3,4(r21)
  80205c:	dc800e15 	stw	r18,56(sp)
  802060:	dc400d15 	stw	r17,52(sp)
  802064:	1441ca16 	blt	r2,r17,802790 <___vfprintf_internal_r+0xe5c>
  802068:	a8c00204 	addi	r3,r21,8
  80206c:	d9014917 	ldw	r4,1316(sp)
  802070:	00800044 	movi	r2,1
  802074:	94800044 	addi	r18,r18,1
  802078:	8c400044 	addi	r17,r17,1
  80207c:	18800115 	stw	r2,4(r3)
  802080:	008001c4 	movi	r2,7
  802084:	19000015 	stw	r4,0(r3)
  802088:	dc800e15 	stw	r18,56(sp)
  80208c:	dc400d15 	stw	r17,52(sp)
  802090:	1441b616 	blt	r2,r17,80276c <___vfprintf_internal_r+0xe38>
  802094:	1cc00204 	addi	r19,r3,8
  802098:	d9014217 	ldw	r4,1288(sp)
  80209c:	d9414317 	ldw	r5,1292(sp)
  8020a0:	000d883a 	mov	r6,zero
  8020a4:	000f883a 	mov	r7,zero
  8020a8:	080a1840 	call	80a184 <__nedf2>
  8020ac:	10017426 	beq	r2,zero,802680 <___vfprintf_internal_r+0xd4c>
  8020b0:	d9414717 	ldw	r5,1308(sp)
  8020b4:	d9814117 	ldw	r6,1284(sp)
  8020b8:	8c400044 	addi	r17,r17,1
  8020bc:	2c85883a 	add	r2,r5,r18
  8020c0:	14bfffc4 	addi	r18,r2,-1
  8020c4:	28bfffc4 	addi	r2,r5,-1
  8020c8:	30c00044 	addi	r3,r6,1
  8020cc:	98800115 	stw	r2,4(r19)
  8020d0:	008001c4 	movi	r2,7
  8020d4:	98c00015 	stw	r3,0(r19)
  8020d8:	dc800e15 	stw	r18,56(sp)
  8020dc:	dc400d15 	stw	r17,52(sp)
  8020e0:	14418e16 	blt	r2,r17,80271c <___vfprintf_internal_r+0xde8>
  8020e4:	9cc00204 	addi	r19,r19,8
  8020e8:	d9414817 	ldw	r5,1312(sp)
  8020ec:	d8800804 	addi	r2,sp,32
  8020f0:	8c400044 	addi	r17,r17,1
  8020f4:	9165883a 	add	r18,r18,r5
  8020f8:	98800015 	stw	r2,0(r19)
  8020fc:	008001c4 	movi	r2,7
  802100:	99400115 	stw	r5,4(r19)
  802104:	dc800e15 	stw	r18,56(sp)
  802108:	dc400d15 	stw	r17,52(sp)
  80210c:	1440ed16 	blt	r2,r17,8024c4 <___vfprintf_internal_r+0xb90>
  802110:	98c00204 	addi	r3,r19,8
  802114:	003f8506 	br	801f2c <___vfprintf_internal_r+0x5f8>
  802118:	d9814a17 	ldw	r6,1320(sp)
  80211c:	d8814517 	ldw	r2,1300(sp)
  802120:	30a1c83a 	sub	r16,r6,r2
  802124:	043f4b0e 	bge	zero,r16,801e54 <___vfprintf_internal_r+0x520>
  802128:	00800404 	movi	r2,16
  80212c:	1404340e 	bge	r2,r16,803200 <___vfprintf_internal_r+0x18cc>
  802130:	1027883a 	mov	r19,r2
  802134:	07002074 	movhi	fp,129
  802138:	e73f7784 	addi	fp,fp,-546
  80213c:	050001c4 	movi	r20,7
  802140:	00000306 	br	802150 <___vfprintf_internal_r+0x81c>
  802144:	843ffc04 	addi	r16,r16,-16
  802148:	ad400204 	addi	r21,r21,8
  80214c:	9c00130e 	bge	r19,r16,80219c <___vfprintf_internal_r+0x868>
  802150:	94800404 	addi	r18,r18,16
  802154:	8c400044 	addi	r17,r17,1
  802158:	af000015 	stw	fp,0(r21)
  80215c:	acc00115 	stw	r19,4(r21)
  802160:	dc800e15 	stw	r18,56(sp)
  802164:	dc400d15 	stw	r17,52(sp)
  802168:	a47ff60e 	bge	r20,r17,802144 <___vfprintf_internal_r+0x810>
  80216c:	d9014f17 	ldw	r4,1340(sp)
  802170:	b00b883a 	mov	r5,r22
  802174:	d9800c04 	addi	r6,sp,48
  802178:	d9c15115 	stw	r7,1348(sp)
  80217c:	08018dc0 	call	8018dc <__sprint_r>
  802180:	d9c15117 	ldw	r7,1348(sp)
  802184:	103fa31e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802188:	843ffc04 	addi	r16,r16,-16
  80218c:	dc800e17 	ldw	r18,56(sp)
  802190:	dc400d17 	ldw	r17,52(sp)
  802194:	dd401904 	addi	r21,sp,100
  802198:	9c3fed16 	blt	r19,r16,802150 <___vfprintf_internal_r+0x81c>
  80219c:	9425883a 	add	r18,r18,r16
  8021a0:	8c400044 	addi	r17,r17,1
  8021a4:	008001c4 	movi	r2,7
  8021a8:	af000015 	stw	fp,0(r21)
  8021ac:	ac000115 	stw	r16,4(r21)
  8021b0:	dc800e15 	stw	r18,56(sp)
  8021b4:	dc400d15 	stw	r17,52(sp)
  8021b8:	14416116 	blt	r2,r17,802740 <___vfprintf_internal_r+0xe0c>
  8021bc:	ad400204 	addi	r21,r21,8
  8021c0:	003f2406 	br	801e54 <___vfprintf_internal_r+0x520>
  8021c4:	d9014f17 	ldw	r4,1340(sp)
  8021c8:	08053a40 	call	8053a4 <__sinit>
  8021cc:	d9c15117 	ldw	r7,1348(sp)
  8021d0:	003def06 	br	801990 <___vfprintf_internal_r+0x5c>
  8021d4:	d9014f17 	ldw	r4,1340(sp)
  8021d8:	b00b883a 	mov	r5,r22
  8021dc:	d9c15115 	stw	r7,1348(sp)
  8021e0:	08038040 	call	803804 <__swsetup_r>
  8021e4:	d9c15117 	ldw	r7,1348(sp)
  8021e8:	103dee26 	beq	r2,zero,8019a4 <___vfprintf_internal_r+0x70>
  8021ec:	003f8c06 	br	802020 <___vfprintf_internal_r+0x6ec>
  8021f0:	d9014217 	ldw	r4,1288(sp)
  8021f4:	d9414317 	ldw	r5,1292(sp)
  8021f8:	000d883a 	mov	r6,zero
  8021fc:	000f883a 	mov	r7,zero
  802200:	080a0fc0 	call	80a0fc <__eqdf2>
  802204:	1000f21e 	bne	r2,zero,8025d0 <___vfprintf_internal_r+0xc9c>
  802208:	00802074 	movhi	r2,129
  80220c:	10bf7704 	addi	r2,r2,-548
  802210:	94800044 	addi	r18,r18,1
  802214:	8c400044 	addi	r17,r17,1
  802218:	a8800015 	stw	r2,0(r21)
  80221c:	00c00044 	movi	r3,1
  802220:	008001c4 	movi	r2,7
  802224:	a8c00115 	stw	r3,4(r21)
  802228:	dc800e15 	stw	r18,56(sp)
  80222c:	dc400d15 	stw	r17,52(sp)
  802230:	1442fa16 	blt	r2,r17,802e1c <___vfprintf_internal_r+0x14e8>
  802234:	a8c00204 	addi	r3,r21,8
  802238:	d8800517 	ldw	r2,20(sp)
  80223c:	d9014717 	ldw	r4,1308(sp)
  802240:	11015c0e 	bge	r2,r4,8027b4 <___vfprintf_internal_r+0xe80>
  802244:	dc400d17 	ldw	r17,52(sp)
  802248:	d9814917 	ldw	r6,1316(sp)
  80224c:	00800044 	movi	r2,1
  802250:	94800044 	addi	r18,r18,1
  802254:	8c400044 	addi	r17,r17,1
  802258:	18800115 	stw	r2,4(r3)
  80225c:	008001c4 	movi	r2,7
  802260:	19800015 	stw	r6,0(r3)
  802264:	dc800e15 	stw	r18,56(sp)
  802268:	dc400d15 	stw	r17,52(sp)
  80226c:	14431016 	blt	r2,r17,802eb0 <___vfprintf_internal_r+0x157c>
  802270:	18c00204 	addi	r3,r3,8
  802274:	d8814717 	ldw	r2,1308(sp)
  802278:	143fffc4 	addi	r16,r2,-1
  80227c:	043f2b0e 	bge	zero,r16,801f2c <___vfprintf_internal_r+0x5f8>
  802280:	00800404 	movi	r2,16
  802284:	1402a20e 	bge	r2,r16,802d10 <___vfprintf_internal_r+0x13dc>
  802288:	dc400d17 	ldw	r17,52(sp)
  80228c:	1027883a 	mov	r19,r2
  802290:	07002074 	movhi	fp,129
  802294:	e73f7784 	addi	fp,fp,-546
  802298:	050001c4 	movi	r20,7
  80229c:	00000306 	br	8022ac <___vfprintf_internal_r+0x978>
  8022a0:	18c00204 	addi	r3,r3,8
  8022a4:	843ffc04 	addi	r16,r16,-16
  8022a8:	9c029c0e 	bge	r19,r16,802d1c <___vfprintf_internal_r+0x13e8>
  8022ac:	94800404 	addi	r18,r18,16
  8022b0:	8c400044 	addi	r17,r17,1
  8022b4:	1f000015 	stw	fp,0(r3)
  8022b8:	1cc00115 	stw	r19,4(r3)
  8022bc:	dc800e15 	stw	r18,56(sp)
  8022c0:	dc400d15 	stw	r17,52(sp)
  8022c4:	a47ff60e 	bge	r20,r17,8022a0 <___vfprintf_internal_r+0x96c>
  8022c8:	d9014f17 	ldw	r4,1340(sp)
  8022cc:	b00b883a 	mov	r5,r22
  8022d0:	d9800c04 	addi	r6,sp,48
  8022d4:	08018dc0 	call	8018dc <__sprint_r>
  8022d8:	103f4e1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  8022dc:	dc800e17 	ldw	r18,56(sp)
  8022e0:	dc400d17 	ldw	r17,52(sp)
  8022e4:	d8c01904 	addi	r3,sp,100
  8022e8:	003fee06 	br	8022a4 <___vfprintf_internal_r+0x970>
  8022ec:	d8802c0b 	ldhu	r2,176(sp)
  8022f0:	00ffffc4 	movi	r3,-1
  8022f4:	d8c14b15 	stw	r3,1324(sp)
  8022f8:	1080100c 	andi	r2,r2,64
  8022fc:	103dcc1e 	bne	r2,zero,801a30 <___vfprintf_internal_r+0xfc>
  802300:	003dce06 	br	801a3c <___vfprintf_internal_r+0x108>
  802304:	d9014f17 	ldw	r4,1340(sp)
  802308:	b00b883a 	mov	r5,r22
  80230c:	d9800c04 	addi	r6,sp,48
  802310:	08018dc0 	call	8018dc <__sprint_r>
  802314:	103f3f1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802318:	dc800e17 	ldw	r18,56(sp)
  80231c:	003f2e06 	br	801fd8 <___vfprintf_internal_r+0x6a4>
  802320:	d9414c17 	ldw	r5,1328(sp)
  802324:	29400414 	ori	r5,r5,16
  802328:	d9414c15 	stw	r5,1328(sp)
  80232c:	d9814c17 	ldw	r6,1328(sp)
  802330:	3080080c 	andi	r2,r6,32
  802334:	10014f1e 	bne	r2,zero,802874 <___vfprintf_internal_r+0xf40>
  802338:	d8c14c17 	ldw	r3,1328(sp)
  80233c:	1880040c 	andi	r2,r3,16
  802340:	1002ea1e 	bne	r2,zero,802eec <___vfprintf_internal_r+0x15b8>
  802344:	d9014c17 	ldw	r4,1328(sp)
  802348:	2080100c 	andi	r2,r4,64
  80234c:	1002e726 	beq	r2,zero,802eec <___vfprintf_internal_r+0x15b8>
  802350:	3880000f 	ldh	r2,0(r7)
  802354:	39c00104 	addi	r7,r7,4
  802358:	d9c14015 	stw	r7,1280(sp)
  80235c:	1023d7fa 	srai	r17,r2,31
  802360:	1021883a 	mov	r16,r2
  802364:	88037216 	blt	r17,zero,803130 <___vfprintf_internal_r+0x17fc>
  802368:	01000044 	movi	r4,1
  80236c:	98000416 	blt	r19,zero,802380 <___vfprintf_internal_r+0xa4c>
  802370:	d8c14c17 	ldw	r3,1328(sp)
  802374:	00bfdfc4 	movi	r2,-129
  802378:	1886703a 	and	r3,r3,r2
  80237c:	d8c14c15 	stw	r3,1328(sp)
  802380:	8444b03a 	or	r2,r16,r17
  802384:	1002261e 	bne	r2,zero,802c20 <___vfprintf_internal_r+0x12ec>
  802388:	9802251e 	bne	r19,zero,802c20 <___vfprintf_internal_r+0x12ec>
  80238c:	20803fcc 	andi	r2,r4,255
  802390:	10029b26 	beq	r2,zero,802e00 <___vfprintf_internal_r+0x14cc>
  802394:	d8c01904 	addi	r3,sp,100
  802398:	dd000f04 	addi	r20,sp,60
  80239c:	d8c14115 	stw	r3,1284(sp)
  8023a0:	d8c14117 	ldw	r3,1284(sp)
  8023a4:	dcc14515 	stw	r19,1300(sp)
  8023a8:	a0c5c83a 	sub	r2,r20,r3
  8023ac:	11c00a04 	addi	r7,r2,40
  8023b0:	99c0010e 	bge	r19,r7,8023b8 <___vfprintf_internal_r+0xa84>
  8023b4:	d9c14515 	stw	r7,1300(sp)
  8023b8:	dcc14615 	stw	r19,1304(sp)
  8023bc:	d8800407 	ldb	r2,16(sp)
  8023c0:	103e4c26 	beq	r2,zero,801cf4 <___vfprintf_internal_r+0x3c0>
  8023c4:	d8814517 	ldw	r2,1300(sp)
  8023c8:	10800044 	addi	r2,r2,1
  8023cc:	d8814515 	stw	r2,1300(sp)
  8023d0:	003e4806 	br	801cf4 <___vfprintf_internal_r+0x3c0>
  8023d4:	d9814c17 	ldw	r6,1328(sp)
  8023d8:	31800414 	ori	r6,r6,16
  8023dc:	d9814c15 	stw	r6,1328(sp)
  8023e0:	d8c14c17 	ldw	r3,1328(sp)
  8023e4:	1880080c 	andi	r2,r3,32
  8023e8:	1001271e 	bne	r2,zero,802888 <___vfprintf_internal_r+0xf54>
  8023ec:	d9414c17 	ldw	r5,1328(sp)
  8023f0:	2880040c 	andi	r2,r5,16
  8023f4:	1002b61e 	bne	r2,zero,802ed0 <___vfprintf_internal_r+0x159c>
  8023f8:	d9814c17 	ldw	r6,1328(sp)
  8023fc:	3080100c 	andi	r2,r6,64
  802400:	1002b326 	beq	r2,zero,802ed0 <___vfprintf_internal_r+0x159c>
  802404:	3c00000b 	ldhu	r16,0(r7)
  802408:	0009883a 	mov	r4,zero
  80240c:	39c00104 	addi	r7,r7,4
  802410:	0023883a 	mov	r17,zero
  802414:	d9c14015 	stw	r7,1280(sp)
  802418:	d8000405 	stb	zero,16(sp)
  80241c:	003fd306 	br	80236c <___vfprintf_internal_r+0xa38>
  802420:	d9014c17 	ldw	r4,1328(sp)
  802424:	21000414 	ori	r4,r4,16
  802428:	d9014c15 	stw	r4,1328(sp)
  80242c:	d9414c17 	ldw	r5,1328(sp)
  802430:	2880080c 	andi	r2,r5,32
  802434:	1001081e 	bne	r2,zero,802858 <___vfprintf_internal_r+0xf24>
  802438:	d8c14c17 	ldw	r3,1328(sp)
  80243c:	1880040c 	andi	r2,r3,16
  802440:	1002b01e 	bne	r2,zero,802f04 <___vfprintf_internal_r+0x15d0>
  802444:	d9014c17 	ldw	r4,1328(sp)
  802448:	2080100c 	andi	r2,r4,64
  80244c:	1002ad26 	beq	r2,zero,802f04 <___vfprintf_internal_r+0x15d0>
  802450:	3c00000b 	ldhu	r16,0(r7)
  802454:	01000044 	movi	r4,1
  802458:	39c00104 	addi	r7,r7,4
  80245c:	0023883a 	mov	r17,zero
  802460:	d9c14015 	stw	r7,1280(sp)
  802464:	d8000405 	stb	zero,16(sp)
  802468:	003fc006 	br	80236c <___vfprintf_internal_r+0xa38>
  80246c:	d9014f17 	ldw	r4,1340(sp)
  802470:	b00b883a 	mov	r5,r22
  802474:	d9800c04 	addi	r6,sp,48
  802478:	08018dc0 	call	8018dc <__sprint_r>
  80247c:	103ee51e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802480:	dc800e17 	ldw	r18,56(sp)
  802484:	d8c01904 	addi	r3,sp,100
  802488:	d9814c17 	ldw	r6,1328(sp)
  80248c:	3080004c 	andi	r2,r6,1
  802490:	1005003a 	cmpeq	r2,r2,zero
  802494:	103ea51e 	bne	r2,zero,801f2c <___vfprintf_internal_r+0x5f8>
  802498:	00800044 	movi	r2,1
  80249c:	dc400d17 	ldw	r17,52(sp)
  8024a0:	18800115 	stw	r2,4(r3)
  8024a4:	d8814917 	ldw	r2,1316(sp)
  8024a8:	94800044 	addi	r18,r18,1
  8024ac:	8c400044 	addi	r17,r17,1
  8024b0:	18800015 	stw	r2,0(r3)
  8024b4:	008001c4 	movi	r2,7
  8024b8:	dc800e15 	stw	r18,56(sp)
  8024bc:	dc400d15 	stw	r17,52(sp)
  8024c0:	14421e0e 	bge	r2,r17,802d3c <___vfprintf_internal_r+0x1408>
  8024c4:	d9014f17 	ldw	r4,1340(sp)
  8024c8:	b00b883a 	mov	r5,r22
  8024cc:	d9800c04 	addi	r6,sp,48
  8024d0:	08018dc0 	call	8018dc <__sprint_r>
  8024d4:	103ecf1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  8024d8:	dc800e17 	ldw	r18,56(sp)
  8024dc:	d8c01904 	addi	r3,sp,100
  8024e0:	003e9206 	br	801f2c <___vfprintf_internal_r+0x5f8>
  8024e4:	d9014f17 	ldw	r4,1340(sp)
  8024e8:	b00b883a 	mov	r5,r22
  8024ec:	d9800c04 	addi	r6,sp,48
  8024f0:	08018dc0 	call	8018dc <__sprint_r>
  8024f4:	103ec026 	beq	r2,zero,801ff8 <___vfprintf_internal_r+0x6c4>
  8024f8:	003ec606 	br	802014 <___vfprintf_internal_r+0x6e0>
  8024fc:	d9014f17 	ldw	r4,1340(sp)
  802500:	b00b883a 	mov	r5,r22
  802504:	d9800c04 	addi	r6,sp,48
  802508:	d9c15115 	stw	r7,1348(sp)
  80250c:	08018dc0 	call	8018dc <__sprint_r>
  802510:	d9c15117 	ldw	r7,1348(sp)
  802514:	103ebf1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802518:	dc800e17 	ldw	r18,56(sp)
  80251c:	dc400d17 	ldw	r17,52(sp)
  802520:	dd401904 	addi	r21,sp,100
  802524:	003e7406 	br	801ef8 <___vfprintf_internal_r+0x5c4>
  802528:	d9014f17 	ldw	r4,1340(sp)
  80252c:	b00b883a 	mov	r5,r22
  802530:	d9800c04 	addi	r6,sp,48
  802534:	d9c15115 	stw	r7,1348(sp)
  802538:	08018dc0 	call	8018dc <__sprint_r>
  80253c:	d9c15117 	ldw	r7,1348(sp)
  802540:	103eb41e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802544:	dd401904 	addi	r21,sp,100
  802548:	003d6d06 	br	801b00 <___vfprintf_internal_r+0x1cc>
  80254c:	d9014f17 	ldw	r4,1340(sp)
  802550:	b00b883a 	mov	r5,r22
  802554:	d9800c04 	addi	r6,sp,48
  802558:	d9c15115 	stw	r7,1348(sp)
  80255c:	08018dc0 	call	8018dc <__sprint_r>
  802560:	d9c15117 	ldw	r7,1348(sp)
  802564:	103eab1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802568:	dc800e17 	ldw	r18,56(sp)
  80256c:	dc400d17 	ldw	r17,52(sp)
  802570:	dd401904 	addi	r21,sp,100
  802574:	003e3406 	br	801e48 <___vfprintf_internal_r+0x514>
  802578:	d9014f17 	ldw	r4,1340(sp)
  80257c:	b00b883a 	mov	r5,r22
  802580:	d9800c04 	addi	r6,sp,48
  802584:	d9c15115 	stw	r7,1348(sp)
  802588:	08018dc0 	call	8018dc <__sprint_r>
  80258c:	d9c15117 	ldw	r7,1348(sp)
  802590:	103ea01e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802594:	dc800e17 	ldw	r18,56(sp)
  802598:	dc400d17 	ldw	r17,52(sp)
  80259c:	dd401904 	addi	r21,sp,100
  8025a0:	003e1c06 	br	801e14 <___vfprintf_internal_r+0x4e0>
  8025a4:	d9014f17 	ldw	r4,1340(sp)
  8025a8:	b00b883a 	mov	r5,r22
  8025ac:	d9800c04 	addi	r6,sp,48
  8025b0:	d9c15115 	stw	r7,1348(sp)
  8025b4:	08018dc0 	call	8018dc <__sprint_r>
  8025b8:	d9c15117 	ldw	r7,1348(sp)
  8025bc:	103e951e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  8025c0:	dc800e17 	ldw	r18,56(sp)
  8025c4:	dc400d17 	ldw	r17,52(sp)
  8025c8:	dd401904 	addi	r21,sp,100
  8025cc:	003e0406 	br	801de0 <___vfprintf_internal_r+0x4ac>
  8025d0:	d9000517 	ldw	r4,20(sp)
  8025d4:	0102520e 	bge	zero,r4,802f20 <___vfprintf_internal_r+0x15ec>
  8025d8:	d9814717 	ldw	r6,1308(sp)
  8025dc:	21807a16 	blt	r4,r6,8027c8 <___vfprintf_internal_r+0xe94>
  8025e0:	d8814117 	ldw	r2,1284(sp)
  8025e4:	91a5883a 	add	r18,r18,r6
  8025e8:	8c400044 	addi	r17,r17,1
  8025ec:	a8800015 	stw	r2,0(r21)
  8025f0:	008001c4 	movi	r2,7
  8025f4:	a9800115 	stw	r6,4(r21)
  8025f8:	dc800e15 	stw	r18,56(sp)
  8025fc:	dc400d15 	stw	r17,52(sp)
  802600:	1442f616 	blt	r2,r17,8031dc <___vfprintf_internal_r+0x18a8>
  802604:	a8c00204 	addi	r3,r21,8
  802608:	d9414717 	ldw	r5,1308(sp)
  80260c:	2161c83a 	sub	r16,r4,r5
  802610:	043f9d0e 	bge	zero,r16,802488 <___vfprintf_internal_r+0xb54>
  802614:	00800404 	movi	r2,16
  802618:	1402130e 	bge	r2,r16,802e68 <___vfprintf_internal_r+0x1534>
  80261c:	dc400d17 	ldw	r17,52(sp)
  802620:	1027883a 	mov	r19,r2
  802624:	07002074 	movhi	fp,129
  802628:	e73f7784 	addi	fp,fp,-546
  80262c:	050001c4 	movi	r20,7
  802630:	00000306 	br	802640 <___vfprintf_internal_r+0xd0c>
  802634:	18c00204 	addi	r3,r3,8
  802638:	843ffc04 	addi	r16,r16,-16
  80263c:	9c020d0e 	bge	r19,r16,802e74 <___vfprintf_internal_r+0x1540>
  802640:	94800404 	addi	r18,r18,16
  802644:	8c400044 	addi	r17,r17,1
  802648:	1f000015 	stw	fp,0(r3)
  80264c:	1cc00115 	stw	r19,4(r3)
  802650:	dc800e15 	stw	r18,56(sp)
  802654:	dc400d15 	stw	r17,52(sp)
  802658:	a47ff60e 	bge	r20,r17,802634 <___vfprintf_internal_r+0xd00>
  80265c:	d9014f17 	ldw	r4,1340(sp)
  802660:	b00b883a 	mov	r5,r22
  802664:	d9800c04 	addi	r6,sp,48
  802668:	08018dc0 	call	8018dc <__sprint_r>
  80266c:	103e691e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802670:	dc800e17 	ldw	r18,56(sp)
  802674:	dc400d17 	ldw	r17,52(sp)
  802678:	d8c01904 	addi	r3,sp,100
  80267c:	003fee06 	br	802638 <___vfprintf_internal_r+0xd04>
  802680:	d8814717 	ldw	r2,1308(sp)
  802684:	143fffc4 	addi	r16,r2,-1
  802688:	043e970e 	bge	zero,r16,8020e8 <___vfprintf_internal_r+0x7b4>
  80268c:	00800404 	movi	r2,16
  802690:	1400180e 	bge	r2,r16,8026f4 <___vfprintf_internal_r+0xdc0>
  802694:	1029883a 	mov	r20,r2
  802698:	07002074 	movhi	fp,129
  80269c:	e73f7784 	addi	fp,fp,-546
  8026a0:	054001c4 	movi	r21,7
  8026a4:	00000306 	br	8026b4 <___vfprintf_internal_r+0xd80>
  8026a8:	9cc00204 	addi	r19,r19,8
  8026ac:	843ffc04 	addi	r16,r16,-16
  8026b0:	a400120e 	bge	r20,r16,8026fc <___vfprintf_internal_r+0xdc8>
  8026b4:	94800404 	addi	r18,r18,16
  8026b8:	8c400044 	addi	r17,r17,1
  8026bc:	9f000015 	stw	fp,0(r19)
  8026c0:	9d000115 	stw	r20,4(r19)
  8026c4:	dc800e15 	stw	r18,56(sp)
  8026c8:	dc400d15 	stw	r17,52(sp)
  8026cc:	ac7ff60e 	bge	r21,r17,8026a8 <___vfprintf_internal_r+0xd74>
  8026d0:	d9014f17 	ldw	r4,1340(sp)
  8026d4:	b00b883a 	mov	r5,r22
  8026d8:	d9800c04 	addi	r6,sp,48
  8026dc:	08018dc0 	call	8018dc <__sprint_r>
  8026e0:	103e4c1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  8026e4:	dc800e17 	ldw	r18,56(sp)
  8026e8:	dc400d17 	ldw	r17,52(sp)
  8026ec:	dcc01904 	addi	r19,sp,100
  8026f0:	003fee06 	br	8026ac <___vfprintf_internal_r+0xd78>
  8026f4:	07002074 	movhi	fp,129
  8026f8:	e73f7784 	addi	fp,fp,-546
  8026fc:	9425883a 	add	r18,r18,r16
  802700:	8c400044 	addi	r17,r17,1
  802704:	008001c4 	movi	r2,7
  802708:	9f000015 	stw	fp,0(r19)
  80270c:	9c000115 	stw	r16,4(r19)
  802710:	dc800e15 	stw	r18,56(sp)
  802714:	dc400d15 	stw	r17,52(sp)
  802718:	147e720e 	bge	r2,r17,8020e4 <___vfprintf_internal_r+0x7b0>
  80271c:	d9014f17 	ldw	r4,1340(sp)
  802720:	b00b883a 	mov	r5,r22
  802724:	d9800c04 	addi	r6,sp,48
  802728:	08018dc0 	call	8018dc <__sprint_r>
  80272c:	103e391e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802730:	dc800e17 	ldw	r18,56(sp)
  802734:	dc400d17 	ldw	r17,52(sp)
  802738:	dcc01904 	addi	r19,sp,100
  80273c:	003e6a06 	br	8020e8 <___vfprintf_internal_r+0x7b4>
  802740:	d9014f17 	ldw	r4,1340(sp)
  802744:	b00b883a 	mov	r5,r22
  802748:	d9800c04 	addi	r6,sp,48
  80274c:	d9c15115 	stw	r7,1348(sp)
  802750:	08018dc0 	call	8018dc <__sprint_r>
  802754:	d9c15117 	ldw	r7,1348(sp)
  802758:	103e2e1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  80275c:	dc800e17 	ldw	r18,56(sp)
  802760:	dc400d17 	ldw	r17,52(sp)
  802764:	dd401904 	addi	r21,sp,100
  802768:	003dba06 	br	801e54 <___vfprintf_internal_r+0x520>
  80276c:	d9014f17 	ldw	r4,1340(sp)
  802770:	b00b883a 	mov	r5,r22
  802774:	d9800c04 	addi	r6,sp,48
  802778:	08018dc0 	call	8018dc <__sprint_r>
  80277c:	103e251e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802780:	dc800e17 	ldw	r18,56(sp)
  802784:	dc400d17 	ldw	r17,52(sp)
  802788:	dcc01904 	addi	r19,sp,100
  80278c:	003e4206 	br	802098 <___vfprintf_internal_r+0x764>
  802790:	d9014f17 	ldw	r4,1340(sp)
  802794:	b00b883a 	mov	r5,r22
  802798:	d9800c04 	addi	r6,sp,48
  80279c:	08018dc0 	call	8018dc <__sprint_r>
  8027a0:	103e1c1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  8027a4:	dc800e17 	ldw	r18,56(sp)
  8027a8:	dc400d17 	ldw	r17,52(sp)
  8027ac:	d8c01904 	addi	r3,sp,100
  8027b0:	003e2e06 	br	80206c <___vfprintf_internal_r+0x738>
  8027b4:	d9414c17 	ldw	r5,1328(sp)
  8027b8:	2880004c 	andi	r2,r5,1
  8027bc:	1005003a 	cmpeq	r2,r2,zero
  8027c0:	103dda1e 	bne	r2,zero,801f2c <___vfprintf_internal_r+0x5f8>
  8027c4:	003e9f06 	br	802244 <___vfprintf_internal_r+0x910>
  8027c8:	d8c14117 	ldw	r3,1284(sp)
  8027cc:	9125883a 	add	r18,r18,r4
  8027d0:	8c400044 	addi	r17,r17,1
  8027d4:	008001c4 	movi	r2,7
  8027d8:	a8c00015 	stw	r3,0(r21)
  8027dc:	a9000115 	stw	r4,4(r21)
  8027e0:	dc800e15 	stw	r18,56(sp)
  8027e4:	dc400d15 	stw	r17,52(sp)
  8027e8:	14426616 	blt	r2,r17,803184 <___vfprintf_internal_r+0x1850>
  8027ec:	a8c00204 	addi	r3,r21,8
  8027f0:	d9414917 	ldw	r5,1316(sp)
  8027f4:	00800044 	movi	r2,1
  8027f8:	94800044 	addi	r18,r18,1
  8027fc:	8c400044 	addi	r17,r17,1
  802800:	18800115 	stw	r2,4(r3)
  802804:	008001c4 	movi	r2,7
  802808:	19400015 	stw	r5,0(r3)
  80280c:	dc800e15 	stw	r18,56(sp)
  802810:	dc400d15 	stw	r17,52(sp)
  802814:	2021883a 	mov	r16,r4
  802818:	14425016 	blt	r2,r17,80315c <___vfprintf_internal_r+0x1828>
  80281c:	19400204 	addi	r5,r3,8
  802820:	d9814717 	ldw	r6,1308(sp)
  802824:	8c400044 	addi	r17,r17,1
  802828:	dc400d15 	stw	r17,52(sp)
  80282c:	3107c83a 	sub	r3,r6,r4
  802830:	d9014117 	ldw	r4,1284(sp)
  802834:	90e5883a 	add	r18,r18,r3
  802838:	28c00115 	stw	r3,4(r5)
  80283c:	8105883a 	add	r2,r16,r4
  802840:	28800015 	stw	r2,0(r5)
  802844:	008001c4 	movi	r2,7
  802848:	dc800e15 	stw	r18,56(sp)
  80284c:	147f1d16 	blt	r2,r17,8024c4 <___vfprintf_internal_r+0xb90>
  802850:	28c00204 	addi	r3,r5,8
  802854:	003db506 	br	801f2c <___vfprintf_internal_r+0x5f8>
  802858:	3c000017 	ldw	r16,0(r7)
  80285c:	3c400117 	ldw	r17,4(r7)
  802860:	39800204 	addi	r6,r7,8
  802864:	01000044 	movi	r4,1
  802868:	d9814015 	stw	r6,1280(sp)
  80286c:	d8000405 	stb	zero,16(sp)
  802870:	003ebe06 	br	80236c <___vfprintf_internal_r+0xa38>
  802874:	3c000017 	ldw	r16,0(r7)
  802878:	3c400117 	ldw	r17,4(r7)
  80287c:	38800204 	addi	r2,r7,8
  802880:	d8814015 	stw	r2,1280(sp)
  802884:	003eb706 	br	802364 <___vfprintf_internal_r+0xa30>
  802888:	3c000017 	ldw	r16,0(r7)
  80288c:	3c400117 	ldw	r17,4(r7)
  802890:	39000204 	addi	r4,r7,8
  802894:	d9014015 	stw	r4,1280(sp)
  802898:	0009883a 	mov	r4,zero
  80289c:	d8000405 	stb	zero,16(sp)
  8028a0:	003eb206 	br	80236c <___vfprintf_internal_r+0xa38>
  8028a4:	38c00017 	ldw	r3,0(r7)
  8028a8:	39c00104 	addi	r7,r7,4
  8028ac:	d8c14a15 	stw	r3,1320(sp)
  8028b0:	1800d10e 	bge	r3,zero,802bf8 <___vfprintf_internal_r+0x12c4>
  8028b4:	00c7c83a 	sub	r3,zero,r3
  8028b8:	d8c14a15 	stw	r3,1320(sp)
  8028bc:	d9014c17 	ldw	r4,1328(sp)
  8028c0:	b8c00007 	ldb	r3,0(r23)
  8028c4:	21000114 	ori	r4,r4,4
  8028c8:	d9014c15 	stw	r4,1328(sp)
  8028cc:	003c9806 	br	801b30 <___vfprintf_internal_r+0x1fc>
  8028d0:	d9814c17 	ldw	r6,1328(sp)
  8028d4:	3080080c 	andi	r2,r6,32
  8028d8:	1001f026 	beq	r2,zero,80309c <___vfprintf_internal_r+0x1768>
  8028dc:	d9014b17 	ldw	r4,1324(sp)
  8028e0:	38800017 	ldw	r2,0(r7)
  8028e4:	39c00104 	addi	r7,r7,4
  8028e8:	d9c14015 	stw	r7,1280(sp)
  8028ec:	2007d7fa 	srai	r3,r4,31
  8028f0:	d9c14017 	ldw	r7,1280(sp)
  8028f4:	11000015 	stw	r4,0(r2)
  8028f8:	10c00115 	stw	r3,4(r2)
  8028fc:	003c6906 	br	801aa4 <___vfprintf_internal_r+0x170>
  802900:	b8c00007 	ldb	r3,0(r23)
  802904:	00801b04 	movi	r2,108
  802908:	18824f26 	beq	r3,r2,803248 <___vfprintf_internal_r+0x1914>
  80290c:	d9414c17 	ldw	r5,1328(sp)
  802910:	29400414 	ori	r5,r5,16
  802914:	d9414c15 	stw	r5,1328(sp)
  802918:	003c8506 	br	801b30 <___vfprintf_internal_r+0x1fc>
  80291c:	d9814c17 	ldw	r6,1328(sp)
  802920:	b8c00007 	ldb	r3,0(r23)
  802924:	31800814 	ori	r6,r6,32
  802928:	d9814c15 	stw	r6,1328(sp)
  80292c:	003c8006 	br	801b30 <___vfprintf_internal_r+0x1fc>
  802930:	d8814c17 	ldw	r2,1328(sp)
  802934:	3c000017 	ldw	r16,0(r7)
  802938:	00c01e04 	movi	r3,120
  80293c:	10800094 	ori	r2,r2,2
  802940:	d8814c15 	stw	r2,1328(sp)
  802944:	39c00104 	addi	r7,r7,4
  802948:	01402074 	movhi	r5,129
  80294c:	297f6004 	addi	r5,r5,-640
  802950:	00800c04 	movi	r2,48
  802954:	0023883a 	mov	r17,zero
  802958:	01000084 	movi	r4,2
  80295c:	d9c14015 	stw	r7,1280(sp)
  802960:	d8c14d15 	stw	r3,1332(sp)
  802964:	d9414415 	stw	r5,1296(sp)
  802968:	d8800445 	stb	r2,17(sp)
  80296c:	d8c00485 	stb	r3,18(sp)
  802970:	d8000405 	stb	zero,16(sp)
  802974:	003e7d06 	br	80236c <___vfprintf_internal_r+0xa38>
  802978:	d8814c17 	ldw	r2,1328(sp)
  80297c:	b8c00007 	ldb	r3,0(r23)
  802980:	10801014 	ori	r2,r2,64
  802984:	d8814c15 	stw	r2,1328(sp)
  802988:	003c6906 	br	801b30 <___vfprintf_internal_r+0x1fc>
  80298c:	d9414c17 	ldw	r5,1328(sp)
  802990:	2880020c 	andi	r2,r5,8
  802994:	1001df26 	beq	r2,zero,803114 <___vfprintf_internal_r+0x17e0>
  802998:	39800017 	ldw	r6,0(r7)
  80299c:	38800204 	addi	r2,r7,8
  8029a0:	d8814015 	stw	r2,1280(sp)
  8029a4:	d9814215 	stw	r6,1288(sp)
  8029a8:	39c00117 	ldw	r7,4(r7)
  8029ac:	d9c14315 	stw	r7,1292(sp)
  8029b0:	d9014217 	ldw	r4,1288(sp)
  8029b4:	d9414317 	ldw	r5,1292(sp)
  8029b8:	08082d40 	call	8082d4 <__isinfd>
  8029bc:	10021726 	beq	r2,zero,80321c <___vfprintf_internal_r+0x18e8>
  8029c0:	d9014217 	ldw	r4,1288(sp)
  8029c4:	d9414317 	ldw	r5,1292(sp)
  8029c8:	000d883a 	mov	r6,zero
  8029cc:	000f883a 	mov	r7,zero
  8029d0:	080a31c0 	call	80a31c <__ltdf2>
  8029d4:	1002ca16 	blt	r2,zero,803500 <___vfprintf_internal_r+0x1bcc>
  8029d8:	d9414d17 	ldw	r5,1332(sp)
  8029dc:	008011c4 	movi	r2,71
  8029e0:	11420a16 	blt	r2,r5,80320c <___vfprintf_internal_r+0x18d8>
  8029e4:	01802074 	movhi	r6,129
  8029e8:	31bf6504 	addi	r6,r6,-620
  8029ec:	d9814115 	stw	r6,1284(sp)
  8029f0:	d9014c17 	ldw	r4,1328(sp)
  8029f4:	00c000c4 	movi	r3,3
  8029f8:	00bfdfc4 	movi	r2,-129
  8029fc:	2088703a 	and	r4,r4,r2
  802a00:	180f883a 	mov	r7,r3
  802a04:	d8c14515 	stw	r3,1300(sp)
  802a08:	d9014c15 	stw	r4,1328(sp)
  802a0c:	d8014615 	stw	zero,1304(sp)
  802a10:	003e6a06 	br	8023bc <___vfprintf_internal_r+0xa88>
  802a14:	38800017 	ldw	r2,0(r7)
  802a18:	00c00044 	movi	r3,1
  802a1c:	39c00104 	addi	r7,r7,4
  802a20:	d9c14015 	stw	r7,1280(sp)
  802a24:	d9000f04 	addi	r4,sp,60
  802a28:	180f883a 	mov	r7,r3
  802a2c:	d8c14515 	stw	r3,1300(sp)
  802a30:	d9014115 	stw	r4,1284(sp)
  802a34:	d8800f05 	stb	r2,60(sp)
  802a38:	d8000405 	stb	zero,16(sp)
  802a3c:	003cac06 	br	801cf0 <___vfprintf_internal_r+0x3bc>
  802a40:	01402074 	movhi	r5,129
  802a44:	297f6b04 	addi	r5,r5,-596
  802a48:	d9414415 	stw	r5,1296(sp)
  802a4c:	d9814c17 	ldw	r6,1328(sp)
  802a50:	3080080c 	andi	r2,r6,32
  802a54:	1000f926 	beq	r2,zero,802e3c <___vfprintf_internal_r+0x1508>
  802a58:	3c000017 	ldw	r16,0(r7)
  802a5c:	3c400117 	ldw	r17,4(r7)
  802a60:	38800204 	addi	r2,r7,8
  802a64:	d8814015 	stw	r2,1280(sp)
  802a68:	d9414c17 	ldw	r5,1328(sp)
  802a6c:	2880004c 	andi	r2,r5,1
  802a70:	1005003a 	cmpeq	r2,r2,zero
  802a74:	1000b31e 	bne	r2,zero,802d44 <___vfprintf_internal_r+0x1410>
  802a78:	8444b03a 	or	r2,r16,r17
  802a7c:	1000b126 	beq	r2,zero,802d44 <___vfprintf_internal_r+0x1410>
  802a80:	d9814d17 	ldw	r6,1332(sp)
  802a84:	29400094 	ori	r5,r5,2
  802a88:	00800c04 	movi	r2,48
  802a8c:	01000084 	movi	r4,2
  802a90:	d9414c15 	stw	r5,1328(sp)
  802a94:	d8800445 	stb	r2,17(sp)
  802a98:	d9800485 	stb	r6,18(sp)
  802a9c:	d8000405 	stb	zero,16(sp)
  802aa0:	003e3206 	br	80236c <___vfprintf_internal_r+0xa38>
  802aa4:	01802074 	movhi	r6,129
  802aa8:	31bf6004 	addi	r6,r6,-640
  802aac:	d9814415 	stw	r6,1296(sp)
  802ab0:	003fe606 	br	802a4c <___vfprintf_internal_r+0x1118>
  802ab4:	00800ac4 	movi	r2,43
  802ab8:	d8800405 	stb	r2,16(sp)
  802abc:	b8c00007 	ldb	r3,0(r23)
  802ac0:	003c1b06 	br	801b30 <___vfprintf_internal_r+0x1fc>
  802ac4:	d8814c17 	ldw	r2,1328(sp)
  802ac8:	b8c00007 	ldb	r3,0(r23)
  802acc:	10800054 	ori	r2,r2,1
  802ad0:	d8814c15 	stw	r2,1328(sp)
  802ad4:	003c1606 	br	801b30 <___vfprintf_internal_r+0x1fc>
  802ad8:	d8800407 	ldb	r2,16(sp)
  802adc:	1000461e 	bne	r2,zero,802bf8 <___vfprintf_internal_r+0x12c4>
  802ae0:	00800804 	movi	r2,32
  802ae4:	d8800405 	stb	r2,16(sp)
  802ae8:	b8c00007 	ldb	r3,0(r23)
  802aec:	003c1006 	br	801b30 <___vfprintf_internal_r+0x1fc>
  802af0:	d9814c17 	ldw	r6,1328(sp)
  802af4:	b8c00007 	ldb	r3,0(r23)
  802af8:	31800214 	ori	r6,r6,8
  802afc:	d9814c15 	stw	r6,1328(sp)
  802b00:	003c0b06 	br	801b30 <___vfprintf_internal_r+0x1fc>
  802b04:	0007883a 	mov	r3,zero
  802b08:	01000244 	movi	r4,9
  802b0c:	188002a4 	muli	r2,r3,10
  802b10:	b8c00007 	ldb	r3,0(r23)
  802b14:	d9814d17 	ldw	r6,1332(sp)
  802b18:	bdc00044 	addi	r23,r23,1
  802b1c:	d8c14d15 	stw	r3,1332(sp)
  802b20:	d9414d17 	ldw	r5,1332(sp)
  802b24:	3085883a 	add	r2,r6,r2
  802b28:	10fff404 	addi	r3,r2,-48
  802b2c:	28bff404 	addi	r2,r5,-48
  802b30:	20bff62e 	bgeu	r4,r2,802b0c <___vfprintf_internal_r+0x11d8>
  802b34:	d8c14a15 	stw	r3,1320(sp)
  802b38:	003bff06 	br	801b38 <___vfprintf_internal_r+0x204>
  802b3c:	d9414c17 	ldw	r5,1328(sp)
  802b40:	b8c00007 	ldb	r3,0(r23)
  802b44:	29402014 	ori	r5,r5,128
  802b48:	d9414c15 	stw	r5,1328(sp)
  802b4c:	003bf806 	br	801b30 <___vfprintf_internal_r+0x1fc>
  802b50:	b8c00007 	ldb	r3,0(r23)
  802b54:	00800a84 	movi	r2,42
  802b58:	bdc00044 	addi	r23,r23,1
  802b5c:	18831526 	beq	r3,r2,8037b4 <___vfprintf_internal_r+0x1e80>
  802b60:	d8c14d15 	stw	r3,1332(sp)
  802b64:	18bff404 	addi	r2,r3,-48
  802b68:	00c00244 	movi	r3,9
  802b6c:	18827836 	bltu	r3,r2,803550 <___vfprintf_internal_r+0x1c1c>
  802b70:	000d883a 	mov	r6,zero
  802b74:	308002a4 	muli	r2,r6,10
  802b78:	b9800007 	ldb	r6,0(r23)
  802b7c:	d9414d17 	ldw	r5,1332(sp)
  802b80:	bdc00044 	addi	r23,r23,1
  802b84:	d9814d15 	stw	r6,1332(sp)
  802b88:	d9014d17 	ldw	r4,1332(sp)
  802b8c:	1145883a 	add	r2,r2,r5
  802b90:	11bff404 	addi	r6,r2,-48
  802b94:	20bff404 	addi	r2,r4,-48
  802b98:	18bff62e 	bgeu	r3,r2,802b74 <___vfprintf_internal_r+0x1240>
  802b9c:	3027883a 	mov	r19,r6
  802ba0:	303be50e 	bge	r6,zero,801b38 <___vfprintf_internal_r+0x204>
  802ba4:	04ffffc4 	movi	r19,-1
  802ba8:	003be306 	br	801b38 <___vfprintf_internal_r+0x204>
  802bac:	d8000405 	stb	zero,16(sp)
  802bb0:	39800017 	ldw	r6,0(r7)
  802bb4:	39c00104 	addi	r7,r7,4
  802bb8:	d9c14015 	stw	r7,1280(sp)
  802bbc:	d9814115 	stw	r6,1284(sp)
  802bc0:	3001c926 	beq	r6,zero,8032e8 <___vfprintf_internal_r+0x19b4>
  802bc4:	98000e16 	blt	r19,zero,802c00 <___vfprintf_internal_r+0x12cc>
  802bc8:	d9014117 	ldw	r4,1284(sp)
  802bcc:	000b883a 	mov	r5,zero
  802bd0:	980d883a 	mov	r6,r19
  802bd4:	08069f00 	call	8069f0 <memchr>
  802bd8:	10025926 	beq	r2,zero,803540 <___vfprintf_internal_r+0x1c0c>
  802bdc:	d8c14117 	ldw	r3,1284(sp)
  802be0:	10cfc83a 	sub	r7,r2,r3
  802be4:	99c19e16 	blt	r19,r7,803260 <___vfprintf_internal_r+0x192c>
  802be8:	d9c14515 	stw	r7,1300(sp)
  802bec:	38000916 	blt	r7,zero,802c14 <___vfprintf_internal_r+0x12e0>
  802bf0:	d8014615 	stw	zero,1304(sp)
  802bf4:	003df106 	br	8023bc <___vfprintf_internal_r+0xa88>
  802bf8:	b8c00007 	ldb	r3,0(r23)
  802bfc:	003bcc06 	br	801b30 <___vfprintf_internal_r+0x1fc>
  802c00:	d9014117 	ldw	r4,1284(sp)
  802c04:	08018680 	call	801868 <strlen>
  802c08:	d8814515 	stw	r2,1300(sp)
  802c0c:	100f883a 	mov	r7,r2
  802c10:	103ff70e 	bge	r2,zero,802bf0 <___vfprintf_internal_r+0x12bc>
  802c14:	d8014515 	stw	zero,1300(sp)
  802c18:	d8014615 	stw	zero,1304(sp)
  802c1c:	003de706 	br	8023bc <___vfprintf_internal_r+0xa88>
  802c20:	20c03fcc 	andi	r3,r4,255
  802c24:	00800044 	movi	r2,1
  802c28:	18802d26 	beq	r3,r2,802ce0 <___vfprintf_internal_r+0x13ac>
  802c2c:	18800e36 	bltu	r3,r2,802c68 <___vfprintf_internal_r+0x1334>
  802c30:	00800084 	movi	r2,2
  802c34:	1880fa26 	beq	r3,r2,803020 <___vfprintf_internal_r+0x16ec>
  802c38:	01002074 	movhi	r4,129
  802c3c:	213f7004 	addi	r4,r4,-576
  802c40:	08018680 	call	801868 <strlen>
  802c44:	100f883a 	mov	r7,r2
  802c48:	dcc14515 	stw	r19,1300(sp)
  802c4c:	9880010e 	bge	r19,r2,802c54 <___vfprintf_internal_r+0x1320>
  802c50:	d8814515 	stw	r2,1300(sp)
  802c54:	00802074 	movhi	r2,129
  802c58:	10bf7004 	addi	r2,r2,-576
  802c5c:	dcc14615 	stw	r19,1304(sp)
  802c60:	d8814115 	stw	r2,1284(sp)
  802c64:	003dd506 	br	8023bc <___vfprintf_internal_r+0xa88>
  802c68:	d9401904 	addi	r5,sp,100
  802c6c:	dd000f04 	addi	r20,sp,60
  802c70:	d9414115 	stw	r5,1284(sp)
  802c74:	880a977a 	slli	r5,r17,29
  802c78:	d9814117 	ldw	r6,1284(sp)
  802c7c:	8004d0fa 	srli	r2,r16,3
  802c80:	8806d0fa 	srli	r3,r17,3
  802c84:	810001cc 	andi	r4,r16,7
  802c88:	2884b03a 	or	r2,r5,r2
  802c8c:	31bfffc4 	addi	r6,r6,-1
  802c90:	21000c04 	addi	r4,r4,48
  802c94:	d9814115 	stw	r6,1284(sp)
  802c98:	10cab03a 	or	r5,r2,r3
  802c9c:	31000005 	stb	r4,0(r6)
  802ca0:	1021883a 	mov	r16,r2
  802ca4:	1823883a 	mov	r17,r3
  802ca8:	283ff21e 	bne	r5,zero,802c74 <___vfprintf_internal_r+0x1340>
  802cac:	d8c14c17 	ldw	r3,1328(sp)
  802cb0:	1880004c 	andi	r2,r3,1
  802cb4:	1005003a 	cmpeq	r2,r2,zero
  802cb8:	103db91e 	bne	r2,zero,8023a0 <___vfprintf_internal_r+0xa6c>
  802cbc:	20803fcc 	andi	r2,r4,255
  802cc0:	1080201c 	xori	r2,r2,128
  802cc4:	10bfe004 	addi	r2,r2,-128
  802cc8:	00c00c04 	movi	r3,48
  802ccc:	10fdb426 	beq	r2,r3,8023a0 <___vfprintf_internal_r+0xa6c>
  802cd0:	31bfffc4 	addi	r6,r6,-1
  802cd4:	d9814115 	stw	r6,1284(sp)
  802cd8:	30c00005 	stb	r3,0(r6)
  802cdc:	003db006 	br	8023a0 <___vfprintf_internal_r+0xa6c>
  802ce0:	88800068 	cmpgeui	r2,r17,1
  802ce4:	10002c1e 	bne	r2,zero,802d98 <___vfprintf_internal_r+0x1464>
  802ce8:	8800021e 	bne	r17,zero,802cf4 <___vfprintf_internal_r+0x13c0>
  802cec:	00800244 	movi	r2,9
  802cf0:	14002936 	bltu	r2,r16,802d98 <___vfprintf_internal_r+0x1464>
  802cf4:	d90018c4 	addi	r4,sp,99
  802cf8:	dd000f04 	addi	r20,sp,60
  802cfc:	d9014115 	stw	r4,1284(sp)
  802d00:	d9014117 	ldw	r4,1284(sp)
  802d04:	80800c04 	addi	r2,r16,48
  802d08:	20800005 	stb	r2,0(r4)
  802d0c:	003da406 	br	8023a0 <___vfprintf_internal_r+0xa6c>
  802d10:	dc400d17 	ldw	r17,52(sp)
  802d14:	07002074 	movhi	fp,129
  802d18:	e73f7784 	addi	fp,fp,-546
  802d1c:	9425883a 	add	r18,r18,r16
  802d20:	8c400044 	addi	r17,r17,1
  802d24:	008001c4 	movi	r2,7
  802d28:	1f000015 	stw	fp,0(r3)
  802d2c:	1c000115 	stw	r16,4(r3)
  802d30:	dc800e15 	stw	r18,56(sp)
  802d34:	dc400d15 	stw	r17,52(sp)
  802d38:	147de216 	blt	r2,r17,8024c4 <___vfprintf_internal_r+0xb90>
  802d3c:	18c00204 	addi	r3,r3,8
  802d40:	003c7a06 	br	801f2c <___vfprintf_internal_r+0x5f8>
  802d44:	01000084 	movi	r4,2
  802d48:	d8000405 	stb	zero,16(sp)
  802d4c:	003d8706 	br	80236c <___vfprintf_internal_r+0xa38>
  802d50:	d9814c17 	ldw	r6,1328(sp)
  802d54:	30c4703a 	and	r2,r6,r3
  802d58:	1005003a 	cmpeq	r2,r2,zero
  802d5c:	103cb926 	beq	r2,zero,802044 <___vfprintf_internal_r+0x710>
  802d60:	d9014117 	ldw	r4,1284(sp)
  802d64:	94800044 	addi	r18,r18,1
  802d68:	8c400044 	addi	r17,r17,1
  802d6c:	008001c4 	movi	r2,7
  802d70:	a9000015 	stw	r4,0(r21)
  802d74:	a8c00115 	stw	r3,4(r21)
  802d78:	dc800e15 	stw	r18,56(sp)
  802d7c:	dc400d15 	stw	r17,52(sp)
  802d80:	147e6616 	blt	r2,r17,80271c <___vfprintf_internal_r+0xde8>
  802d84:	acc00204 	addi	r19,r21,8
  802d88:	003cd706 	br	8020e8 <___vfprintf_internal_r+0x7b4>
  802d8c:	07002074 	movhi	fp,129
  802d90:	e73f7784 	addi	fp,fp,-546
  802d94:	003c4f06 	br	801ed4 <___vfprintf_internal_r+0x5a0>
  802d98:	dd000f04 	addi	r20,sp,60
  802d9c:	dc801904 	addi	r18,sp,100
  802da0:	8009883a 	mov	r4,r16
  802da4:	880b883a 	mov	r5,r17
  802da8:	01800284 	movi	r6,10
  802dac:	000f883a 	mov	r7,zero
  802db0:	080902c0 	call	80902c <__umoddi3>
  802db4:	12000c04 	addi	r8,r2,48
  802db8:	94bfffc4 	addi	r18,r18,-1
  802dbc:	8009883a 	mov	r4,r16
  802dc0:	880b883a 	mov	r5,r17
  802dc4:	01800284 	movi	r6,10
  802dc8:	000f883a 	mov	r7,zero
  802dcc:	92000005 	stb	r8,0(r18)
  802dd0:	0808a500 	call	808a50 <__udivdi3>
  802dd4:	1009883a 	mov	r4,r2
  802dd8:	1021883a 	mov	r16,r2
  802ddc:	18800068 	cmpgeui	r2,r3,1
  802de0:	1823883a 	mov	r17,r3
  802de4:	103fee1e 	bne	r2,zero,802da0 <___vfprintf_internal_r+0x146c>
  802de8:	1800021e 	bne	r3,zero,802df4 <___vfprintf_internal_r+0x14c0>
  802dec:	00800244 	movi	r2,9
  802df0:	113feb36 	bltu	r2,r4,802da0 <___vfprintf_internal_r+0x146c>
  802df4:	94bfffc4 	addi	r18,r18,-1
  802df8:	dc814115 	stw	r18,1284(sp)
  802dfc:	003fc006 	br	802d00 <___vfprintf_internal_r+0x13cc>
  802e00:	d9014c17 	ldw	r4,1328(sp)
  802e04:	2080004c 	andi	r2,r4,1
  802e08:	10009a1e 	bne	r2,zero,803074 <___vfprintf_internal_r+0x1740>
  802e0c:	d9401904 	addi	r5,sp,100
  802e10:	dd000f04 	addi	r20,sp,60
  802e14:	d9414115 	stw	r5,1284(sp)
  802e18:	003d6106 	br	8023a0 <___vfprintf_internal_r+0xa6c>
  802e1c:	d9014f17 	ldw	r4,1340(sp)
  802e20:	b00b883a 	mov	r5,r22
  802e24:	d9800c04 	addi	r6,sp,48
  802e28:	08018dc0 	call	8018dc <__sprint_r>
  802e2c:	103c791e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802e30:	dc800e17 	ldw	r18,56(sp)
  802e34:	d8c01904 	addi	r3,sp,100
  802e38:	003cff06 	br	802238 <___vfprintf_internal_r+0x904>
  802e3c:	d8c14c17 	ldw	r3,1328(sp)
  802e40:	1880040c 	andi	r2,r3,16
  802e44:	1000711e 	bne	r2,zero,80300c <___vfprintf_internal_r+0x16d8>
  802e48:	d9014c17 	ldw	r4,1328(sp)
  802e4c:	2080100c 	andi	r2,r4,64
  802e50:	10006e26 	beq	r2,zero,80300c <___vfprintf_internal_r+0x16d8>
  802e54:	3c00000b 	ldhu	r16,0(r7)
  802e58:	0023883a 	mov	r17,zero
  802e5c:	39c00104 	addi	r7,r7,4
  802e60:	d9c14015 	stw	r7,1280(sp)
  802e64:	003f0006 	br	802a68 <___vfprintf_internal_r+0x1134>
  802e68:	dc400d17 	ldw	r17,52(sp)
  802e6c:	07002074 	movhi	fp,129
  802e70:	e73f7784 	addi	fp,fp,-546
  802e74:	9425883a 	add	r18,r18,r16
  802e78:	8c400044 	addi	r17,r17,1
  802e7c:	008001c4 	movi	r2,7
  802e80:	1f000015 	stw	fp,0(r3)
  802e84:	1c000115 	stw	r16,4(r3)
  802e88:	dc800e15 	stw	r18,56(sp)
  802e8c:	dc400d15 	stw	r17,52(sp)
  802e90:	147d7616 	blt	r2,r17,80246c <___vfprintf_internal_r+0xb38>
  802e94:	18c00204 	addi	r3,r3,8
  802e98:	003d7b06 	br	802488 <___vfprintf_internal_r+0xb54>
  802e9c:	dc800e17 	ldw	r18,56(sp)
  802ea0:	dc400d17 	ldw	r17,52(sp)
  802ea4:	07002074 	movhi	fp,129
  802ea8:	e73f7b84 	addi	fp,fp,-530
  802eac:	003bc006 	br	801db0 <___vfprintf_internal_r+0x47c>
  802eb0:	d9014f17 	ldw	r4,1340(sp)
  802eb4:	b00b883a 	mov	r5,r22
  802eb8:	d9800c04 	addi	r6,sp,48
  802ebc:	08018dc0 	call	8018dc <__sprint_r>
  802ec0:	103c541e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802ec4:	dc800e17 	ldw	r18,56(sp)
  802ec8:	d8c01904 	addi	r3,sp,100
  802ecc:	003ce906 	br	802274 <___vfprintf_internal_r+0x940>
  802ed0:	3c000017 	ldw	r16,0(r7)
  802ed4:	0009883a 	mov	r4,zero
  802ed8:	39c00104 	addi	r7,r7,4
  802edc:	0023883a 	mov	r17,zero
  802ee0:	d9c14015 	stw	r7,1280(sp)
  802ee4:	d8000405 	stb	zero,16(sp)
  802ee8:	003d2006 	br	80236c <___vfprintf_internal_r+0xa38>
  802eec:	38800017 	ldw	r2,0(r7)
  802ef0:	39c00104 	addi	r7,r7,4
  802ef4:	d9c14015 	stw	r7,1280(sp)
  802ef8:	1023d7fa 	srai	r17,r2,31
  802efc:	1021883a 	mov	r16,r2
  802f00:	003d1806 	br	802364 <___vfprintf_internal_r+0xa30>
  802f04:	3c000017 	ldw	r16,0(r7)
  802f08:	01000044 	movi	r4,1
  802f0c:	39c00104 	addi	r7,r7,4
  802f10:	0023883a 	mov	r17,zero
  802f14:	d9c14015 	stw	r7,1280(sp)
  802f18:	d8000405 	stb	zero,16(sp)
  802f1c:	003d1306 	br	80236c <___vfprintf_internal_r+0xa38>
  802f20:	00802074 	movhi	r2,129
  802f24:	10bf7704 	addi	r2,r2,-548
  802f28:	94800044 	addi	r18,r18,1
  802f2c:	8c400044 	addi	r17,r17,1
  802f30:	a8800015 	stw	r2,0(r21)
  802f34:	00c00044 	movi	r3,1
  802f38:	008001c4 	movi	r2,7
  802f3c:	a8c00115 	stw	r3,4(r21)
  802f40:	dc800e15 	stw	r18,56(sp)
  802f44:	dc400d15 	stw	r17,52(sp)
  802f48:	1440ca16 	blt	r2,r17,803274 <___vfprintf_internal_r+0x1940>
  802f4c:	a8c00204 	addi	r3,r21,8
  802f50:	2000061e 	bne	r4,zero,802f6c <___vfprintf_internal_r+0x1638>
  802f54:	d9414717 	ldw	r5,1308(sp)
  802f58:	2800041e 	bne	r5,zero,802f6c <___vfprintf_internal_r+0x1638>
  802f5c:	d9814c17 	ldw	r6,1328(sp)
  802f60:	3080004c 	andi	r2,r6,1
  802f64:	1005003a 	cmpeq	r2,r2,zero
  802f68:	103bf01e 	bne	r2,zero,801f2c <___vfprintf_internal_r+0x5f8>
  802f6c:	00800044 	movi	r2,1
  802f70:	dc400d17 	ldw	r17,52(sp)
  802f74:	18800115 	stw	r2,4(r3)
  802f78:	d8814917 	ldw	r2,1316(sp)
  802f7c:	94800044 	addi	r18,r18,1
  802f80:	8c400044 	addi	r17,r17,1
  802f84:	18800015 	stw	r2,0(r3)
  802f88:	008001c4 	movi	r2,7
  802f8c:	dc800e15 	stw	r18,56(sp)
  802f90:	dc400d15 	stw	r17,52(sp)
  802f94:	1440ca16 	blt	r2,r17,8032c0 <___vfprintf_internal_r+0x198c>
  802f98:	18c00204 	addi	r3,r3,8
  802f9c:	0121c83a 	sub	r16,zero,r4
  802fa0:	0400500e 	bge	zero,r16,8030e4 <___vfprintf_internal_r+0x17b0>
  802fa4:	00800404 	movi	r2,16
  802fa8:	1400800e 	bge	r2,r16,8031ac <___vfprintf_internal_r+0x1878>
  802fac:	1027883a 	mov	r19,r2
  802fb0:	07002074 	movhi	fp,129
  802fb4:	e73f7784 	addi	fp,fp,-546
  802fb8:	050001c4 	movi	r20,7
  802fbc:	00000306 	br	802fcc <___vfprintf_internal_r+0x1698>
  802fc0:	18c00204 	addi	r3,r3,8
  802fc4:	843ffc04 	addi	r16,r16,-16
  802fc8:	9c007a0e 	bge	r19,r16,8031b4 <___vfprintf_internal_r+0x1880>
  802fcc:	94800404 	addi	r18,r18,16
  802fd0:	8c400044 	addi	r17,r17,1
  802fd4:	1f000015 	stw	fp,0(r3)
  802fd8:	1cc00115 	stw	r19,4(r3)
  802fdc:	dc800e15 	stw	r18,56(sp)
  802fe0:	dc400d15 	stw	r17,52(sp)
  802fe4:	a47ff60e 	bge	r20,r17,802fc0 <___vfprintf_internal_r+0x168c>
  802fe8:	d9014f17 	ldw	r4,1340(sp)
  802fec:	b00b883a 	mov	r5,r22
  802ff0:	d9800c04 	addi	r6,sp,48
  802ff4:	08018dc0 	call	8018dc <__sprint_r>
  802ff8:	103c061e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  802ffc:	dc800e17 	ldw	r18,56(sp)
  803000:	dc400d17 	ldw	r17,52(sp)
  803004:	d8c01904 	addi	r3,sp,100
  803008:	003fee06 	br	802fc4 <___vfprintf_internal_r+0x1690>
  80300c:	3c000017 	ldw	r16,0(r7)
  803010:	0023883a 	mov	r17,zero
  803014:	39c00104 	addi	r7,r7,4
  803018:	d9c14015 	stw	r7,1280(sp)
  80301c:	003e9206 	br	802a68 <___vfprintf_internal_r+0x1134>
  803020:	d9401904 	addi	r5,sp,100
  803024:	dd000f04 	addi	r20,sp,60
  803028:	d9414115 	stw	r5,1284(sp)
  80302c:	d9814417 	ldw	r6,1296(sp)
  803030:	880a973a 	slli	r5,r17,28
  803034:	8004d13a 	srli	r2,r16,4
  803038:	810003cc 	andi	r4,r16,15
  80303c:	3109883a 	add	r4,r6,r4
  803040:	2884b03a 	or	r2,r5,r2
  803044:	21400003 	ldbu	r5,0(r4)
  803048:	d9014117 	ldw	r4,1284(sp)
  80304c:	8806d13a 	srli	r3,r17,4
  803050:	1021883a 	mov	r16,r2
  803054:	213fffc4 	addi	r4,r4,-1
  803058:	d9014115 	stw	r4,1284(sp)
  80305c:	d9814117 	ldw	r6,1284(sp)
  803060:	10c8b03a 	or	r4,r2,r3
  803064:	1823883a 	mov	r17,r3
  803068:	31400005 	stb	r5,0(r6)
  80306c:	203fef1e 	bne	r4,zero,80302c <___vfprintf_internal_r+0x16f8>
  803070:	003ccb06 	br	8023a0 <___vfprintf_internal_r+0xa6c>
  803074:	00800c04 	movi	r2,48
  803078:	d98018c4 	addi	r6,sp,99
  80307c:	dd000f04 	addi	r20,sp,60
  803080:	d88018c5 	stb	r2,99(sp)
  803084:	d9814115 	stw	r6,1284(sp)
  803088:	003cc506 	br	8023a0 <___vfprintf_internal_r+0xa6c>
  80308c:	dc400d17 	ldw	r17,52(sp)
  803090:	07002074 	movhi	fp,129
  803094:	e73f7b84 	addi	fp,fp,-530
  803098:	003bc706 	br	801fb8 <___vfprintf_internal_r+0x684>
  80309c:	d9414c17 	ldw	r5,1328(sp)
  8030a0:	2880040c 	andi	r2,r5,16
  8030a4:	10007c26 	beq	r2,zero,803298 <___vfprintf_internal_r+0x1964>
  8030a8:	38800017 	ldw	r2,0(r7)
  8030ac:	39c00104 	addi	r7,r7,4
  8030b0:	d9c14015 	stw	r7,1280(sp)
  8030b4:	d9814b17 	ldw	r6,1324(sp)
  8030b8:	d9c14017 	ldw	r7,1280(sp)
  8030bc:	11800015 	stw	r6,0(r2)
  8030c0:	003a7806 	br	801aa4 <___vfprintf_internal_r+0x170>
  8030c4:	d9014f17 	ldw	r4,1340(sp)
  8030c8:	b00b883a 	mov	r5,r22
  8030cc:	d9800c04 	addi	r6,sp,48
  8030d0:	08018dc0 	call	8018dc <__sprint_r>
  8030d4:	103bcf1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  8030d8:	dc800e17 	ldw	r18,56(sp)
  8030dc:	dc400d17 	ldw	r17,52(sp)
  8030e0:	d8c01904 	addi	r3,sp,100
  8030e4:	d9014717 	ldw	r4,1308(sp)
  8030e8:	d9414117 	ldw	r5,1284(sp)
  8030ec:	8c400044 	addi	r17,r17,1
  8030f0:	9125883a 	add	r18,r18,r4
  8030f4:	008001c4 	movi	r2,7
  8030f8:	19400015 	stw	r5,0(r3)
  8030fc:	19000115 	stw	r4,4(r3)
  803100:	dc800e15 	stw	r18,56(sp)
  803104:	dc400d15 	stw	r17,52(sp)
  803108:	147cee16 	blt	r2,r17,8024c4 <___vfprintf_internal_r+0xb90>
  80310c:	18c00204 	addi	r3,r3,8
  803110:	003b8606 	br	801f2c <___vfprintf_internal_r+0x5f8>
  803114:	38c00017 	ldw	r3,0(r7)
  803118:	39000204 	addi	r4,r7,8
  80311c:	d9014015 	stw	r4,1280(sp)
  803120:	d8c14215 	stw	r3,1288(sp)
  803124:	39c00117 	ldw	r7,4(r7)
  803128:	d9c14315 	stw	r7,1292(sp)
  80312c:	003e2006 	br	8029b0 <___vfprintf_internal_r+0x107c>
  803130:	0005883a 	mov	r2,zero
  803134:	1409c83a 	sub	r4,r2,r16
  803138:	1105803a 	cmpltu	r2,r2,r4
  80313c:	044bc83a 	sub	r5,zero,r17
  803140:	2885c83a 	sub	r2,r5,r2
  803144:	2021883a 	mov	r16,r4
  803148:	1023883a 	mov	r17,r2
  80314c:	01000044 	movi	r4,1
  803150:	00800b44 	movi	r2,45
  803154:	d8800405 	stb	r2,16(sp)
  803158:	003c8406 	br	80236c <___vfprintf_internal_r+0xa38>
  80315c:	d9014f17 	ldw	r4,1340(sp)
  803160:	b00b883a 	mov	r5,r22
  803164:	d9800c04 	addi	r6,sp,48
  803168:	08018dc0 	call	8018dc <__sprint_r>
  80316c:	103ba91e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  803170:	dc800e17 	ldw	r18,56(sp)
  803174:	dc400d17 	ldw	r17,52(sp)
  803178:	d9000517 	ldw	r4,20(sp)
  80317c:	d9401904 	addi	r5,sp,100
  803180:	003da706 	br	802820 <___vfprintf_internal_r+0xeec>
  803184:	d9014f17 	ldw	r4,1340(sp)
  803188:	b00b883a 	mov	r5,r22
  80318c:	d9800c04 	addi	r6,sp,48
  803190:	08018dc0 	call	8018dc <__sprint_r>
  803194:	103b9f1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  803198:	dc800e17 	ldw	r18,56(sp)
  80319c:	dc400d17 	ldw	r17,52(sp)
  8031a0:	d9000517 	ldw	r4,20(sp)
  8031a4:	d8c01904 	addi	r3,sp,100
  8031a8:	003d9106 	br	8027f0 <___vfprintf_internal_r+0xebc>
  8031ac:	07002074 	movhi	fp,129
  8031b0:	e73f7784 	addi	fp,fp,-546
  8031b4:	9425883a 	add	r18,r18,r16
  8031b8:	8c400044 	addi	r17,r17,1
  8031bc:	008001c4 	movi	r2,7
  8031c0:	1f000015 	stw	fp,0(r3)
  8031c4:	1c000115 	stw	r16,4(r3)
  8031c8:	dc800e15 	stw	r18,56(sp)
  8031cc:	dc400d15 	stw	r17,52(sp)
  8031d0:	147fbc16 	blt	r2,r17,8030c4 <___vfprintf_internal_r+0x1790>
  8031d4:	18c00204 	addi	r3,r3,8
  8031d8:	003fc206 	br	8030e4 <___vfprintf_internal_r+0x17b0>
  8031dc:	d9014f17 	ldw	r4,1340(sp)
  8031e0:	b00b883a 	mov	r5,r22
  8031e4:	d9800c04 	addi	r6,sp,48
  8031e8:	08018dc0 	call	8018dc <__sprint_r>
  8031ec:	103b891e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  8031f0:	dc800e17 	ldw	r18,56(sp)
  8031f4:	d9000517 	ldw	r4,20(sp)
  8031f8:	d8c01904 	addi	r3,sp,100
  8031fc:	003d0206 	br	802608 <___vfprintf_internal_r+0xcd4>
  803200:	07002074 	movhi	fp,129
  803204:	e73f7784 	addi	fp,fp,-546
  803208:	003be406 	br	80219c <___vfprintf_internal_r+0x868>
  80320c:	00802074 	movhi	r2,129
  803210:	10bf6604 	addi	r2,r2,-616
  803214:	d8814115 	stw	r2,1284(sp)
  803218:	003df506 	br	8029f0 <___vfprintf_internal_r+0x10bc>
  80321c:	d9014217 	ldw	r4,1288(sp)
  803220:	d9414317 	ldw	r5,1292(sp)
  803224:	08083140 	call	808314 <__isnand>
  803228:	10003926 	beq	r2,zero,803310 <___vfprintf_internal_r+0x19dc>
  80322c:	d9414d17 	ldw	r5,1332(sp)
  803230:	008011c4 	movi	r2,71
  803234:	1140ce16 	blt	r2,r5,803570 <___vfprintf_internal_r+0x1c3c>
  803238:	01802074 	movhi	r6,129
  80323c:	31bf6704 	addi	r6,r6,-612
  803240:	d9814115 	stw	r6,1284(sp)
  803244:	003dea06 	br	8029f0 <___vfprintf_internal_r+0x10bc>
  803248:	d9014c17 	ldw	r4,1328(sp)
  80324c:	bdc00044 	addi	r23,r23,1
  803250:	b8c00007 	ldb	r3,0(r23)
  803254:	21000814 	ori	r4,r4,32
  803258:	d9014c15 	stw	r4,1328(sp)
  80325c:	003a3406 	br	801b30 <___vfprintf_internal_r+0x1fc>
  803260:	dcc14515 	stw	r19,1300(sp)
  803264:	98011016 	blt	r19,zero,8036a8 <___vfprintf_internal_r+0x1d74>
  803268:	980f883a 	mov	r7,r19
  80326c:	d8014615 	stw	zero,1304(sp)
  803270:	003c5206 	br	8023bc <___vfprintf_internal_r+0xa88>
  803274:	d9014f17 	ldw	r4,1340(sp)
  803278:	b00b883a 	mov	r5,r22
  80327c:	d9800c04 	addi	r6,sp,48
  803280:	08018dc0 	call	8018dc <__sprint_r>
  803284:	103b631e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  803288:	dc800e17 	ldw	r18,56(sp)
  80328c:	d9000517 	ldw	r4,20(sp)
  803290:	d8c01904 	addi	r3,sp,100
  803294:	003f2e06 	br	802f50 <___vfprintf_internal_r+0x161c>
  803298:	d8c14c17 	ldw	r3,1328(sp)
  80329c:	1880100c 	andi	r2,r3,64
  8032a0:	1000a026 	beq	r2,zero,803524 <___vfprintf_internal_r+0x1bf0>
  8032a4:	38800017 	ldw	r2,0(r7)
  8032a8:	39c00104 	addi	r7,r7,4
  8032ac:	d9c14015 	stw	r7,1280(sp)
  8032b0:	d9014b17 	ldw	r4,1324(sp)
  8032b4:	d9c14017 	ldw	r7,1280(sp)
  8032b8:	1100000d 	sth	r4,0(r2)
  8032bc:	0039f906 	br	801aa4 <___vfprintf_internal_r+0x170>
  8032c0:	d9014f17 	ldw	r4,1340(sp)
  8032c4:	b00b883a 	mov	r5,r22
  8032c8:	d9800c04 	addi	r6,sp,48
  8032cc:	08018dc0 	call	8018dc <__sprint_r>
  8032d0:	103b501e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  8032d4:	dc800e17 	ldw	r18,56(sp)
  8032d8:	dc400d17 	ldw	r17,52(sp)
  8032dc:	d9000517 	ldw	r4,20(sp)
  8032e0:	d8c01904 	addi	r3,sp,100
  8032e4:	003f2d06 	br	802f9c <___vfprintf_internal_r+0x1668>
  8032e8:	00800184 	movi	r2,6
  8032ec:	14c09a36 	bltu	r2,r19,803558 <___vfprintf_internal_r+0x1c24>
  8032f0:	dcc14515 	stw	r19,1300(sp)
  8032f4:	9800010e 	bge	r19,zero,8032fc <___vfprintf_internal_r+0x19c8>
  8032f8:	d8014515 	stw	zero,1300(sp)
  8032fc:	00802074 	movhi	r2,129
  803300:	10bf6904 	addi	r2,r2,-604
  803304:	980f883a 	mov	r7,r19
  803308:	d8814115 	stw	r2,1284(sp)
  80330c:	003a7806 	br	801cf0 <___vfprintf_internal_r+0x3bc>
  803310:	00bfffc4 	movi	r2,-1
  803314:	9880e226 	beq	r19,r2,8036a0 <___vfprintf_internal_r+0x1d6c>
  803318:	d9414d17 	ldw	r5,1332(sp)
  80331c:	008019c4 	movi	r2,103
  803320:	2880dc26 	beq	r5,r2,803694 <___vfprintf_internal_r+0x1d60>
  803324:	008011c4 	movi	r2,71
  803328:	2880da26 	beq	r5,r2,803694 <___vfprintf_internal_r+0x1d60>
  80332c:	d9414c17 	ldw	r5,1328(sp)
  803330:	d9014317 	ldw	r4,1292(sp)
  803334:	d9814217 	ldw	r6,1288(sp)
  803338:	29404014 	ori	r5,r5,256
  80333c:	d9414c15 	stw	r5,1328(sp)
  803340:	2000cc16 	blt	r4,zero,803674 <___vfprintf_internal_r+0x1d40>
  803344:	3021883a 	mov	r16,r6
  803348:	2023883a 	mov	r17,r4
  80334c:	0039883a 	mov	fp,zero
  803350:	d9414d17 	ldw	r5,1332(sp)
  803354:	00801984 	movi	r2,102
  803358:	2880b726 	beq	r5,r2,803638 <___vfprintf_internal_r+0x1d04>
  80335c:	00801184 	movi	r2,70
  803360:	2880b526 	beq	r5,r2,803638 <___vfprintf_internal_r+0x1d04>
  803364:	00801944 	movi	r2,101
  803368:	2880c826 	beq	r5,r2,80368c <___vfprintf_internal_r+0x1d58>
  80336c:	00801144 	movi	r2,69
  803370:	2880c626 	beq	r5,r2,80368c <___vfprintf_internal_r+0x1d58>
  803374:	9829883a 	mov	r20,r19
  803378:	d9014f17 	ldw	r4,1340(sp)
  80337c:	d8800504 	addi	r2,sp,20
  803380:	880d883a 	mov	r6,r17
  803384:	d8800115 	stw	r2,4(sp)
  803388:	d8c00604 	addi	r3,sp,24
  80338c:	d8800704 	addi	r2,sp,28
  803390:	800b883a 	mov	r5,r16
  803394:	01c00084 	movi	r7,2
  803398:	d8c00215 	stw	r3,8(sp)
  80339c:	d8800315 	stw	r2,12(sp)
  8033a0:	dd000015 	stw	r20,0(sp)
  8033a4:	0803b580 	call	803b58 <_dtoa_r>
  8033a8:	d9814d17 	ldw	r6,1332(sp)
  8033ac:	d8814115 	stw	r2,1284(sp)
  8033b0:	008019c4 	movi	r2,103
  8033b4:	30809526 	beq	r6,r2,80360c <___vfprintf_internal_r+0x1cd8>
  8033b8:	d8c14d17 	ldw	r3,1332(sp)
  8033bc:	008011c4 	movi	r2,71
  8033c0:	18809226 	beq	r3,r2,80360c <___vfprintf_internal_r+0x1cd8>
  8033c4:	d9414117 	ldw	r5,1284(sp)
  8033c8:	d9814d17 	ldw	r6,1332(sp)
  8033cc:	00801984 	movi	r2,102
  8033d0:	2d25883a 	add	r18,r5,r20
  8033d4:	30808626 	beq	r6,r2,8035f0 <___vfprintf_internal_r+0x1cbc>
  8033d8:	00801184 	movi	r2,70
  8033dc:	30808426 	beq	r6,r2,8035f0 <___vfprintf_internal_r+0x1cbc>
  8033e0:	000d883a 	mov	r6,zero
  8033e4:	000f883a 	mov	r7,zero
  8033e8:	880b883a 	mov	r5,r17
  8033ec:	8009883a 	mov	r4,r16
  8033f0:	080a0fc0 	call	80a0fc <__eqdf2>
  8033f4:	1000751e 	bne	r2,zero,8035cc <___vfprintf_internal_r+0x1c98>
  8033f8:	9005883a 	mov	r2,r18
  8033fc:	dc800715 	stw	r18,28(sp)
  803400:	d9014117 	ldw	r4,1284(sp)
  803404:	d9414d17 	ldw	r5,1332(sp)
  803408:	00c019c4 	movi	r3,103
  80340c:	1125c83a 	sub	r18,r2,r4
  803410:	28c06826 	beq	r5,r3,8035b4 <___vfprintf_internal_r+0x1c80>
  803414:	008011c4 	movi	r2,71
  803418:	28806626 	beq	r5,r2,8035b4 <___vfprintf_internal_r+0x1c80>
  80341c:	d9000517 	ldw	r4,20(sp)
  803420:	d8c14d17 	ldw	r3,1332(sp)
  803424:	00801944 	movi	r2,101
  803428:	10c05516 	blt	r2,r3,803580 <___vfprintf_internal_r+0x1c4c>
  80342c:	213fffc4 	addi	r4,r4,-1
  803430:	d9000515 	stw	r4,20(sp)
  803434:	d8c00805 	stb	r3,32(sp)
  803438:	2021883a 	mov	r16,r4
  80343c:	2000c116 	blt	r4,zero,803744 <___vfprintf_internal_r+0x1e10>
  803440:	00800ac4 	movi	r2,43
  803444:	d8800845 	stb	r2,33(sp)
  803448:	00800244 	movi	r2,9
  80344c:	1400af0e 	bge	r2,r16,80370c <___vfprintf_internal_r+0x1dd8>
  803450:	1027883a 	mov	r19,r2
  803454:	dc400b84 	addi	r17,sp,46
  803458:	8009883a 	mov	r4,r16
  80345c:	01400284 	movi	r5,10
  803460:	080a7e40 	call	80a7e4 <__modsi3>
  803464:	10800c04 	addi	r2,r2,48
  803468:	8c7fffc4 	addi	r17,r17,-1
  80346c:	8009883a 	mov	r4,r16
  803470:	01400284 	movi	r5,10
  803474:	88800005 	stb	r2,0(r17)
  803478:	080a7840 	call	80a784 <__divsi3>
  80347c:	1021883a 	mov	r16,r2
  803480:	98bff516 	blt	r19,r2,803458 <___vfprintf_internal_r+0x1b24>
  803484:	10c00c04 	addi	r3,r2,48
  803488:	d88009c4 	addi	r2,sp,39
  80348c:	108001c4 	addi	r2,r2,7
  803490:	897fffc4 	addi	r5,r17,-1
  803494:	88ffffc5 	stb	r3,-1(r17)
  803498:	2880a72e 	bgeu	r5,r2,803738 <___vfprintf_internal_r+0x1e04>
  80349c:	1009883a 	mov	r4,r2
  8034a0:	d9800804 	addi	r6,sp,32
  8034a4:	d8c00884 	addi	r3,sp,34
  8034a8:	28800003 	ldbu	r2,0(r5)
  8034ac:	29400044 	addi	r5,r5,1
  8034b0:	18800005 	stb	r2,0(r3)
  8034b4:	18c00044 	addi	r3,r3,1
  8034b8:	293ffb36 	bltu	r5,r4,8034a8 <___vfprintf_internal_r+0x1b74>
  8034bc:	1987c83a 	sub	r3,r3,r6
  8034c0:	00800044 	movi	r2,1
  8034c4:	d8c14815 	stw	r3,1312(sp)
  8034c8:	90cf883a 	add	r7,r18,r3
  8034cc:	1480960e 	bge	r2,r18,803728 <___vfprintf_internal_r+0x1df4>
  8034d0:	39c00044 	addi	r7,r7,1
  8034d4:	d9c14515 	stw	r7,1300(sp)
  8034d8:	38003416 	blt	r7,zero,8035ac <___vfprintf_internal_r+0x1c78>
  8034dc:	e0803fcc 	andi	r2,fp,255
  8034e0:	1080201c 	xori	r2,r2,128
  8034e4:	10bfe004 	addi	r2,r2,-128
  8034e8:	10004e26 	beq	r2,zero,803624 <___vfprintf_internal_r+0x1cf0>
  8034ec:	00800b44 	movi	r2,45
  8034f0:	dc814715 	stw	r18,1308(sp)
  8034f4:	d8014615 	stw	zero,1304(sp)
  8034f8:	d8800405 	stb	r2,16(sp)
  8034fc:	003bb106 	br	8023c4 <___vfprintf_internal_r+0xa90>
  803500:	00800b44 	movi	r2,45
  803504:	d8800405 	stb	r2,16(sp)
  803508:	003d3306 	br	8029d8 <___vfprintf_internal_r+0x10a4>
  80350c:	d9014f17 	ldw	r4,1340(sp)
  803510:	b00b883a 	mov	r5,r22
  803514:	d9800c04 	addi	r6,sp,48
  803518:	08018dc0 	call	8018dc <__sprint_r>
  80351c:	103abd1e 	bne	r2,zero,802014 <___vfprintf_internal_r+0x6e0>
  803520:	003abb06 	br	802010 <___vfprintf_internal_r+0x6dc>
  803524:	38800017 	ldw	r2,0(r7)
  803528:	39c00104 	addi	r7,r7,4
  80352c:	d9c14015 	stw	r7,1280(sp)
  803530:	d9414b17 	ldw	r5,1324(sp)
  803534:	d9c14017 	ldw	r7,1280(sp)
  803538:	11400015 	stw	r5,0(r2)
  80353c:	00395906 	br	801aa4 <___vfprintf_internal_r+0x170>
  803540:	980f883a 	mov	r7,r19
  803544:	dcc14515 	stw	r19,1300(sp)
  803548:	d8014615 	stw	zero,1304(sp)
  80354c:	003b9b06 	br	8023bc <___vfprintf_internal_r+0xa88>
  803550:	0027883a 	mov	r19,zero
  803554:	00397806 	br	801b38 <___vfprintf_internal_r+0x204>
  803558:	00c02074 	movhi	r3,129
  80355c:	18ff6904 	addi	r3,r3,-604
  803560:	100f883a 	mov	r7,r2
  803564:	d8814515 	stw	r2,1300(sp)
  803568:	d8c14115 	stw	r3,1284(sp)
  80356c:	0039e006 	br	801cf0 <___vfprintf_internal_r+0x3bc>
  803570:	00802074 	movhi	r2,129
  803574:	10bf6804 	addi	r2,r2,-608
  803578:	d8814115 	stw	r2,1284(sp)
  80357c:	003d1c06 	br	8029f0 <___vfprintf_internal_r+0x10bc>
  803580:	d9414d17 	ldw	r5,1332(sp)
  803584:	00801984 	movi	r2,102
  803588:	28804926 	beq	r5,r2,8036b0 <___vfprintf_internal_r+0x1d7c>
  80358c:	200f883a 	mov	r7,r4
  803590:	24805716 	blt	r4,r18,8036f0 <___vfprintf_internal_r+0x1dbc>
  803594:	d9414c17 	ldw	r5,1328(sp)
  803598:	2880004c 	andi	r2,r5,1
  80359c:	10000126 	beq	r2,zero,8035a4 <___vfprintf_internal_r+0x1c70>
  8035a0:	21c00044 	addi	r7,r4,1
  8035a4:	d9c14515 	stw	r7,1300(sp)
  8035a8:	383fcc0e 	bge	r7,zero,8034dc <___vfprintf_internal_r+0x1ba8>
  8035ac:	d8014515 	stw	zero,1300(sp)
  8035b0:	003fca06 	br	8034dc <___vfprintf_internal_r+0x1ba8>
  8035b4:	d9000517 	ldw	r4,20(sp)
  8035b8:	00bfff04 	movi	r2,-4
  8035bc:	1100480e 	bge	r2,r4,8036e0 <___vfprintf_internal_r+0x1dac>
  8035c0:	99004716 	blt	r19,r4,8036e0 <___vfprintf_internal_r+0x1dac>
  8035c4:	d8c14d15 	stw	r3,1332(sp)
  8035c8:	003ff006 	br	80358c <___vfprintf_internal_r+0x1c58>
  8035cc:	d8800717 	ldw	r2,28(sp)
  8035d0:	14bf8b2e 	bgeu	r2,r18,803400 <___vfprintf_internal_r+0x1acc>
  8035d4:	9007883a 	mov	r3,r18
  8035d8:	01000c04 	movi	r4,48
  8035dc:	11000005 	stb	r4,0(r2)
  8035e0:	10800044 	addi	r2,r2,1
  8035e4:	d8800715 	stw	r2,28(sp)
  8035e8:	18bffc1e 	bne	r3,r2,8035dc <___vfprintf_internal_r+0x1ca8>
  8035ec:	003f8406 	br	803400 <___vfprintf_internal_r+0x1acc>
  8035f0:	d8814117 	ldw	r2,1284(sp)
  8035f4:	10c00007 	ldb	r3,0(r2)
  8035f8:	00800c04 	movi	r2,48
  8035fc:	18805b26 	beq	r3,r2,80376c <___vfprintf_internal_r+0x1e38>
  803600:	d9000517 	ldw	r4,20(sp)
  803604:	9125883a 	add	r18,r18,r4
  803608:	003f7506 	br	8033e0 <___vfprintf_internal_r+0x1aac>
  80360c:	d9014c17 	ldw	r4,1328(sp)
  803610:	2080004c 	andi	r2,r4,1
  803614:	1005003a 	cmpeq	r2,r2,zero
  803618:	103f6a26 	beq	r2,zero,8033c4 <___vfprintf_internal_r+0x1a90>
  80361c:	d8800717 	ldw	r2,28(sp)
  803620:	003f7706 	br	803400 <___vfprintf_internal_r+0x1acc>
  803624:	d9c14515 	stw	r7,1300(sp)
  803628:	38004d16 	blt	r7,zero,803760 <___vfprintf_internal_r+0x1e2c>
  80362c:	dc814715 	stw	r18,1308(sp)
  803630:	d8014615 	stw	zero,1304(sp)
  803634:	003b6106 	br	8023bc <___vfprintf_internal_r+0xa88>
  803638:	d9014f17 	ldw	r4,1340(sp)
  80363c:	d8800504 	addi	r2,sp,20
  803640:	d8800115 	stw	r2,4(sp)
  803644:	d8c00604 	addi	r3,sp,24
  803648:	d8800704 	addi	r2,sp,28
  80364c:	800b883a 	mov	r5,r16
  803650:	880d883a 	mov	r6,r17
  803654:	01c000c4 	movi	r7,3
  803658:	d8c00215 	stw	r3,8(sp)
  80365c:	d8800315 	stw	r2,12(sp)
  803660:	dcc00015 	stw	r19,0(sp)
  803664:	9829883a 	mov	r20,r19
  803668:	0803b580 	call	803b58 <_dtoa_r>
  80366c:	d8814115 	stw	r2,1284(sp)
  803670:	003f5106 	br	8033b8 <___vfprintf_internal_r+0x1a84>
  803674:	d8c14217 	ldw	r3,1288(sp)
  803678:	d9014317 	ldw	r4,1292(sp)
  80367c:	07000b44 	movi	fp,45
  803680:	1821883a 	mov	r16,r3
  803684:	2460003c 	xorhi	r17,r4,32768
  803688:	003f3106 	br	803350 <___vfprintf_internal_r+0x1a1c>
  80368c:	9d000044 	addi	r20,r19,1
  803690:	003f3906 	br	803378 <___vfprintf_internal_r+0x1a44>
  803694:	983f251e 	bne	r19,zero,80332c <___vfprintf_internal_r+0x19f8>
  803698:	04c00044 	movi	r19,1
  80369c:	003f2306 	br	80332c <___vfprintf_internal_r+0x19f8>
  8036a0:	04c00184 	movi	r19,6
  8036a4:	003f2106 	br	80332c <___vfprintf_internal_r+0x19f8>
  8036a8:	d8014515 	stw	zero,1300(sp)
  8036ac:	003eee06 	br	803268 <___vfprintf_internal_r+0x1934>
  8036b0:	200f883a 	mov	r7,r4
  8036b4:	0100370e 	bge	zero,r4,803794 <___vfprintf_internal_r+0x1e60>
  8036b8:	9800031e 	bne	r19,zero,8036c8 <___vfprintf_internal_r+0x1d94>
  8036bc:	d9814c17 	ldw	r6,1328(sp)
  8036c0:	3080004c 	andi	r2,r6,1
  8036c4:	103fb726 	beq	r2,zero,8035a4 <___vfprintf_internal_r+0x1c70>
  8036c8:	20800044 	addi	r2,r4,1
  8036cc:	98a7883a 	add	r19,r19,r2
  8036d0:	dcc14515 	stw	r19,1300(sp)
  8036d4:	980f883a 	mov	r7,r19
  8036d8:	983f800e 	bge	r19,zero,8034dc <___vfprintf_internal_r+0x1ba8>
  8036dc:	003fb306 	br	8035ac <___vfprintf_internal_r+0x1c78>
  8036e0:	d9814d17 	ldw	r6,1332(sp)
  8036e4:	31bfff84 	addi	r6,r6,-2
  8036e8:	d9814d15 	stw	r6,1332(sp)
  8036ec:	003f4c06 	br	803420 <___vfprintf_internal_r+0x1aec>
  8036f0:	0100180e 	bge	zero,r4,803754 <___vfprintf_internal_r+0x1e20>
  8036f4:	00800044 	movi	r2,1
  8036f8:	1485883a 	add	r2,r2,r18
  8036fc:	d8814515 	stw	r2,1300(sp)
  803700:	100f883a 	mov	r7,r2
  803704:	103f750e 	bge	r2,zero,8034dc <___vfprintf_internal_r+0x1ba8>
  803708:	003fa806 	br	8035ac <___vfprintf_internal_r+0x1c78>
  80370c:	80c00c04 	addi	r3,r16,48
  803710:	00800c04 	movi	r2,48
  803714:	d8c008c5 	stb	r3,35(sp)
  803718:	d9800804 	addi	r6,sp,32
  80371c:	d8c00904 	addi	r3,sp,36
  803720:	d8800885 	stb	r2,34(sp)
  803724:	003f6506 	br	8034bc <___vfprintf_internal_r+0x1b88>
  803728:	d9014c17 	ldw	r4,1328(sp)
  80372c:	2084703a 	and	r2,r4,r2
  803730:	103f9c26 	beq	r2,zero,8035a4 <___vfprintf_internal_r+0x1c70>
  803734:	003f6606 	br	8034d0 <___vfprintf_internal_r+0x1b9c>
  803738:	d9800804 	addi	r6,sp,32
  80373c:	d8c00884 	addi	r3,sp,34
  803740:	003f5e06 	br	8034bc <___vfprintf_internal_r+0x1b88>
  803744:	00800b44 	movi	r2,45
  803748:	0121c83a 	sub	r16,zero,r4
  80374c:	d8800845 	stb	r2,33(sp)
  803750:	003f3d06 	br	803448 <___vfprintf_internal_r+0x1b14>
  803754:	00800084 	movi	r2,2
  803758:	1105c83a 	sub	r2,r2,r4
  80375c:	003fe606 	br	8036f8 <___vfprintf_internal_r+0x1dc4>
  803760:	d8014515 	stw	zero,1300(sp)
  803764:	dc814715 	stw	r18,1308(sp)
  803768:	003fb106 	br	803630 <___vfprintf_internal_r+0x1cfc>
  80376c:	000d883a 	mov	r6,zero
  803770:	000f883a 	mov	r7,zero
  803774:	8009883a 	mov	r4,r16
  803778:	880b883a 	mov	r5,r17
  80377c:	080a1840 	call	80a184 <__nedf2>
  803780:	103f9f26 	beq	r2,zero,803600 <___vfprintf_internal_r+0x1ccc>
  803784:	00800044 	movi	r2,1
  803788:	1509c83a 	sub	r4,r2,r20
  80378c:	d9000515 	stw	r4,20(sp)
  803790:	003f9b06 	br	803600 <___vfprintf_internal_r+0x1ccc>
  803794:	98000d1e 	bne	r19,zero,8037cc <___vfprintf_internal_r+0x1e98>
  803798:	d8c14c17 	ldw	r3,1328(sp)
  80379c:	1880004c 	andi	r2,r3,1
  8037a0:	10000a1e 	bne	r2,zero,8037cc <___vfprintf_internal_r+0x1e98>
  8037a4:	01000044 	movi	r4,1
  8037a8:	200f883a 	mov	r7,r4
  8037ac:	d9014515 	stw	r4,1300(sp)
  8037b0:	003f4a06 	br	8034dc <___vfprintf_internal_r+0x1ba8>
  8037b4:	3cc00017 	ldw	r19,0(r7)
  8037b8:	39c00104 	addi	r7,r7,4
  8037bc:	983d0e0e 	bge	r19,zero,802bf8 <___vfprintf_internal_r+0x12c4>
  8037c0:	b8c00007 	ldb	r3,0(r23)
  8037c4:	04ffffc4 	movi	r19,-1
  8037c8:	0038d906 	br	801b30 <___vfprintf_internal_r+0x1fc>
  8037cc:	9cc00084 	addi	r19,r19,2
  8037d0:	dcc14515 	stw	r19,1300(sp)
  8037d4:	980f883a 	mov	r7,r19
  8037d8:	983f400e 	bge	r19,zero,8034dc <___vfprintf_internal_r+0x1ba8>
  8037dc:	003f7306 	br	8035ac <___vfprintf_internal_r+0x1c78>

008037e0 <__vfprintf_internal>:
  8037e0:	00802074 	movhi	r2,129
  8037e4:	1086c704 	addi	r2,r2,6940
  8037e8:	2013883a 	mov	r9,r4
  8037ec:	11000017 	ldw	r4,0(r2)
  8037f0:	2805883a 	mov	r2,r5
  8037f4:	300f883a 	mov	r7,r6
  8037f8:	480b883a 	mov	r5,r9
  8037fc:	100d883a 	mov	r6,r2
  803800:	08019341 	jmpi	801934 <___vfprintf_internal_r>

00803804 <__swsetup_r>:
  803804:	00802074 	movhi	r2,129
  803808:	1086c704 	addi	r2,r2,6940
  80380c:	10c00017 	ldw	r3,0(r2)
  803810:	defffd04 	addi	sp,sp,-12
  803814:	dc400115 	stw	r17,4(sp)
  803818:	dc000015 	stw	r16,0(sp)
  80381c:	dfc00215 	stw	ra,8(sp)
  803820:	2023883a 	mov	r17,r4
  803824:	2821883a 	mov	r16,r5
  803828:	18000226 	beq	r3,zero,803834 <__swsetup_r+0x30>
  80382c:	18800e17 	ldw	r2,56(r3)
  803830:	10001f26 	beq	r2,zero,8038b0 <__swsetup_r+0xac>
  803834:	8100030b 	ldhu	r4,12(r16)
  803838:	2080020c 	andi	r2,r4,8
  80383c:	10002826 	beq	r2,zero,8038e0 <__swsetup_r+0xdc>
  803840:	81400417 	ldw	r5,16(r16)
  803844:	28001d26 	beq	r5,zero,8038bc <__swsetup_r+0xb8>
  803848:	2080004c 	andi	r2,r4,1
  80384c:	1005003a 	cmpeq	r2,r2,zero
  803850:	10000b26 	beq	r2,zero,803880 <__swsetup_r+0x7c>
  803854:	2080008c 	andi	r2,r4,2
  803858:	10001226 	beq	r2,zero,8038a4 <__swsetup_r+0xa0>
  80385c:	0005883a 	mov	r2,zero
  803860:	80800215 	stw	r2,8(r16)
  803864:	28000b26 	beq	r5,zero,803894 <__swsetup_r+0x90>
  803868:	0005883a 	mov	r2,zero
  80386c:	dfc00217 	ldw	ra,8(sp)
  803870:	dc400117 	ldw	r17,4(sp)
  803874:	dc000017 	ldw	r16,0(sp)
  803878:	dec00304 	addi	sp,sp,12
  80387c:	f800283a 	ret
  803880:	80800517 	ldw	r2,20(r16)
  803884:	80000215 	stw	zero,8(r16)
  803888:	0085c83a 	sub	r2,zero,r2
  80388c:	80800615 	stw	r2,24(r16)
  803890:	283ff51e 	bne	r5,zero,803868 <__swsetup_r+0x64>
  803894:	2080200c 	andi	r2,r4,128
  803898:	103ff326 	beq	r2,zero,803868 <__swsetup_r+0x64>
  80389c:	00bfffc4 	movi	r2,-1
  8038a0:	003ff206 	br	80386c <__swsetup_r+0x68>
  8038a4:	80800517 	ldw	r2,20(r16)
  8038a8:	80800215 	stw	r2,8(r16)
  8038ac:	003fed06 	br	803864 <__swsetup_r+0x60>
  8038b0:	1809883a 	mov	r4,r3
  8038b4:	08053a40 	call	8053a4 <__sinit>
  8038b8:	003fde06 	br	803834 <__swsetup_r+0x30>
  8038bc:	20c0a00c 	andi	r3,r4,640
  8038c0:	00808004 	movi	r2,512
  8038c4:	18bfe026 	beq	r3,r2,803848 <__swsetup_r+0x44>
  8038c8:	8809883a 	mov	r4,r17
  8038cc:	800b883a 	mov	r5,r16
  8038d0:	080611c0 	call	80611c <__smakebuf_r>
  8038d4:	8100030b 	ldhu	r4,12(r16)
  8038d8:	81400417 	ldw	r5,16(r16)
  8038dc:	003fda06 	br	803848 <__swsetup_r+0x44>
  8038e0:	2080040c 	andi	r2,r4,16
  8038e4:	103fed26 	beq	r2,zero,80389c <__swsetup_r+0x98>
  8038e8:	2080010c 	andi	r2,r4,4
  8038ec:	10001226 	beq	r2,zero,803938 <__swsetup_r+0x134>
  8038f0:	81400c17 	ldw	r5,48(r16)
  8038f4:	28000526 	beq	r5,zero,80390c <__swsetup_r+0x108>
  8038f8:	80801004 	addi	r2,r16,64
  8038fc:	28800226 	beq	r5,r2,803908 <__swsetup_r+0x104>
  803900:	8809883a 	mov	r4,r17
  803904:	08057280 	call	805728 <_free_r>
  803908:	80000c15 	stw	zero,48(r16)
  80390c:	8080030b 	ldhu	r2,12(r16)
  803910:	81400417 	ldw	r5,16(r16)
  803914:	80000115 	stw	zero,4(r16)
  803918:	10bff6cc 	andi	r2,r2,65499
  80391c:	8080030d 	sth	r2,12(r16)
  803920:	81400015 	stw	r5,0(r16)
  803924:	8080030b 	ldhu	r2,12(r16)
  803928:	10800214 	ori	r2,r2,8
  80392c:	113fffcc 	andi	r4,r2,65535
  803930:	8080030d 	sth	r2,12(r16)
  803934:	003fc306 	br	803844 <__swsetup_r+0x40>
  803938:	81400417 	ldw	r5,16(r16)
  80393c:	003ff906 	br	803924 <__swsetup_r+0x120>

00803940 <quorem>:
  803940:	28c00417 	ldw	r3,16(r5)
  803944:	20800417 	ldw	r2,16(r4)
  803948:	defff604 	addi	sp,sp,-40
  80394c:	ddc00715 	stw	r23,28(sp)
  803950:	dd400515 	stw	r21,20(sp)
  803954:	dfc00915 	stw	ra,36(sp)
  803958:	df000815 	stw	fp,32(sp)
  80395c:	dd800615 	stw	r22,24(sp)
  803960:	dd000415 	stw	r20,16(sp)
  803964:	dcc00315 	stw	r19,12(sp)
  803968:	dc800215 	stw	r18,8(sp)
  80396c:	dc400115 	stw	r17,4(sp)
  803970:	dc000015 	stw	r16,0(sp)
  803974:	202f883a 	mov	r23,r4
  803978:	282b883a 	mov	r21,r5
  80397c:	10c07416 	blt	r2,r3,803b50 <quorem+0x210>
  803980:	1c7fffc4 	addi	r17,r3,-1
  803984:	8c45883a 	add	r2,r17,r17
  803988:	1085883a 	add	r2,r2,r2
  80398c:	2c000504 	addi	r16,r5,20
  803990:	24c00504 	addi	r19,r4,20
  803994:	14ed883a 	add	r22,r2,r19
  803998:	80a5883a 	add	r18,r16,r2
  80399c:	b7000017 	ldw	fp,0(r22)
  8039a0:	91400017 	ldw	r5,0(r18)
  8039a4:	e009883a 	mov	r4,fp
  8039a8:	29400044 	addi	r5,r5,1
  8039ac:	080a8440 	call	80a844 <__udivsi3>
  8039b0:	1029883a 	mov	r20,r2
  8039b4:	10003c1e 	bne	r2,zero,803aa8 <quorem+0x168>
  8039b8:	a80b883a 	mov	r5,r21
  8039bc:	b809883a 	mov	r4,r23
  8039c0:	0806e480 	call	806e48 <__mcmp>
  8039c4:	10002b16 	blt	r2,zero,803a74 <quorem+0x134>
  8039c8:	a5000044 	addi	r20,r20,1
  8039cc:	980f883a 	mov	r7,r19
  8039d0:	0011883a 	mov	r8,zero
  8039d4:	0009883a 	mov	r4,zero
  8039d8:	81400017 	ldw	r5,0(r16)
  8039dc:	38c00017 	ldw	r3,0(r7)
  8039e0:	84000104 	addi	r16,r16,4
  8039e4:	28bfffcc 	andi	r2,r5,65535
  8039e8:	2085883a 	add	r2,r4,r2
  8039ec:	11bfffcc 	andi	r6,r2,65535
  8039f0:	193fffcc 	andi	r4,r3,65535
  8039f4:	1004d43a 	srli	r2,r2,16
  8039f8:	280ad43a 	srli	r5,r5,16
  8039fc:	2189c83a 	sub	r4,r4,r6
  803a00:	2209883a 	add	r4,r4,r8
  803a04:	1806d43a 	srli	r3,r3,16
  803a08:	288b883a 	add	r5,r5,r2
  803a0c:	200dd43a 	srai	r6,r4,16
  803a10:	28bfffcc 	andi	r2,r5,65535
  803a14:	1887c83a 	sub	r3,r3,r2
  803a18:	1987883a 	add	r3,r3,r6
  803a1c:	3900000d 	sth	r4,0(r7)
  803a20:	38c0008d 	sth	r3,2(r7)
  803a24:	2808d43a 	srli	r4,r5,16
  803a28:	39c00104 	addi	r7,r7,4
  803a2c:	1811d43a 	srai	r8,r3,16
  803a30:	943fe92e 	bgeu	r18,r16,8039d8 <quorem+0x98>
  803a34:	8c45883a 	add	r2,r17,r17
  803a38:	1085883a 	add	r2,r2,r2
  803a3c:	9885883a 	add	r2,r19,r2
  803a40:	10c00017 	ldw	r3,0(r2)
  803a44:	18000b1e 	bne	r3,zero,803a74 <quorem+0x134>
  803a48:	113fff04 	addi	r4,r2,-4
  803a4c:	9900082e 	bgeu	r19,r4,803a70 <quorem+0x130>
  803a50:	10bfff17 	ldw	r2,-4(r2)
  803a54:	10000326 	beq	r2,zero,803a64 <quorem+0x124>
  803a58:	00000506 	br	803a70 <quorem+0x130>
  803a5c:	20800017 	ldw	r2,0(r4)
  803a60:	1000031e 	bne	r2,zero,803a70 <quorem+0x130>
  803a64:	213fff04 	addi	r4,r4,-4
  803a68:	8c7fffc4 	addi	r17,r17,-1
  803a6c:	993ffb36 	bltu	r19,r4,803a5c <quorem+0x11c>
  803a70:	bc400415 	stw	r17,16(r23)
  803a74:	a005883a 	mov	r2,r20
  803a78:	dfc00917 	ldw	ra,36(sp)
  803a7c:	df000817 	ldw	fp,32(sp)
  803a80:	ddc00717 	ldw	r23,28(sp)
  803a84:	dd800617 	ldw	r22,24(sp)
  803a88:	dd400517 	ldw	r21,20(sp)
  803a8c:	dd000417 	ldw	r20,16(sp)
  803a90:	dcc00317 	ldw	r19,12(sp)
  803a94:	dc800217 	ldw	r18,8(sp)
  803a98:	dc400117 	ldw	r17,4(sp)
  803a9c:	dc000017 	ldw	r16,0(sp)
  803aa0:	dec00a04 	addi	sp,sp,40
  803aa4:	f800283a 	ret
  803aa8:	980f883a 	mov	r7,r19
  803aac:	8011883a 	mov	r8,r16
  803ab0:	0013883a 	mov	r9,zero
  803ab4:	000d883a 	mov	r6,zero
  803ab8:	40c00017 	ldw	r3,0(r8)
  803abc:	39000017 	ldw	r4,0(r7)
  803ac0:	42000104 	addi	r8,r8,4
  803ac4:	18bfffcc 	andi	r2,r3,65535
  803ac8:	a085383a 	mul	r2,r20,r2
  803acc:	1806d43a 	srli	r3,r3,16
  803ad0:	217fffcc 	andi	r5,r4,65535
  803ad4:	3085883a 	add	r2,r6,r2
  803ad8:	11bfffcc 	andi	r6,r2,65535
  803adc:	a0c7383a 	mul	r3,r20,r3
  803ae0:	1004d43a 	srli	r2,r2,16
  803ae4:	298bc83a 	sub	r5,r5,r6
  803ae8:	2a4b883a 	add	r5,r5,r9
  803aec:	2008d43a 	srli	r4,r4,16
  803af0:	1887883a 	add	r3,r3,r2
  803af4:	280dd43a 	srai	r6,r5,16
  803af8:	18bfffcc 	andi	r2,r3,65535
  803afc:	2089c83a 	sub	r4,r4,r2
  803b00:	2189883a 	add	r4,r4,r6
  803b04:	3900008d 	sth	r4,2(r7)
  803b08:	3940000d 	sth	r5,0(r7)
  803b0c:	180cd43a 	srli	r6,r3,16
  803b10:	39c00104 	addi	r7,r7,4
  803b14:	2013d43a 	srai	r9,r4,16
  803b18:	923fe72e 	bgeu	r18,r8,803ab8 <quorem+0x178>
  803b1c:	e03fa61e 	bne	fp,zero,8039b8 <quorem+0x78>
  803b20:	b0ffff04 	addi	r3,r22,-4
  803b24:	98c0082e 	bgeu	r19,r3,803b48 <quorem+0x208>
  803b28:	b0bfff17 	ldw	r2,-4(r22)
  803b2c:	10000326 	beq	r2,zero,803b3c <quorem+0x1fc>
  803b30:	00000506 	br	803b48 <quorem+0x208>
  803b34:	18800017 	ldw	r2,0(r3)
  803b38:	1000031e 	bne	r2,zero,803b48 <quorem+0x208>
  803b3c:	18ffff04 	addi	r3,r3,-4
  803b40:	8c7fffc4 	addi	r17,r17,-1
  803b44:	98fffb36 	bltu	r19,r3,803b34 <quorem+0x1f4>
  803b48:	bc400415 	stw	r17,16(r23)
  803b4c:	003f9a06 	br	8039b8 <quorem+0x78>
  803b50:	0005883a 	mov	r2,zero
  803b54:	003fc806 	br	803a78 <quorem+0x138>

00803b58 <_dtoa_r>:
  803b58:	22001017 	ldw	r8,64(r4)
  803b5c:	deffda04 	addi	sp,sp,-152
  803b60:	dd402115 	stw	r21,132(sp)
  803b64:	dd002015 	stw	r20,128(sp)
  803b68:	dc801e15 	stw	r18,120(sp)
  803b6c:	dc401d15 	stw	r17,116(sp)
  803b70:	dfc02515 	stw	ra,148(sp)
  803b74:	df002415 	stw	fp,144(sp)
  803b78:	ddc02315 	stw	r23,140(sp)
  803b7c:	dd802215 	stw	r22,136(sp)
  803b80:	dcc01f15 	stw	r19,124(sp)
  803b84:	dc001c15 	stw	r16,112(sp)
  803b88:	d9001615 	stw	r4,88(sp)
  803b8c:	3023883a 	mov	r17,r6
  803b90:	2829883a 	mov	r20,r5
  803b94:	d9c01715 	stw	r7,92(sp)
  803b98:	dc802817 	ldw	r18,160(sp)
  803b9c:	302b883a 	mov	r21,r6
  803ba0:	40000a26 	beq	r8,zero,803bcc <_dtoa_r+0x74>
  803ba4:	20801117 	ldw	r2,68(r4)
  803ba8:	400b883a 	mov	r5,r8
  803bac:	40800115 	stw	r2,4(r8)
  803bb0:	20c01117 	ldw	r3,68(r4)
  803bb4:	00800044 	movi	r2,1
  803bb8:	10c4983a 	sll	r2,r2,r3
  803bbc:	40800215 	stw	r2,8(r8)
  803bc0:	0806cec0 	call	806cec <_Bfree>
  803bc4:	d8c01617 	ldw	r3,88(sp)
  803bc8:	18001015 	stw	zero,64(r3)
  803bcc:	8800a316 	blt	r17,zero,803e5c <_dtoa_r+0x304>
  803bd0:	90000015 	stw	zero,0(r18)
  803bd4:	a8dffc2c 	andhi	r3,r21,32752
  803bd8:	009ffc34 	movhi	r2,32752
  803bdc:	18809126 	beq	r3,r2,803e24 <_dtoa_r+0x2cc>
  803be0:	000d883a 	mov	r6,zero
  803be4:	000f883a 	mov	r7,zero
  803be8:	a009883a 	mov	r4,r20
  803bec:	a80b883a 	mov	r5,r21
  803bf0:	dd001215 	stw	r20,72(sp)
  803bf4:	dd401315 	stw	r21,76(sp)
  803bf8:	080a1840 	call	80a184 <__nedf2>
  803bfc:	1000171e 	bne	r2,zero,803c5c <_dtoa_r+0x104>
  803c00:	d9802717 	ldw	r6,156(sp)
  803c04:	00800044 	movi	r2,1
  803c08:	30800015 	stw	r2,0(r6)
  803c0c:	d8802917 	ldw	r2,164(sp)
  803c10:	10029b26 	beq	r2,zero,804680 <_dtoa_r+0xb28>
  803c14:	d9002917 	ldw	r4,164(sp)
  803c18:	00802074 	movhi	r2,129
  803c1c:	10bf7744 	addi	r2,r2,-547
  803c20:	10ffffc4 	addi	r3,r2,-1
  803c24:	20800015 	stw	r2,0(r4)
  803c28:	1805883a 	mov	r2,r3
  803c2c:	dfc02517 	ldw	ra,148(sp)
  803c30:	df002417 	ldw	fp,144(sp)
  803c34:	ddc02317 	ldw	r23,140(sp)
  803c38:	dd802217 	ldw	r22,136(sp)
  803c3c:	dd402117 	ldw	r21,132(sp)
  803c40:	dd002017 	ldw	r20,128(sp)
  803c44:	dcc01f17 	ldw	r19,124(sp)
  803c48:	dc801e17 	ldw	r18,120(sp)
  803c4c:	dc401d17 	ldw	r17,116(sp)
  803c50:	dc001c17 	ldw	r16,112(sp)
  803c54:	dec02604 	addi	sp,sp,152
  803c58:	f800283a 	ret
  803c5c:	d9001617 	ldw	r4,88(sp)
  803c60:	d9401217 	ldw	r5,72(sp)
  803c64:	d8800104 	addi	r2,sp,4
  803c68:	a80d883a 	mov	r6,r21
  803c6c:	d9c00204 	addi	r7,sp,8
  803c70:	d8800015 	stw	r2,0(sp)
  803c74:	08073280 	call	807328 <__d2b>
  803c78:	d8800715 	stw	r2,28(sp)
  803c7c:	a804d53a 	srli	r2,r21,20
  803c80:	1101ffcc 	andi	r4,r2,2047
  803c84:	20008626 	beq	r4,zero,803ea0 <_dtoa_r+0x348>
  803c88:	d8c01217 	ldw	r3,72(sp)
  803c8c:	00800434 	movhi	r2,16
  803c90:	10bfffc4 	addi	r2,r2,-1
  803c94:	ddc00117 	ldw	r23,4(sp)
  803c98:	a884703a 	and	r2,r21,r2
  803c9c:	1811883a 	mov	r8,r3
  803ca0:	124ffc34 	orhi	r9,r2,16368
  803ca4:	25bf0044 	addi	r22,r4,-1023
  803ca8:	d8000815 	stw	zero,32(sp)
  803cac:	0005883a 	mov	r2,zero
  803cb0:	00cffe34 	movhi	r3,16376
  803cb4:	480b883a 	mov	r5,r9
  803cb8:	4009883a 	mov	r4,r8
  803cbc:	180f883a 	mov	r7,r3
  803cc0:	100d883a 	mov	r6,r2
  803cc4:	08099ec0 	call	8099ec <__subdf3>
  803cc8:	0218dbf4 	movhi	r8,25455
  803ccc:	4210d844 	addi	r8,r8,17249
  803cd0:	024ff4f4 	movhi	r9,16339
  803cd4:	4a61e9c4 	addi	r9,r9,-30809
  803cd8:	480f883a 	mov	r7,r9
  803cdc:	400d883a 	mov	r6,r8
  803ce0:	180b883a 	mov	r5,r3
  803ce4:	1009883a 	mov	r4,r2
  803ce8:	0809ae00 	call	809ae0 <__muldf3>
  803cec:	0222d874 	movhi	r8,35681
  803cf0:	42322cc4 	addi	r8,r8,-14157
  803cf4:	024ff1f4 	movhi	r9,16327
  803cf8:	4a628a04 	addi	r9,r9,-30168
  803cfc:	480f883a 	mov	r7,r9
  803d00:	400d883a 	mov	r6,r8
  803d04:	180b883a 	mov	r5,r3
  803d08:	1009883a 	mov	r4,r2
  803d0c:	0809a6c0 	call	809a6c <__adddf3>
  803d10:	b009883a 	mov	r4,r22
  803d14:	1021883a 	mov	r16,r2
  803d18:	1823883a 	mov	r17,r3
  803d1c:	080a3a40 	call	80a3a4 <__floatsidf>
  803d20:	021427f4 	movhi	r8,20639
  803d24:	421e7ec4 	addi	r8,r8,31227
  803d28:	024ff4f4 	movhi	r9,16339
  803d2c:	4a5104c4 	addi	r9,r9,17427
  803d30:	480f883a 	mov	r7,r9
  803d34:	400d883a 	mov	r6,r8
  803d38:	180b883a 	mov	r5,r3
  803d3c:	1009883a 	mov	r4,r2
  803d40:	0809ae00 	call	809ae0 <__muldf3>
  803d44:	180f883a 	mov	r7,r3
  803d48:	880b883a 	mov	r5,r17
  803d4c:	100d883a 	mov	r6,r2
  803d50:	8009883a 	mov	r4,r16
  803d54:	0809a6c0 	call	809a6c <__adddf3>
  803d58:	1009883a 	mov	r4,r2
  803d5c:	180b883a 	mov	r5,r3
  803d60:	1021883a 	mov	r16,r2
  803d64:	1823883a 	mov	r17,r3
  803d68:	080a49c0 	call	80a49c <__fixdfsi>
  803d6c:	000d883a 	mov	r6,zero
  803d70:	000f883a 	mov	r7,zero
  803d74:	8009883a 	mov	r4,r16
  803d78:	880b883a 	mov	r5,r17
  803d7c:	d8800d15 	stw	r2,52(sp)
  803d80:	080a31c0 	call	80a31c <__ltdf2>
  803d84:	10031716 	blt	r2,zero,8049e4 <_dtoa_r+0xe8c>
  803d88:	d8c00d17 	ldw	r3,52(sp)
  803d8c:	00800584 	movi	r2,22
  803d90:	10c1482e 	bgeu	r2,r3,8042b4 <_dtoa_r+0x75c>
  803d94:	01000044 	movi	r4,1
  803d98:	d9000c15 	stw	r4,48(sp)
  803d9c:	bd85c83a 	sub	r2,r23,r22
  803da0:	11bfffc4 	addi	r6,r2,-1
  803da4:	30030b16 	blt	r6,zero,8049d4 <_dtoa_r+0xe7c>
  803da8:	d9800a15 	stw	r6,40(sp)
  803dac:	d8001115 	stw	zero,68(sp)
  803db0:	d8c00d17 	ldw	r3,52(sp)
  803db4:	1802ff16 	blt	r3,zero,8049b4 <_dtoa_r+0xe5c>
  803db8:	d9000a17 	ldw	r4,40(sp)
  803dbc:	d8c00915 	stw	r3,36(sp)
  803dc0:	d8001015 	stw	zero,64(sp)
  803dc4:	20c9883a 	add	r4,r4,r3
  803dc8:	d9000a15 	stw	r4,40(sp)
  803dcc:	d9001717 	ldw	r4,92(sp)
  803dd0:	00800244 	movi	r2,9
  803dd4:	11004636 	bltu	r2,r4,803ef0 <_dtoa_r+0x398>
  803dd8:	00800144 	movi	r2,5
  803ddc:	11020416 	blt	r2,r4,8045f0 <_dtoa_r+0xa98>
  803de0:	04400044 	movi	r17,1
  803de4:	d8c01717 	ldw	r3,92(sp)
  803de8:	00800144 	movi	r2,5
  803dec:	10c1ed36 	bltu	r2,r3,8045a4 <_dtoa_r+0xa4c>
  803df0:	18c5883a 	add	r2,r3,r3
  803df4:	1085883a 	add	r2,r2,r2
  803df8:	00c02034 	movhi	r3,128
  803dfc:	18cf8304 	addi	r3,r3,15884
  803e00:	10c5883a 	add	r2,r2,r3
  803e04:	11000017 	ldw	r4,0(r2)
  803e08:	2000683a 	jmp	r4
  803e0c:	00803ef8 	rdprs	r2,zero,251
  803e10:	00803ef8 	rdprs	r2,zero,251
  803e14:	008048f8 	rdprs	r2,zero,291
  803e18:	008048d0 	cmplti	r2,zero,291
  803e1c:	00804914 	movui	r2,292
  803e20:	00804920 	cmpeqi	r2,zero,292
  803e24:	d9002717 	ldw	r4,156(sp)
  803e28:	0089c3c4 	movi	r2,9999
  803e2c:	20800015 	stw	r2,0(r4)
  803e30:	a0001026 	beq	r20,zero,803e74 <_dtoa_r+0x31c>
  803e34:	00c02074 	movhi	r3,129
  803e38:	18ff8304 	addi	r3,r3,-500
  803e3c:	d9802917 	ldw	r6,164(sp)
  803e40:	303f7926 	beq	r6,zero,803c28 <_dtoa_r+0xd0>
  803e44:	188000c7 	ldb	r2,3(r3)
  803e48:	190000c4 	addi	r4,r3,3
  803e4c:	1000101e 	bne	r2,zero,803e90 <_dtoa_r+0x338>
  803e50:	d8802917 	ldw	r2,164(sp)
  803e54:	11000015 	stw	r4,0(r2)
  803e58:	003f7306 	br	803c28 <_dtoa_r+0xd0>
  803e5c:	00a00034 	movhi	r2,32768
  803e60:	10bfffc4 	addi	r2,r2,-1
  803e64:	00c00044 	movi	r3,1
  803e68:	88aa703a 	and	r21,r17,r2
  803e6c:	90c00015 	stw	r3,0(r18)
  803e70:	003f5806 	br	803bd4 <_dtoa_r+0x7c>
  803e74:	00800434 	movhi	r2,16
  803e78:	10bfffc4 	addi	r2,r2,-1
  803e7c:	a884703a 	and	r2,r21,r2
  803e80:	103fec1e 	bne	r2,zero,803e34 <_dtoa_r+0x2dc>
  803e84:	00c02074 	movhi	r3,129
  803e88:	18ff8004 	addi	r3,r3,-512
  803e8c:	003feb06 	br	803e3c <_dtoa_r+0x2e4>
  803e90:	d8802917 	ldw	r2,164(sp)
  803e94:	19000204 	addi	r4,r3,8
  803e98:	11000015 	stw	r4,0(r2)
  803e9c:	003f6206 	br	803c28 <_dtoa_r+0xd0>
  803ea0:	ddc00117 	ldw	r23,4(sp)
  803ea4:	d8800217 	ldw	r2,8(sp)
  803ea8:	01000804 	movi	r4,32
  803eac:	b8c10c84 	addi	r3,r23,1074
  803eb0:	18a3883a 	add	r17,r3,r2
  803eb4:	2441b80e 	bge	r4,r17,804598 <_dtoa_r+0xa40>
  803eb8:	00c01004 	movi	r3,64
  803ebc:	1c47c83a 	sub	r3,r3,r17
  803ec0:	88bff804 	addi	r2,r17,-32
  803ec4:	a8c6983a 	sll	r3,r21,r3
  803ec8:	a084d83a 	srl	r2,r20,r2
  803ecc:	1888b03a 	or	r4,r3,r2
  803ed0:	080a5740 	call	80a574 <__floatunsidf>
  803ed4:	1011883a 	mov	r8,r2
  803ed8:	00bf8434 	movhi	r2,65040
  803edc:	01000044 	movi	r4,1
  803ee0:	10d3883a 	add	r9,r2,r3
  803ee4:	8dbef344 	addi	r22,r17,-1075
  803ee8:	d9000815 	stw	r4,32(sp)
  803eec:	003f6f06 	br	803cac <_dtoa_r+0x154>
  803ef0:	d8001715 	stw	zero,92(sp)
  803ef4:	04400044 	movi	r17,1
  803ef8:	00bfffc4 	movi	r2,-1
  803efc:	00c00044 	movi	r3,1
  803f00:	d8800e15 	stw	r2,56(sp)
  803f04:	d8002615 	stw	zero,152(sp)
  803f08:	d8800f15 	stw	r2,60(sp)
  803f0c:	d8c00b15 	stw	r3,44(sp)
  803f10:	1021883a 	mov	r16,r2
  803f14:	d8801617 	ldw	r2,88(sp)
  803f18:	10001115 	stw	zero,68(r2)
  803f1c:	d8801617 	ldw	r2,88(sp)
  803f20:	11401117 	ldw	r5,68(r2)
  803f24:	1009883a 	mov	r4,r2
  803f28:	080726c0 	call	80726c <_Balloc>
  803f2c:	d8c01617 	ldw	r3,88(sp)
  803f30:	d8800515 	stw	r2,20(sp)
  803f34:	18801015 	stw	r2,64(r3)
  803f38:	00800384 	movi	r2,14
  803f3c:	14006836 	bltu	r2,r16,8040e0 <_dtoa_r+0x588>
  803f40:	8805003a 	cmpeq	r2,r17,zero
  803f44:	1000661e 	bne	r2,zero,8040e0 <_dtoa_r+0x588>
  803f48:	d9000d17 	ldw	r4,52(sp)
  803f4c:	0102300e 	bge	zero,r4,804810 <_dtoa_r+0xcb8>
  803f50:	208003cc 	andi	r2,r4,15
  803f54:	100490fa 	slli	r2,r2,3
  803f58:	2025d13a 	srai	r18,r4,4
  803f5c:	00c02074 	movhi	r3,129
  803f60:	18ff9504 	addi	r3,r3,-428
  803f64:	10c5883a 	add	r2,r2,r3
  803f68:	90c0040c 	andi	r3,r18,16
  803f6c:	14000017 	ldw	r16,0(r2)
  803f70:	14400117 	ldw	r17,4(r2)
  803f74:	18036a1e 	bne	r3,zero,804d20 <_dtoa_r+0x11c8>
  803f78:	05800084 	movi	r22,2
  803f7c:	90001026 	beq	r18,zero,803fc0 <_dtoa_r+0x468>
  803f80:	04c02074 	movhi	r19,129
  803f84:	9cffc704 	addi	r19,r19,-228
  803f88:	9080004c 	andi	r2,r18,1
  803f8c:	1005003a 	cmpeq	r2,r2,zero
  803f90:	1000081e 	bne	r2,zero,803fb4 <_dtoa_r+0x45c>
  803f94:	99800017 	ldw	r6,0(r19)
  803f98:	99c00117 	ldw	r7,4(r19)
  803f9c:	880b883a 	mov	r5,r17
  803fa0:	8009883a 	mov	r4,r16
  803fa4:	0809ae00 	call	809ae0 <__muldf3>
  803fa8:	1021883a 	mov	r16,r2
  803fac:	b5800044 	addi	r22,r22,1
  803fb0:	1823883a 	mov	r17,r3
  803fb4:	9025d07a 	srai	r18,r18,1
  803fb8:	9cc00204 	addi	r19,r19,8
  803fbc:	903ff21e 	bne	r18,zero,803f88 <_dtoa_r+0x430>
  803fc0:	a80b883a 	mov	r5,r21
  803fc4:	a009883a 	mov	r4,r20
  803fc8:	880f883a 	mov	r7,r17
  803fcc:	800d883a 	mov	r6,r16
  803fd0:	0809ea40 	call	809ea4 <__divdf3>
  803fd4:	1029883a 	mov	r20,r2
  803fd8:	182b883a 	mov	r21,r3
  803fdc:	d8c00c17 	ldw	r3,48(sp)
  803fe0:	1805003a 	cmpeq	r2,r3,zero
  803fe4:	1000081e 	bne	r2,zero,804008 <_dtoa_r+0x4b0>
  803fe8:	0005883a 	mov	r2,zero
  803fec:	00cffc34 	movhi	r3,16368
  803ff0:	180f883a 	mov	r7,r3
  803ff4:	a009883a 	mov	r4,r20
  803ff8:	a80b883a 	mov	r5,r21
  803ffc:	100d883a 	mov	r6,r2
  804000:	080a31c0 	call	80a31c <__ltdf2>
  804004:	1003fe16 	blt	r2,zero,805000 <_dtoa_r+0x14a8>
  804008:	b009883a 	mov	r4,r22
  80400c:	080a3a40 	call	80a3a4 <__floatsidf>
  804010:	180b883a 	mov	r5,r3
  804014:	1009883a 	mov	r4,r2
  804018:	a00d883a 	mov	r6,r20
  80401c:	a80f883a 	mov	r7,r21
  804020:	0809ae00 	call	809ae0 <__muldf3>
  804024:	0011883a 	mov	r8,zero
  804028:	02500734 	movhi	r9,16412
  80402c:	1009883a 	mov	r4,r2
  804030:	180b883a 	mov	r5,r3
  804034:	480f883a 	mov	r7,r9
  804038:	400d883a 	mov	r6,r8
  80403c:	0809a6c0 	call	809a6c <__adddf3>
  804040:	d9000f17 	ldw	r4,60(sp)
  804044:	102d883a 	mov	r22,r2
  804048:	00bf3034 	movhi	r2,64704
  80404c:	18b9883a 	add	fp,r3,r2
  804050:	e02f883a 	mov	r23,fp
  804054:	20028f1e 	bne	r4,zero,804a94 <_dtoa_r+0xf3c>
  804058:	0005883a 	mov	r2,zero
  80405c:	00d00534 	movhi	r3,16404
  804060:	a009883a 	mov	r4,r20
  804064:	a80b883a 	mov	r5,r21
  804068:	180f883a 	mov	r7,r3
  80406c:	100d883a 	mov	r6,r2
  804070:	08099ec0 	call	8099ec <__subdf3>
  804074:	1009883a 	mov	r4,r2
  804078:	e00f883a 	mov	r7,fp
  80407c:	180b883a 	mov	r5,r3
  804080:	b00d883a 	mov	r6,r22
  804084:	1025883a 	mov	r18,r2
  804088:	1827883a 	mov	r19,r3
  80408c:	080a20c0 	call	80a20c <__gtdf2>
  804090:	00834f16 	blt	zero,r2,804dd0 <_dtoa_r+0x1278>
  804094:	e0e0003c 	xorhi	r3,fp,32768
  804098:	9009883a 	mov	r4,r18
  80409c:	980b883a 	mov	r5,r19
  8040a0:	180f883a 	mov	r7,r3
  8040a4:	b00d883a 	mov	r6,r22
  8040a8:	080a31c0 	call	80a31c <__ltdf2>
  8040ac:	1000080e 	bge	r2,zero,8040d0 <_dtoa_r+0x578>
  8040b0:	0027883a 	mov	r19,zero
  8040b4:	0025883a 	mov	r18,zero
  8040b8:	d8802617 	ldw	r2,152(sp)
  8040bc:	df000517 	ldw	fp,20(sp)
  8040c0:	d8000615 	stw	zero,24(sp)
  8040c4:	0084303a 	nor	r2,zero,r2
  8040c8:	d8800d15 	stw	r2,52(sp)
  8040cc:	00019b06 	br	80473c <_dtoa_r+0xbe4>
  8040d0:	d9801217 	ldw	r6,72(sp)
  8040d4:	d8801317 	ldw	r2,76(sp)
  8040d8:	3029883a 	mov	r20,r6
  8040dc:	102b883a 	mov	r21,r2
  8040e0:	d8c00217 	ldw	r3,8(sp)
  8040e4:	18008516 	blt	r3,zero,8042fc <_dtoa_r+0x7a4>
  8040e8:	d9000d17 	ldw	r4,52(sp)
  8040ec:	00800384 	movi	r2,14
  8040f0:	11008216 	blt	r2,r4,8042fc <_dtoa_r+0x7a4>
  8040f4:	200490fa 	slli	r2,r4,3
  8040f8:	d9802617 	ldw	r6,152(sp)
  8040fc:	00c02074 	movhi	r3,129
  804100:	18ff9504 	addi	r3,r3,-428
  804104:	10c5883a 	add	r2,r2,r3
  804108:	14800017 	ldw	r18,0(r2)
  80410c:	14c00117 	ldw	r19,4(r2)
  804110:	30031e16 	blt	r6,zero,804d8c <_dtoa_r+0x1234>
  804114:	d9000517 	ldw	r4,20(sp)
  804118:	d8c00f17 	ldw	r3,60(sp)
  80411c:	a823883a 	mov	r17,r21
  804120:	a021883a 	mov	r16,r20
  804124:	192b883a 	add	r21,r3,r4
  804128:	2039883a 	mov	fp,r4
  80412c:	00000f06 	br	80416c <_dtoa_r+0x614>
  804130:	0005883a 	mov	r2,zero
  804134:	00d00934 	movhi	r3,16420
  804138:	5009883a 	mov	r4,r10
  80413c:	580b883a 	mov	r5,r11
  804140:	180f883a 	mov	r7,r3
  804144:	100d883a 	mov	r6,r2
  804148:	0809ae00 	call	809ae0 <__muldf3>
  80414c:	180b883a 	mov	r5,r3
  804150:	000d883a 	mov	r6,zero
  804154:	000f883a 	mov	r7,zero
  804158:	1009883a 	mov	r4,r2
  80415c:	1021883a 	mov	r16,r2
  804160:	1823883a 	mov	r17,r3
  804164:	080a1840 	call	80a184 <__nedf2>
  804168:	10004526 	beq	r2,zero,804280 <_dtoa_r+0x728>
  80416c:	900d883a 	mov	r6,r18
  804170:	980f883a 	mov	r7,r19
  804174:	8009883a 	mov	r4,r16
  804178:	880b883a 	mov	r5,r17
  80417c:	0809ea40 	call	809ea4 <__divdf3>
  804180:	180b883a 	mov	r5,r3
  804184:	1009883a 	mov	r4,r2
  804188:	080a49c0 	call	80a49c <__fixdfsi>
  80418c:	1009883a 	mov	r4,r2
  804190:	1029883a 	mov	r20,r2
  804194:	080a3a40 	call	80a3a4 <__floatsidf>
  804198:	180f883a 	mov	r7,r3
  80419c:	9009883a 	mov	r4,r18
  8041a0:	980b883a 	mov	r5,r19
  8041a4:	100d883a 	mov	r6,r2
  8041a8:	0809ae00 	call	809ae0 <__muldf3>
  8041ac:	180f883a 	mov	r7,r3
  8041b0:	880b883a 	mov	r5,r17
  8041b4:	8009883a 	mov	r4,r16
  8041b8:	100d883a 	mov	r6,r2
  8041bc:	08099ec0 	call	8099ec <__subdf3>
  8041c0:	1015883a 	mov	r10,r2
  8041c4:	a0800c04 	addi	r2,r20,48
  8041c8:	e0800005 	stb	r2,0(fp)
  8041cc:	e7000044 	addi	fp,fp,1
  8041d0:	1817883a 	mov	r11,r3
  8041d4:	e57fd61e 	bne	fp,r21,804130 <_dtoa_r+0x5d8>
  8041d8:	500d883a 	mov	r6,r10
  8041dc:	180f883a 	mov	r7,r3
  8041e0:	5009883a 	mov	r4,r10
  8041e4:	180b883a 	mov	r5,r3
  8041e8:	0809a6c0 	call	809a6c <__adddf3>
  8041ec:	100d883a 	mov	r6,r2
  8041f0:	9009883a 	mov	r4,r18
  8041f4:	980b883a 	mov	r5,r19
  8041f8:	180f883a 	mov	r7,r3
  8041fc:	1021883a 	mov	r16,r2
  804200:	1823883a 	mov	r17,r3
  804204:	080a31c0 	call	80a31c <__ltdf2>
  804208:	10000816 	blt	r2,zero,80422c <_dtoa_r+0x6d4>
  80420c:	980b883a 	mov	r5,r19
  804210:	800d883a 	mov	r6,r16
  804214:	880f883a 	mov	r7,r17
  804218:	9009883a 	mov	r4,r18
  80421c:	080a0fc0 	call	80a0fc <__eqdf2>
  804220:	1000171e 	bne	r2,zero,804280 <_dtoa_r+0x728>
  804224:	a080004c 	andi	r2,r20,1
  804228:	10001526 	beq	r2,zero,804280 <_dtoa_r+0x728>
  80422c:	d8800d17 	ldw	r2,52(sp)
  804230:	d8800415 	stw	r2,16(sp)
  804234:	e009883a 	mov	r4,fp
  804238:	213fffc4 	addi	r4,r4,-1
  80423c:	20c00007 	ldb	r3,0(r4)
  804240:	00800e44 	movi	r2,57
  804244:	1880081e 	bne	r3,r2,804268 <_dtoa_r+0x710>
  804248:	d8800517 	ldw	r2,20(sp)
  80424c:	113ffa1e 	bne	r2,r4,804238 <_dtoa_r+0x6e0>
  804250:	d8c00417 	ldw	r3,16(sp)
  804254:	d9800517 	ldw	r6,20(sp)
  804258:	00800c04 	movi	r2,48
  80425c:	18c00044 	addi	r3,r3,1
  804260:	d8c00415 	stw	r3,16(sp)
  804264:	30800005 	stb	r2,0(r6)
  804268:	20800003 	ldbu	r2,0(r4)
  80426c:	d8c00417 	ldw	r3,16(sp)
  804270:	27000044 	addi	fp,r4,1
  804274:	10800044 	addi	r2,r2,1
  804278:	d8c00d15 	stw	r3,52(sp)
  80427c:	20800005 	stb	r2,0(r4)
  804280:	d9001617 	ldw	r4,88(sp)
  804284:	d9400717 	ldw	r5,28(sp)
  804288:	0806cec0 	call	806cec <_Bfree>
  80428c:	e0000005 	stb	zero,0(fp)
  804290:	d9800d17 	ldw	r6,52(sp)
  804294:	d8c02717 	ldw	r3,156(sp)
  804298:	d9002917 	ldw	r4,164(sp)
  80429c:	30800044 	addi	r2,r6,1
  8042a0:	18800015 	stw	r2,0(r3)
  8042a4:	20029c26 	beq	r4,zero,804d18 <_dtoa_r+0x11c0>
  8042a8:	d8c00517 	ldw	r3,20(sp)
  8042ac:	27000015 	stw	fp,0(r4)
  8042b0:	003e5d06 	br	803c28 <_dtoa_r+0xd0>
  8042b4:	d9800d17 	ldw	r6,52(sp)
  8042b8:	00c02074 	movhi	r3,129
  8042bc:	18ff9504 	addi	r3,r3,-428
  8042c0:	d9001217 	ldw	r4,72(sp)
  8042c4:	300490fa 	slli	r2,r6,3
  8042c8:	d9401317 	ldw	r5,76(sp)
  8042cc:	10c5883a 	add	r2,r2,r3
  8042d0:	12000017 	ldw	r8,0(r2)
  8042d4:	12400117 	ldw	r9,4(r2)
  8042d8:	400d883a 	mov	r6,r8
  8042dc:	480f883a 	mov	r7,r9
  8042e0:	080a31c0 	call	80a31c <__ltdf2>
  8042e4:	1000030e 	bge	r2,zero,8042f4 <_dtoa_r+0x79c>
  8042e8:	d8800d17 	ldw	r2,52(sp)
  8042ec:	10bfffc4 	addi	r2,r2,-1
  8042f0:	d8800d15 	stw	r2,52(sp)
  8042f4:	d8000c15 	stw	zero,48(sp)
  8042f8:	003ea806 	br	803d9c <_dtoa_r+0x244>
  8042fc:	d9000b17 	ldw	r4,44(sp)
  804300:	202cc03a 	cmpne	r22,r4,zero
  804304:	b000c71e 	bne	r22,zero,804624 <_dtoa_r+0xacc>
  804308:	dc001117 	ldw	r16,68(sp)
  80430c:	dc801017 	ldw	r18,64(sp)
  804310:	0027883a 	mov	r19,zero
  804314:	04000b0e 	bge	zero,r16,804344 <_dtoa_r+0x7ec>
  804318:	d8c00a17 	ldw	r3,40(sp)
  80431c:	00c0090e 	bge	zero,r3,804344 <_dtoa_r+0x7ec>
  804320:	8005883a 	mov	r2,r16
  804324:	1c011316 	blt	r3,r16,804774 <_dtoa_r+0xc1c>
  804328:	d9000a17 	ldw	r4,40(sp)
  80432c:	d9801117 	ldw	r6,68(sp)
  804330:	80a1c83a 	sub	r16,r16,r2
  804334:	2089c83a 	sub	r4,r4,r2
  804338:	308dc83a 	sub	r6,r6,r2
  80433c:	d9000a15 	stw	r4,40(sp)
  804340:	d9801115 	stw	r6,68(sp)
  804344:	d8801017 	ldw	r2,64(sp)
  804348:	0080150e 	bge	zero,r2,8043a0 <_dtoa_r+0x848>
  80434c:	d8c00b17 	ldw	r3,44(sp)
  804350:	1805003a 	cmpeq	r2,r3,zero
  804354:	1001c91e 	bne	r2,zero,804a7c <_dtoa_r+0xf24>
  804358:	04800e0e 	bge	zero,r18,804394 <_dtoa_r+0x83c>
  80435c:	d9001617 	ldw	r4,88(sp)
  804360:	980b883a 	mov	r5,r19
  804364:	900d883a 	mov	r6,r18
  804368:	0807aa00 	call	807aa0 <__pow5mult>
  80436c:	d9001617 	ldw	r4,88(sp)
  804370:	d9800717 	ldw	r6,28(sp)
  804374:	100b883a 	mov	r5,r2
  804378:	1027883a 	mov	r19,r2
  80437c:	080777c0 	call	80777c <__multiply>
  804380:	d9001617 	ldw	r4,88(sp)
  804384:	d9400717 	ldw	r5,28(sp)
  804388:	1023883a 	mov	r17,r2
  80438c:	0806cec0 	call	806cec <_Bfree>
  804390:	dc400715 	stw	r17,28(sp)
  804394:	d9001017 	ldw	r4,64(sp)
  804398:	248dc83a 	sub	r6,r4,r18
  80439c:	30010e1e 	bne	r6,zero,8047d8 <_dtoa_r+0xc80>
  8043a0:	d9001617 	ldw	r4,88(sp)
  8043a4:	04400044 	movi	r17,1
  8043a8:	880b883a 	mov	r5,r17
  8043ac:	08079640 	call	807964 <__i2b>
  8043b0:	d9800917 	ldw	r6,36(sp)
  8043b4:	1025883a 	mov	r18,r2
  8043b8:	0180040e 	bge	zero,r6,8043cc <_dtoa_r+0x874>
  8043bc:	d9001617 	ldw	r4,88(sp)
  8043c0:	100b883a 	mov	r5,r2
  8043c4:	0807aa00 	call	807aa0 <__pow5mult>
  8043c8:	1025883a 	mov	r18,r2
  8043cc:	d8801717 	ldw	r2,92(sp)
  8043d0:	8880f30e 	bge	r17,r2,8047a0 <_dtoa_r+0xc48>
  8043d4:	0023883a 	mov	r17,zero
  8043d8:	d9800917 	ldw	r6,36(sp)
  8043dc:	30019e1e 	bne	r6,zero,804a58 <_dtoa_r+0xf00>
  8043e0:	00c00044 	movi	r3,1
  8043e4:	d9000a17 	ldw	r4,40(sp)
  8043e8:	20c5883a 	add	r2,r4,r3
  8043ec:	10c007cc 	andi	r3,r2,31
  8043f0:	1800841e 	bne	r3,zero,804604 <_dtoa_r+0xaac>
  8043f4:	00800704 	movi	r2,28
  8043f8:	d9000a17 	ldw	r4,40(sp)
  8043fc:	d9801117 	ldw	r6,68(sp)
  804400:	80a1883a 	add	r16,r16,r2
  804404:	2089883a 	add	r4,r4,r2
  804408:	308d883a 	add	r6,r6,r2
  80440c:	d9000a15 	stw	r4,40(sp)
  804410:	d9801115 	stw	r6,68(sp)
  804414:	d8801117 	ldw	r2,68(sp)
  804418:	0080050e 	bge	zero,r2,804430 <_dtoa_r+0x8d8>
  80441c:	d9400717 	ldw	r5,28(sp)
  804420:	d9001617 	ldw	r4,88(sp)
  804424:	100d883a 	mov	r6,r2
  804428:	08076300 	call	807630 <__lshift>
  80442c:	d8800715 	stw	r2,28(sp)
  804430:	d8c00a17 	ldw	r3,40(sp)
  804434:	00c0050e 	bge	zero,r3,80444c <_dtoa_r+0x8f4>
  804438:	d9001617 	ldw	r4,88(sp)
  80443c:	900b883a 	mov	r5,r18
  804440:	180d883a 	mov	r6,r3
  804444:	08076300 	call	807630 <__lshift>
  804448:	1025883a 	mov	r18,r2
  80444c:	d9000c17 	ldw	r4,48(sp)
  804450:	2005003a 	cmpeq	r2,r4,zero
  804454:	10016f26 	beq	r2,zero,804a14 <_dtoa_r+0xebc>
  804458:	d9000f17 	ldw	r4,60(sp)
  80445c:	0102170e 	bge	zero,r4,804cbc <_dtoa_r+0x1164>
  804460:	d9800b17 	ldw	r6,44(sp)
  804464:	3005003a 	cmpeq	r2,r6,zero
  804468:	1000881e 	bne	r2,zero,80468c <_dtoa_r+0xb34>
  80446c:	0400050e 	bge	zero,r16,804484 <_dtoa_r+0x92c>
  804470:	d9001617 	ldw	r4,88(sp)
  804474:	980b883a 	mov	r5,r19
  804478:	800d883a 	mov	r6,r16
  80447c:	08076300 	call	807630 <__lshift>
  804480:	1027883a 	mov	r19,r2
  804484:	8804c03a 	cmpne	r2,r17,zero
  804488:	1002541e 	bne	r2,zero,804ddc <_dtoa_r+0x1284>
  80448c:	980b883a 	mov	r5,r19
  804490:	dd800517 	ldw	r22,20(sp)
  804494:	dcc00615 	stw	r19,24(sp)
  804498:	a700004c 	andi	fp,r20,1
  80449c:	2827883a 	mov	r19,r5
  8044a0:	d9000717 	ldw	r4,28(sp)
  8044a4:	900b883a 	mov	r5,r18
  8044a8:	08039400 	call	803940 <quorem>
  8044ac:	d9000717 	ldw	r4,28(sp)
  8044b0:	d9400617 	ldw	r5,24(sp)
  8044b4:	1023883a 	mov	r17,r2
  8044b8:	8dc00c04 	addi	r23,r17,48
  8044bc:	0806e480 	call	806e48 <__mcmp>
  8044c0:	d9001617 	ldw	r4,88(sp)
  8044c4:	900b883a 	mov	r5,r18
  8044c8:	980d883a 	mov	r6,r19
  8044cc:	1029883a 	mov	r20,r2
  8044d0:	08074a40 	call	8074a4 <__mdiff>
  8044d4:	102b883a 	mov	r21,r2
  8044d8:	10800317 	ldw	r2,12(r2)
  8044dc:	1001281e 	bne	r2,zero,804980 <_dtoa_r+0xe28>
  8044e0:	d9000717 	ldw	r4,28(sp)
  8044e4:	a80b883a 	mov	r5,r21
  8044e8:	0806e480 	call	806e48 <__mcmp>
  8044ec:	d9001617 	ldw	r4,88(sp)
  8044f0:	1021883a 	mov	r16,r2
  8044f4:	a80b883a 	mov	r5,r21
  8044f8:	0806cec0 	call	806cec <_Bfree>
  8044fc:	8000041e 	bne	r16,zero,804510 <_dtoa_r+0x9b8>
  804500:	d8801717 	ldw	r2,92(sp)
  804504:	1000021e 	bne	r2,zero,804510 <_dtoa_r+0x9b8>
  804508:	e004c03a 	cmpne	r2,fp,zero
  80450c:	10011726 	beq	r2,zero,80496c <_dtoa_r+0xe14>
  804510:	a0010616 	blt	r20,zero,80492c <_dtoa_r+0xdd4>
  804514:	a000041e 	bne	r20,zero,804528 <_dtoa_r+0x9d0>
  804518:	d8c01717 	ldw	r3,92(sp)
  80451c:	1800021e 	bne	r3,zero,804528 <_dtoa_r+0x9d0>
  804520:	e004c03a 	cmpne	r2,fp,zero
  804524:	10010126 	beq	r2,zero,80492c <_dtoa_r+0xdd4>
  804528:	04023d16 	blt	zero,r16,804e20 <_dtoa_r+0x12c8>
  80452c:	b5c00005 	stb	r23,0(r22)
  804530:	d9800517 	ldw	r6,20(sp)
  804534:	d9000f17 	ldw	r4,60(sp)
  804538:	b5800044 	addi	r22,r22,1
  80453c:	3105883a 	add	r2,r6,r4
  804540:	b0806526 	beq	r22,r2,8046d8 <_dtoa_r+0xb80>
  804544:	d9400717 	ldw	r5,28(sp)
  804548:	d9001617 	ldw	r4,88(sp)
  80454c:	01800284 	movi	r6,10
  804550:	000f883a 	mov	r7,zero
  804554:	08079a00 	call	8079a0 <__multadd>
  804558:	d8800715 	stw	r2,28(sp)
  80455c:	d8800617 	ldw	r2,24(sp)
  804560:	14c10c26 	beq	r2,r19,804994 <_dtoa_r+0xe3c>
  804564:	d9400617 	ldw	r5,24(sp)
  804568:	d9001617 	ldw	r4,88(sp)
  80456c:	01800284 	movi	r6,10
  804570:	000f883a 	mov	r7,zero
  804574:	08079a00 	call	8079a0 <__multadd>
  804578:	d9001617 	ldw	r4,88(sp)
  80457c:	980b883a 	mov	r5,r19
  804580:	01800284 	movi	r6,10
  804584:	000f883a 	mov	r7,zero
  804588:	d8800615 	stw	r2,24(sp)
  80458c:	08079a00 	call	8079a0 <__multadd>
  804590:	1027883a 	mov	r19,r2
  804594:	003fc206 	br	8044a0 <_dtoa_r+0x948>
  804598:	2445c83a 	sub	r2,r4,r17
  80459c:	a088983a 	sll	r4,r20,r2
  8045a0:	003e4b06 	br	803ed0 <_dtoa_r+0x378>
  8045a4:	01bfffc4 	movi	r6,-1
  8045a8:	00800044 	movi	r2,1
  8045ac:	d9800e15 	stw	r6,56(sp)
  8045b0:	d9800f15 	stw	r6,60(sp)
  8045b4:	d8800b15 	stw	r2,44(sp)
  8045b8:	d8c01617 	ldw	r3,88(sp)
  8045bc:	008005c4 	movi	r2,23
  8045c0:	18001115 	stw	zero,68(r3)
  8045c4:	1580082e 	bgeu	r2,r22,8045e8 <_dtoa_r+0xa90>
  8045c8:	00c00104 	movi	r3,4
  8045cc:	0009883a 	mov	r4,zero
  8045d0:	18c7883a 	add	r3,r3,r3
  8045d4:	18800504 	addi	r2,r3,20
  8045d8:	21000044 	addi	r4,r4,1
  8045dc:	b0bffc2e 	bgeu	r22,r2,8045d0 <_dtoa_r+0xa78>
  8045e0:	d9801617 	ldw	r6,88(sp)
  8045e4:	31001115 	stw	r4,68(r6)
  8045e8:	dc000f17 	ldw	r16,60(sp)
  8045ec:	003e4b06 	br	803f1c <_dtoa_r+0x3c4>
  8045f0:	d9801717 	ldw	r6,92(sp)
  8045f4:	0023883a 	mov	r17,zero
  8045f8:	31bfff04 	addi	r6,r6,-4
  8045fc:	d9801715 	stw	r6,92(sp)
  804600:	003df806 	br	803de4 <_dtoa_r+0x28c>
  804604:	00800804 	movi	r2,32
  804608:	10c9c83a 	sub	r4,r2,r3
  80460c:	00c00104 	movi	r3,4
  804610:	19005a16 	blt	r3,r4,80477c <_dtoa_r+0xc24>
  804614:	008000c4 	movi	r2,3
  804618:	113f7e16 	blt	r2,r4,804414 <_dtoa_r+0x8bc>
  80461c:	20800704 	addi	r2,r4,28
  804620:	003f7506 	br	8043f8 <_dtoa_r+0x8a0>
  804624:	d9801717 	ldw	r6,92(sp)
  804628:	00800044 	movi	r2,1
  80462c:	1180a10e 	bge	r2,r6,8048b4 <_dtoa_r+0xd5c>
  804630:	d9800f17 	ldw	r6,60(sp)
  804634:	d8c01017 	ldw	r3,64(sp)
  804638:	30bfffc4 	addi	r2,r6,-1
  80463c:	1881c616 	blt	r3,r2,804d58 <_dtoa_r+0x1200>
  804640:	18a5c83a 	sub	r18,r3,r2
  804644:	d8800f17 	ldw	r2,60(sp)
  804648:	10026216 	blt	r2,zero,804fd4 <_dtoa_r+0x147c>
  80464c:	dc001117 	ldw	r16,68(sp)
  804650:	1007883a 	mov	r3,r2
  804654:	d9800a17 	ldw	r6,40(sp)
  804658:	d8801117 	ldw	r2,68(sp)
  80465c:	d9001617 	ldw	r4,88(sp)
  804660:	30cd883a 	add	r6,r6,r3
  804664:	10c5883a 	add	r2,r2,r3
  804668:	01400044 	movi	r5,1
  80466c:	d9800a15 	stw	r6,40(sp)
  804670:	d8801115 	stw	r2,68(sp)
  804674:	08079640 	call	807964 <__i2b>
  804678:	1027883a 	mov	r19,r2
  80467c:	003f2506 	br	804314 <_dtoa_r+0x7bc>
  804680:	00c02074 	movhi	r3,129
  804684:	18ff7704 	addi	r3,r3,-548
  804688:	003d6706 	br	803c28 <_dtoa_r+0xd0>
  80468c:	dd800517 	ldw	r22,20(sp)
  804690:	04000044 	movi	r16,1
  804694:	00000706 	br	8046b4 <_dtoa_r+0xb5c>
  804698:	d9400717 	ldw	r5,28(sp)
  80469c:	d9001617 	ldw	r4,88(sp)
  8046a0:	01800284 	movi	r6,10
  8046a4:	000f883a 	mov	r7,zero
  8046a8:	08079a00 	call	8079a0 <__multadd>
  8046ac:	d8800715 	stw	r2,28(sp)
  8046b0:	84000044 	addi	r16,r16,1
  8046b4:	d9000717 	ldw	r4,28(sp)
  8046b8:	900b883a 	mov	r5,r18
  8046bc:	08039400 	call	803940 <quorem>
  8046c0:	15c00c04 	addi	r23,r2,48
  8046c4:	b5c00005 	stb	r23,0(r22)
  8046c8:	d8c00f17 	ldw	r3,60(sp)
  8046cc:	b5800044 	addi	r22,r22,1
  8046d0:	80fff116 	blt	r16,r3,804698 <_dtoa_r+0xb40>
  8046d4:	d8000615 	stw	zero,24(sp)
  8046d8:	d9400717 	ldw	r5,28(sp)
  8046dc:	d9001617 	ldw	r4,88(sp)
  8046e0:	01800044 	movi	r6,1
  8046e4:	08076300 	call	807630 <__lshift>
  8046e8:	1009883a 	mov	r4,r2
  8046ec:	900b883a 	mov	r5,r18
  8046f0:	d8800715 	stw	r2,28(sp)
  8046f4:	0806e480 	call	806e48 <__mcmp>
  8046f8:	00803c0e 	bge	zero,r2,8047ec <_dtoa_r+0xc94>
  8046fc:	b009883a 	mov	r4,r22
  804700:	213fffc4 	addi	r4,r4,-1
  804704:	21400003 	ldbu	r5,0(r4)
  804708:	00800e44 	movi	r2,57
  80470c:	28c03fcc 	andi	r3,r5,255
  804710:	18c0201c 	xori	r3,r3,128
  804714:	18ffe004 	addi	r3,r3,-128
  804718:	1881981e 	bne	r3,r2,804d7c <_dtoa_r+0x1224>
  80471c:	d9800517 	ldw	r6,20(sp)
  804720:	21bff71e 	bne	r4,r6,804700 <_dtoa_r+0xba8>
  804724:	d8800d17 	ldw	r2,52(sp)
  804728:	37000044 	addi	fp,r6,1
  80472c:	10800044 	addi	r2,r2,1
  804730:	d8800d15 	stw	r2,52(sp)
  804734:	00800c44 	movi	r2,49
  804738:	30800005 	stb	r2,0(r6)
  80473c:	d9001617 	ldw	r4,88(sp)
  804740:	900b883a 	mov	r5,r18
  804744:	0806cec0 	call	806cec <_Bfree>
  804748:	983ecd26 	beq	r19,zero,804280 <_dtoa_r+0x728>
  80474c:	d8c00617 	ldw	r3,24(sp)
  804750:	18000426 	beq	r3,zero,804764 <_dtoa_r+0xc0c>
  804754:	1cc00326 	beq	r3,r19,804764 <_dtoa_r+0xc0c>
  804758:	d9001617 	ldw	r4,88(sp)
  80475c:	180b883a 	mov	r5,r3
  804760:	0806cec0 	call	806cec <_Bfree>
  804764:	d9001617 	ldw	r4,88(sp)
  804768:	980b883a 	mov	r5,r19
  80476c:	0806cec0 	call	806cec <_Bfree>
  804770:	003ec306 	br	804280 <_dtoa_r+0x728>
  804774:	1805883a 	mov	r2,r3
  804778:	003eeb06 	br	804328 <_dtoa_r+0x7d0>
  80477c:	d9800a17 	ldw	r6,40(sp)
  804780:	d8c01117 	ldw	r3,68(sp)
  804784:	20bfff04 	addi	r2,r4,-4
  804788:	308d883a 	add	r6,r6,r2
  80478c:	1887883a 	add	r3,r3,r2
  804790:	80a1883a 	add	r16,r16,r2
  804794:	d9800a15 	stw	r6,40(sp)
  804798:	d8c01115 	stw	r3,68(sp)
  80479c:	003f1d06 	br	804414 <_dtoa_r+0x8bc>
  8047a0:	a03f0c1e 	bne	r20,zero,8043d4 <_dtoa_r+0x87c>
  8047a4:	00800434 	movhi	r2,16
  8047a8:	10bfffc4 	addi	r2,r2,-1
  8047ac:	a884703a 	and	r2,r21,r2
  8047b0:	103f081e 	bne	r2,zero,8043d4 <_dtoa_r+0x87c>
  8047b4:	a89ffc2c 	andhi	r2,r21,32752
  8047b8:	103f0626 	beq	r2,zero,8043d4 <_dtoa_r+0x87c>
  8047bc:	d8c01117 	ldw	r3,68(sp)
  8047c0:	d9000a17 	ldw	r4,40(sp)
  8047c4:	18c00044 	addi	r3,r3,1
  8047c8:	21000044 	addi	r4,r4,1
  8047cc:	d8c01115 	stw	r3,68(sp)
  8047d0:	d9000a15 	stw	r4,40(sp)
  8047d4:	003f0006 	br	8043d8 <_dtoa_r+0x880>
  8047d8:	d9400717 	ldw	r5,28(sp)
  8047dc:	d9001617 	ldw	r4,88(sp)
  8047e0:	0807aa00 	call	807aa0 <__pow5mult>
  8047e4:	d8800715 	stw	r2,28(sp)
  8047e8:	003eed06 	br	8043a0 <_dtoa_r+0x848>
  8047ec:	1000021e 	bne	r2,zero,8047f8 <_dtoa_r+0xca0>
  8047f0:	b880004c 	andi	r2,r23,1
  8047f4:	103fc11e 	bne	r2,zero,8046fc <_dtoa_r+0xba4>
  8047f8:	b5bfffc4 	addi	r22,r22,-1
  8047fc:	b0c00007 	ldb	r3,0(r22)
  804800:	00800c04 	movi	r2,48
  804804:	18bffc26 	beq	r3,r2,8047f8 <_dtoa_r+0xca0>
  804808:	b7000044 	addi	fp,r22,1
  80480c:	003fcb06 	br	80473c <_dtoa_r+0xbe4>
  804810:	d9800d17 	ldw	r6,52(sp)
  804814:	018fc83a 	sub	r7,zero,r6
  804818:	3801f726 	beq	r7,zero,804ff8 <_dtoa_r+0x14a0>
  80481c:	398003cc 	andi	r6,r7,15
  804820:	300c90fa 	slli	r6,r6,3
  804824:	01402074 	movhi	r5,129
  804828:	297f9504 	addi	r5,r5,-428
  80482c:	d9001217 	ldw	r4,72(sp)
  804830:	314d883a 	add	r6,r6,r5
  804834:	30c00117 	ldw	r3,4(r6)
  804838:	30800017 	ldw	r2,0(r6)
  80483c:	d9401317 	ldw	r5,76(sp)
  804840:	3821d13a 	srai	r16,r7,4
  804844:	100d883a 	mov	r6,r2
  804848:	180f883a 	mov	r7,r3
  80484c:	0809ae00 	call	809ae0 <__muldf3>
  804850:	1011883a 	mov	r8,r2
  804854:	1813883a 	mov	r9,r3
  804858:	1029883a 	mov	r20,r2
  80485c:	182b883a 	mov	r21,r3
  804860:	8001e526 	beq	r16,zero,804ff8 <_dtoa_r+0x14a0>
  804864:	05800084 	movi	r22,2
  804868:	04402074 	movhi	r17,129
  80486c:	8c7fc704 	addi	r17,r17,-228
  804870:	8080004c 	andi	r2,r16,1
  804874:	1005003a 	cmpeq	r2,r2,zero
  804878:	1000081e 	bne	r2,zero,80489c <_dtoa_r+0xd44>
  80487c:	89800017 	ldw	r6,0(r17)
  804880:	89c00117 	ldw	r7,4(r17)
  804884:	480b883a 	mov	r5,r9
  804888:	4009883a 	mov	r4,r8
  80488c:	0809ae00 	call	809ae0 <__muldf3>
  804890:	1011883a 	mov	r8,r2
  804894:	b5800044 	addi	r22,r22,1
  804898:	1813883a 	mov	r9,r3
  80489c:	8021d07a 	srai	r16,r16,1
  8048a0:	8c400204 	addi	r17,r17,8
  8048a4:	803ff21e 	bne	r16,zero,804870 <_dtoa_r+0xd18>
  8048a8:	4029883a 	mov	r20,r8
  8048ac:	482b883a 	mov	r21,r9
  8048b0:	003dca06 	br	803fdc <_dtoa_r+0x484>
  8048b4:	d9000817 	ldw	r4,32(sp)
  8048b8:	2005003a 	cmpeq	r2,r4,zero
  8048bc:	1001f61e 	bne	r2,zero,805098 <_dtoa_r+0x1540>
  8048c0:	dc001117 	ldw	r16,68(sp)
  8048c4:	dc801017 	ldw	r18,64(sp)
  8048c8:	18c10cc4 	addi	r3,r3,1075
  8048cc:	003f6106 	br	804654 <_dtoa_r+0xafc>
  8048d0:	d8000b15 	stw	zero,44(sp)
  8048d4:	d9802617 	ldw	r6,152(sp)
  8048d8:	d8c00d17 	ldw	r3,52(sp)
  8048dc:	30800044 	addi	r2,r6,1
  8048e0:	18ad883a 	add	r22,r3,r2
  8048e4:	b13fffc4 	addi	r4,r22,-1
  8048e8:	d9000e15 	stw	r4,56(sp)
  8048ec:	0581f60e 	bge	zero,r22,8050c8 <_dtoa_r+0x1570>
  8048f0:	dd800f15 	stw	r22,60(sp)
  8048f4:	003f3006 	br	8045b8 <_dtoa_r+0xa60>
  8048f8:	d8000b15 	stw	zero,44(sp)
  8048fc:	d9002617 	ldw	r4,152(sp)
  804900:	0101eb0e 	bge	zero,r4,8050b0 <_dtoa_r+0x1558>
  804904:	202d883a 	mov	r22,r4
  804908:	d9000e15 	stw	r4,56(sp)
  80490c:	d9000f15 	stw	r4,60(sp)
  804910:	003f2906 	br	8045b8 <_dtoa_r+0xa60>
  804914:	01800044 	movi	r6,1
  804918:	d9800b15 	stw	r6,44(sp)
  80491c:	003ff706 	br	8048fc <_dtoa_r+0xda4>
  804920:	01000044 	movi	r4,1
  804924:	d9000b15 	stw	r4,44(sp)
  804928:	003fea06 	br	8048d4 <_dtoa_r+0xd7c>
  80492c:	04000c0e 	bge	zero,r16,804960 <_dtoa_r+0xe08>
  804930:	d9400717 	ldw	r5,28(sp)
  804934:	d9001617 	ldw	r4,88(sp)
  804938:	01800044 	movi	r6,1
  80493c:	08076300 	call	807630 <__lshift>
  804940:	1009883a 	mov	r4,r2
  804944:	900b883a 	mov	r5,r18
  804948:	d8800715 	stw	r2,28(sp)
  80494c:	0806e480 	call	806e48 <__mcmp>
  804950:	0081e00e 	bge	zero,r2,8050d4 <_dtoa_r+0x157c>
  804954:	bdc00044 	addi	r23,r23,1
  804958:	00800e84 	movi	r2,58
  80495c:	b881a226 	beq	r23,r2,804fe8 <_dtoa_r+0x1490>
  804960:	b7000044 	addi	fp,r22,1
  804964:	b5c00005 	stb	r23,0(r22)
  804968:	003f7406 	br	80473c <_dtoa_r+0xbe4>
  80496c:	00800e44 	movi	r2,57
  804970:	b8819d26 	beq	r23,r2,804fe8 <_dtoa_r+0x1490>
  804974:	053ffa0e 	bge	zero,r20,804960 <_dtoa_r+0xe08>
  804978:	8dc00c44 	addi	r23,r17,49
  80497c:	003ff806 	br	804960 <_dtoa_r+0xe08>
  804980:	d9001617 	ldw	r4,88(sp)
  804984:	a80b883a 	mov	r5,r21
  804988:	04000044 	movi	r16,1
  80498c:	0806cec0 	call	806cec <_Bfree>
  804990:	003edf06 	br	804510 <_dtoa_r+0x9b8>
  804994:	d9001617 	ldw	r4,88(sp)
  804998:	980b883a 	mov	r5,r19
  80499c:	01800284 	movi	r6,10
  8049a0:	000f883a 	mov	r7,zero
  8049a4:	08079a00 	call	8079a0 <__multadd>
  8049a8:	1027883a 	mov	r19,r2
  8049ac:	d8800615 	stw	r2,24(sp)
  8049b0:	003ebb06 	br	8044a0 <_dtoa_r+0x948>
  8049b4:	d9801117 	ldw	r6,68(sp)
  8049b8:	d8800d17 	ldw	r2,52(sp)
  8049bc:	d8000915 	stw	zero,36(sp)
  8049c0:	308dc83a 	sub	r6,r6,r2
  8049c4:	0087c83a 	sub	r3,zero,r2
  8049c8:	d9801115 	stw	r6,68(sp)
  8049cc:	d8c01015 	stw	r3,64(sp)
  8049d0:	003cfe06 	br	803dcc <_dtoa_r+0x274>
  8049d4:	018dc83a 	sub	r6,zero,r6
  8049d8:	d9801115 	stw	r6,68(sp)
  8049dc:	d8000a15 	stw	zero,40(sp)
  8049e0:	003cf306 	br	803db0 <_dtoa_r+0x258>
  8049e4:	d9000d17 	ldw	r4,52(sp)
  8049e8:	080a3a40 	call	80a3a4 <__floatsidf>
  8049ec:	880b883a 	mov	r5,r17
  8049f0:	8009883a 	mov	r4,r16
  8049f4:	180f883a 	mov	r7,r3
  8049f8:	100d883a 	mov	r6,r2
  8049fc:	080a1840 	call	80a184 <__nedf2>
  804a00:	103ce126 	beq	r2,zero,803d88 <_dtoa_r+0x230>
  804a04:	d9800d17 	ldw	r6,52(sp)
  804a08:	31bfffc4 	addi	r6,r6,-1
  804a0c:	d9800d15 	stw	r6,52(sp)
  804a10:	003cdd06 	br	803d88 <_dtoa_r+0x230>
  804a14:	d9000717 	ldw	r4,28(sp)
  804a18:	900b883a 	mov	r5,r18
  804a1c:	0806e480 	call	806e48 <__mcmp>
  804a20:	103e8d0e 	bge	r2,zero,804458 <_dtoa_r+0x900>
  804a24:	d9400717 	ldw	r5,28(sp)
  804a28:	d9001617 	ldw	r4,88(sp)
  804a2c:	01800284 	movi	r6,10
  804a30:	000f883a 	mov	r7,zero
  804a34:	08079a00 	call	8079a0 <__multadd>
  804a38:	d9800d17 	ldw	r6,52(sp)
  804a3c:	d8800715 	stw	r2,28(sp)
  804a40:	31bfffc4 	addi	r6,r6,-1
  804a44:	d9800d15 	stw	r6,52(sp)
  804a48:	b001a71e 	bne	r22,zero,8050e8 <_dtoa_r+0x1590>
  804a4c:	d8800e17 	ldw	r2,56(sp)
  804a50:	d8800f15 	stw	r2,60(sp)
  804a54:	003e8006 	br	804458 <_dtoa_r+0x900>
  804a58:	90800417 	ldw	r2,16(r18)
  804a5c:	1085883a 	add	r2,r2,r2
  804a60:	1085883a 	add	r2,r2,r2
  804a64:	1485883a 	add	r2,r2,r18
  804a68:	11000417 	ldw	r4,16(r2)
  804a6c:	0806d140 	call	806d14 <__hi0bits>
  804a70:	00c00804 	movi	r3,32
  804a74:	1887c83a 	sub	r3,r3,r2
  804a78:	003e5a06 	br	8043e4 <_dtoa_r+0x88c>
  804a7c:	d9400717 	ldw	r5,28(sp)
  804a80:	d9801017 	ldw	r6,64(sp)
  804a84:	d9001617 	ldw	r4,88(sp)
  804a88:	0807aa00 	call	807aa0 <__pow5mult>
  804a8c:	d8800715 	stw	r2,28(sp)
  804a90:	003e4306 	br	8043a0 <_dtoa_r+0x848>
  804a94:	d9800f17 	ldw	r6,60(sp)
  804a98:	d8800d17 	ldw	r2,52(sp)
  804a9c:	d9800315 	stw	r6,12(sp)
  804aa0:	d8800415 	stw	r2,16(sp)
  804aa4:	d8c00b17 	ldw	r3,44(sp)
  804aa8:	1805003a 	cmpeq	r2,r3,zero
  804aac:	1000e21e 	bne	r2,zero,804e38 <_dtoa_r+0x12e0>
  804ab0:	d9000317 	ldw	r4,12(sp)
  804ab4:	0005883a 	mov	r2,zero
  804ab8:	00cff834 	movhi	r3,16352
  804abc:	200c90fa 	slli	r6,r4,3
  804ac0:	01002074 	movhi	r4,129
  804ac4:	213f9504 	addi	r4,r4,-428
  804ac8:	180b883a 	mov	r5,r3
  804acc:	310d883a 	add	r6,r6,r4
  804ad0:	327fff17 	ldw	r9,-4(r6)
  804ad4:	323ffe17 	ldw	r8,-8(r6)
  804ad8:	1009883a 	mov	r4,r2
  804adc:	480f883a 	mov	r7,r9
  804ae0:	400d883a 	mov	r6,r8
  804ae4:	0809ea40 	call	809ea4 <__divdf3>
  804ae8:	180b883a 	mov	r5,r3
  804aec:	b00d883a 	mov	r6,r22
  804af0:	b80f883a 	mov	r7,r23
  804af4:	1009883a 	mov	r4,r2
  804af8:	08099ec0 	call	8099ec <__subdf3>
  804afc:	a80b883a 	mov	r5,r21
  804b00:	a009883a 	mov	r4,r20
  804b04:	d8c01915 	stw	r3,100(sp)
  804b08:	d8801815 	stw	r2,96(sp)
  804b0c:	080a49c0 	call	80a49c <__fixdfsi>
  804b10:	1009883a 	mov	r4,r2
  804b14:	1027883a 	mov	r19,r2
  804b18:	080a3a40 	call	80a3a4 <__floatsidf>
  804b1c:	a80b883a 	mov	r5,r21
  804b20:	a009883a 	mov	r4,r20
  804b24:	180f883a 	mov	r7,r3
  804b28:	100d883a 	mov	r6,r2
  804b2c:	08099ec0 	call	8099ec <__subdf3>
  804b30:	d9801817 	ldw	r6,96(sp)
  804b34:	1823883a 	mov	r17,r3
  804b38:	d8801415 	stw	r2,80(sp)
  804b3c:	302d883a 	mov	r22,r6
  804b40:	d9800517 	ldw	r6,20(sp)
  804b44:	9cc00c04 	addi	r19,r19,48
  804b48:	dc401515 	stw	r17,84(sp)
  804b4c:	d8c01917 	ldw	r3,100(sp)
  804b50:	34c00005 	stb	r19,0(r6)
  804b54:	d8800517 	ldw	r2,20(sp)
  804b58:	d9401917 	ldw	r5,100(sp)
  804b5c:	d9801417 	ldw	r6,80(sp)
  804b60:	b009883a 	mov	r4,r22
  804b64:	880f883a 	mov	r7,r17
  804b68:	182f883a 	mov	r23,r3
  804b6c:	17000044 	addi	fp,r2,1
  804b70:	080a20c0 	call	80a20c <__gtdf2>
  804b74:	00804e16 	blt	zero,r2,804cb0 <_dtoa_r+0x1158>
  804b78:	d9801417 	ldw	r6,80(sp)
  804b7c:	0005883a 	mov	r2,zero
  804b80:	00cffc34 	movhi	r3,16368
  804b84:	180b883a 	mov	r5,r3
  804b88:	880f883a 	mov	r7,r17
  804b8c:	1009883a 	mov	r4,r2
  804b90:	08099ec0 	call	8099ec <__subdf3>
  804b94:	d9401917 	ldw	r5,100(sp)
  804b98:	180f883a 	mov	r7,r3
  804b9c:	b009883a 	mov	r4,r22
  804ba0:	100d883a 	mov	r6,r2
  804ba4:	080a20c0 	call	80a20c <__gtdf2>
  804ba8:	00bda216 	blt	zero,r2,804234 <_dtoa_r+0x6dc>
  804bac:	d8c00317 	ldw	r3,12(sp)
  804bb0:	00800044 	movi	r2,1
  804bb4:	10c01216 	blt	r2,r3,804c00 <_dtoa_r+0x10a8>
  804bb8:	003d4506 	br	8040d0 <_dtoa_r+0x578>
  804bbc:	d9801417 	ldw	r6,80(sp)
  804bc0:	0005883a 	mov	r2,zero
  804bc4:	00cffc34 	movhi	r3,16368
  804bc8:	180b883a 	mov	r5,r3
  804bcc:	880f883a 	mov	r7,r17
  804bd0:	1009883a 	mov	r4,r2
  804bd4:	08099ec0 	call	8099ec <__subdf3>
  804bd8:	d9c01b17 	ldw	r7,108(sp)
  804bdc:	180b883a 	mov	r5,r3
  804be0:	1009883a 	mov	r4,r2
  804be4:	b00d883a 	mov	r6,r22
  804be8:	080a31c0 	call	80a31c <__ltdf2>
  804bec:	103d9116 	blt	r2,zero,804234 <_dtoa_r+0x6dc>
  804bf0:	d9800517 	ldw	r6,20(sp)
  804bf4:	d9000317 	ldw	r4,12(sp)
  804bf8:	3105883a 	add	r2,r6,r4
  804bfc:	e0bd3426 	beq	fp,r2,8040d0 <_dtoa_r+0x578>
  804c00:	04500934 	movhi	r17,16420
  804c04:	0021883a 	mov	r16,zero
  804c08:	b80b883a 	mov	r5,r23
  804c0c:	b009883a 	mov	r4,r22
  804c10:	800d883a 	mov	r6,r16
  804c14:	880f883a 	mov	r7,r17
  804c18:	0809ae00 	call	809ae0 <__muldf3>
  804c1c:	d9401517 	ldw	r5,84(sp)
  804c20:	d9001417 	ldw	r4,80(sp)
  804c24:	880f883a 	mov	r7,r17
  804c28:	000d883a 	mov	r6,zero
  804c2c:	d8801a15 	stw	r2,104(sp)
  804c30:	d8c01b15 	stw	r3,108(sp)
  804c34:	0809ae00 	call	809ae0 <__muldf3>
  804c38:	180b883a 	mov	r5,r3
  804c3c:	1009883a 	mov	r4,r2
  804c40:	1823883a 	mov	r17,r3
  804c44:	1021883a 	mov	r16,r2
  804c48:	080a49c0 	call	80a49c <__fixdfsi>
  804c4c:	1009883a 	mov	r4,r2
  804c50:	102b883a 	mov	r21,r2
  804c54:	080a3a40 	call	80a3a4 <__floatsidf>
  804c58:	880b883a 	mov	r5,r17
  804c5c:	8009883a 	mov	r4,r16
  804c60:	180f883a 	mov	r7,r3
  804c64:	100d883a 	mov	r6,r2
  804c68:	08099ec0 	call	8099ec <__subdf3>
  804c6c:	1021883a 	mov	r16,r2
  804c70:	d9001b17 	ldw	r4,108(sp)
  804c74:	1823883a 	mov	r17,r3
  804c78:	dc001415 	stw	r16,80(sp)
  804c7c:	ad400c04 	addi	r21,r21,48
  804c80:	dc401515 	stw	r17,84(sp)
  804c84:	d8801a17 	ldw	r2,104(sp)
  804c88:	e5400005 	stb	r21,0(fp)
  804c8c:	202f883a 	mov	r23,r4
  804c90:	d9c01b17 	ldw	r7,108(sp)
  804c94:	d9001417 	ldw	r4,80(sp)
  804c98:	880b883a 	mov	r5,r17
  804c9c:	100d883a 	mov	r6,r2
  804ca0:	102d883a 	mov	r22,r2
  804ca4:	e7000044 	addi	fp,fp,1
  804ca8:	080a31c0 	call	80a31c <__ltdf2>
  804cac:	103fc30e 	bge	r2,zero,804bbc <_dtoa_r+0x1064>
  804cb0:	d9000417 	ldw	r4,16(sp)
  804cb4:	d9000d15 	stw	r4,52(sp)
  804cb8:	003d7106 	br	804280 <_dtoa_r+0x728>
  804cbc:	d9801717 	ldw	r6,92(sp)
  804cc0:	00800084 	movi	r2,2
  804cc4:	11bde60e 	bge	r2,r6,804460 <_dtoa_r+0x908>
  804cc8:	203cfb1e 	bne	r4,zero,8040b8 <_dtoa_r+0x560>
  804ccc:	d9001617 	ldw	r4,88(sp)
  804cd0:	900b883a 	mov	r5,r18
  804cd4:	01800144 	movi	r6,5
  804cd8:	000f883a 	mov	r7,zero
  804cdc:	08079a00 	call	8079a0 <__multadd>
  804ce0:	d9000717 	ldw	r4,28(sp)
  804ce4:	100b883a 	mov	r5,r2
  804ce8:	1025883a 	mov	r18,r2
  804cec:	0806e480 	call	806e48 <__mcmp>
  804cf0:	00bcf10e 	bge	zero,r2,8040b8 <_dtoa_r+0x560>
  804cf4:	d8c00d17 	ldw	r3,52(sp)
  804cf8:	d9000517 	ldw	r4,20(sp)
  804cfc:	d8000615 	stw	zero,24(sp)
  804d00:	18c00044 	addi	r3,r3,1
  804d04:	d8c00d15 	stw	r3,52(sp)
  804d08:	00800c44 	movi	r2,49
  804d0c:	27000044 	addi	fp,r4,1
  804d10:	20800005 	stb	r2,0(r4)
  804d14:	003e8906 	br	80473c <_dtoa_r+0xbe4>
  804d18:	d8c00517 	ldw	r3,20(sp)
  804d1c:	003bc206 	br	803c28 <_dtoa_r+0xd0>
  804d20:	01802074 	movhi	r6,129
  804d24:	31bfc704 	addi	r6,r6,-228
  804d28:	30c00917 	ldw	r3,36(r6)
  804d2c:	30800817 	ldw	r2,32(r6)
  804d30:	d9001217 	ldw	r4,72(sp)
  804d34:	d9401317 	ldw	r5,76(sp)
  804d38:	180f883a 	mov	r7,r3
  804d3c:	100d883a 	mov	r6,r2
  804d40:	0809ea40 	call	809ea4 <__divdf3>
  804d44:	948003cc 	andi	r18,r18,15
  804d48:	058000c4 	movi	r22,3
  804d4c:	1029883a 	mov	r20,r2
  804d50:	182b883a 	mov	r21,r3
  804d54:	003c8906 	br	803f7c <_dtoa_r+0x424>
  804d58:	d9001017 	ldw	r4,64(sp)
  804d5c:	d9800917 	ldw	r6,36(sp)
  804d60:	0025883a 	mov	r18,zero
  804d64:	1105c83a 	sub	r2,r2,r4
  804d68:	2089883a 	add	r4,r4,r2
  804d6c:	308d883a 	add	r6,r6,r2
  804d70:	d9001015 	stw	r4,64(sp)
  804d74:	d9800915 	stw	r6,36(sp)
  804d78:	003e3206 	br	804644 <_dtoa_r+0xaec>
  804d7c:	28800044 	addi	r2,r5,1
  804d80:	27000044 	addi	fp,r4,1
  804d84:	20800005 	stb	r2,0(r4)
  804d88:	003e6c06 	br	80473c <_dtoa_r+0xbe4>
  804d8c:	d8800f17 	ldw	r2,60(sp)
  804d90:	00bce016 	blt	zero,r2,804114 <_dtoa_r+0x5bc>
  804d94:	d9800f17 	ldw	r6,60(sp)
  804d98:	303cc51e 	bne	r6,zero,8040b0 <_dtoa_r+0x558>
  804d9c:	0005883a 	mov	r2,zero
  804da0:	00d00534 	movhi	r3,16404
  804da4:	980b883a 	mov	r5,r19
  804da8:	180f883a 	mov	r7,r3
  804dac:	9009883a 	mov	r4,r18
  804db0:	100d883a 	mov	r6,r2
  804db4:	0809ae00 	call	809ae0 <__muldf3>
  804db8:	180b883a 	mov	r5,r3
  804dbc:	a80f883a 	mov	r7,r21
  804dc0:	1009883a 	mov	r4,r2
  804dc4:	a00d883a 	mov	r6,r20
  804dc8:	080a2940 	call	80a294 <__gedf2>
  804dcc:	103cb80e 	bge	r2,zero,8040b0 <_dtoa_r+0x558>
  804dd0:	0027883a 	mov	r19,zero
  804dd4:	0025883a 	mov	r18,zero
  804dd8:	003fc606 	br	804cf4 <_dtoa_r+0x119c>
  804ddc:	99400117 	ldw	r5,4(r19)
  804de0:	d9001617 	ldw	r4,88(sp)
  804de4:	080726c0 	call	80726c <_Balloc>
  804de8:	99800417 	ldw	r6,16(r19)
  804dec:	11000304 	addi	r4,r2,12
  804df0:	99400304 	addi	r5,r19,12
  804df4:	318d883a 	add	r6,r6,r6
  804df8:	318d883a 	add	r6,r6,r6
  804dfc:	31800204 	addi	r6,r6,8
  804e00:	1023883a 	mov	r17,r2
  804e04:	0806ad40 	call	806ad4 <memcpy>
  804e08:	d9001617 	ldw	r4,88(sp)
  804e0c:	880b883a 	mov	r5,r17
  804e10:	01800044 	movi	r6,1
  804e14:	08076300 	call	807630 <__lshift>
  804e18:	100b883a 	mov	r5,r2
  804e1c:	003d9c06 	br	804490 <_dtoa_r+0x938>
  804e20:	00800e44 	movi	r2,57
  804e24:	b8807026 	beq	r23,r2,804fe8 <_dtoa_r+0x1490>
  804e28:	b8800044 	addi	r2,r23,1
  804e2c:	b7000044 	addi	fp,r22,1
  804e30:	b0800005 	stb	r2,0(r22)
  804e34:	003e4106 	br	80473c <_dtoa_r+0xbe4>
  804e38:	d8800317 	ldw	r2,12(sp)
  804e3c:	01802074 	movhi	r6,129
  804e40:	31bf9504 	addi	r6,r6,-428
  804e44:	b009883a 	mov	r4,r22
  804e48:	100e90fa 	slli	r7,r2,3
  804e4c:	b80b883a 	mov	r5,r23
  804e50:	398f883a 	add	r7,r7,r6
  804e54:	38bffe17 	ldw	r2,-8(r7)
  804e58:	d9800517 	ldw	r6,20(sp)
  804e5c:	38ffff17 	ldw	r3,-4(r7)
  804e60:	37000044 	addi	fp,r6,1
  804e64:	180f883a 	mov	r7,r3
  804e68:	100d883a 	mov	r6,r2
  804e6c:	0809ae00 	call	809ae0 <__muldf3>
  804e70:	a80b883a 	mov	r5,r21
  804e74:	a009883a 	mov	r4,r20
  804e78:	182f883a 	mov	r23,r3
  804e7c:	102d883a 	mov	r22,r2
  804e80:	080a49c0 	call	80a49c <__fixdfsi>
  804e84:	1009883a 	mov	r4,r2
  804e88:	1027883a 	mov	r19,r2
  804e8c:	080a3a40 	call	80a3a4 <__floatsidf>
  804e90:	a80b883a 	mov	r5,r21
  804e94:	a009883a 	mov	r4,r20
  804e98:	180f883a 	mov	r7,r3
  804e9c:	100d883a 	mov	r6,r2
  804ea0:	08099ec0 	call	8099ec <__subdf3>
  804ea4:	180b883a 	mov	r5,r3
  804ea8:	d8c00517 	ldw	r3,20(sp)
  804eac:	9cc00c04 	addi	r19,r19,48
  804eb0:	1009883a 	mov	r4,r2
  804eb4:	1cc00005 	stb	r19,0(r3)
  804eb8:	2021883a 	mov	r16,r4
  804ebc:	d9000317 	ldw	r4,12(sp)
  804ec0:	00800044 	movi	r2,1
  804ec4:	2823883a 	mov	r17,r5
  804ec8:	20802226 	beq	r4,r2,804f54 <_dtoa_r+0x13fc>
  804ecc:	1029883a 	mov	r20,r2
  804ed0:	0005883a 	mov	r2,zero
  804ed4:	00d00934 	movhi	r3,16420
  804ed8:	180f883a 	mov	r7,r3
  804edc:	100d883a 	mov	r6,r2
  804ee0:	880b883a 	mov	r5,r17
  804ee4:	8009883a 	mov	r4,r16
  804ee8:	0809ae00 	call	809ae0 <__muldf3>
  804eec:	180b883a 	mov	r5,r3
  804ef0:	1009883a 	mov	r4,r2
  804ef4:	1823883a 	mov	r17,r3
  804ef8:	1021883a 	mov	r16,r2
  804efc:	080a49c0 	call	80a49c <__fixdfsi>
  804f00:	1009883a 	mov	r4,r2
  804f04:	102b883a 	mov	r21,r2
  804f08:	080a3a40 	call	80a3a4 <__floatsidf>
  804f0c:	880b883a 	mov	r5,r17
  804f10:	8009883a 	mov	r4,r16
  804f14:	180f883a 	mov	r7,r3
  804f18:	100d883a 	mov	r6,r2
  804f1c:	08099ec0 	call	8099ec <__subdf3>
  804f20:	180b883a 	mov	r5,r3
  804f24:	d8c00517 	ldw	r3,20(sp)
  804f28:	1009883a 	mov	r4,r2
  804f2c:	ad400c04 	addi	r21,r21,48
  804f30:	1d05883a 	add	r2,r3,r20
  804f34:	15400005 	stb	r21,0(r2)
  804f38:	2021883a 	mov	r16,r4
  804f3c:	d9000317 	ldw	r4,12(sp)
  804f40:	a5000044 	addi	r20,r20,1
  804f44:	2823883a 	mov	r17,r5
  804f48:	a13fe11e 	bne	r20,r4,804ed0 <_dtoa_r+0x1378>
  804f4c:	e505883a 	add	r2,fp,r20
  804f50:	173fffc4 	addi	fp,r2,-1
  804f54:	0025883a 	mov	r18,zero
  804f58:	04cff834 	movhi	r19,16352
  804f5c:	b009883a 	mov	r4,r22
  804f60:	b80b883a 	mov	r5,r23
  804f64:	900d883a 	mov	r6,r18
  804f68:	980f883a 	mov	r7,r19
  804f6c:	0809a6c0 	call	809a6c <__adddf3>
  804f70:	180b883a 	mov	r5,r3
  804f74:	1009883a 	mov	r4,r2
  804f78:	800d883a 	mov	r6,r16
  804f7c:	880f883a 	mov	r7,r17
  804f80:	080a31c0 	call	80a31c <__ltdf2>
  804f84:	103cab16 	blt	r2,zero,804234 <_dtoa_r+0x6dc>
  804f88:	0009883a 	mov	r4,zero
  804f8c:	980b883a 	mov	r5,r19
  804f90:	b80f883a 	mov	r7,r23
  804f94:	b00d883a 	mov	r6,r22
  804f98:	08099ec0 	call	8099ec <__subdf3>
  804f9c:	180b883a 	mov	r5,r3
  804fa0:	880f883a 	mov	r7,r17
  804fa4:	1009883a 	mov	r4,r2
  804fa8:	800d883a 	mov	r6,r16
  804fac:	080a20c0 	call	80a20c <__gtdf2>
  804fb0:	00bc470e 	bge	zero,r2,8040d0 <_dtoa_r+0x578>
  804fb4:	00c00c04 	movi	r3,48
  804fb8:	e73fffc4 	addi	fp,fp,-1
  804fbc:	e0800007 	ldb	r2,0(fp)
  804fc0:	10fffd26 	beq	r2,r3,804fb8 <_dtoa_r+0x1460>
  804fc4:	d9800417 	ldw	r6,16(sp)
  804fc8:	e7000044 	addi	fp,fp,1
  804fcc:	d9800d15 	stw	r6,52(sp)
  804fd0:	003cab06 	br	804280 <_dtoa_r+0x728>
  804fd4:	d8c00f17 	ldw	r3,60(sp)
  804fd8:	d9001117 	ldw	r4,68(sp)
  804fdc:	20e1c83a 	sub	r16,r4,r3
  804fe0:	0007883a 	mov	r3,zero
  804fe4:	003d9b06 	br	804654 <_dtoa_r+0xafc>
  804fe8:	00800e44 	movi	r2,57
  804fec:	b0800005 	stb	r2,0(r22)
  804ff0:	b5800044 	addi	r22,r22,1
  804ff4:	003dc106 	br	8046fc <_dtoa_r+0xba4>
  804ff8:	05800084 	movi	r22,2
  804ffc:	003bf706 	br	803fdc <_dtoa_r+0x484>
  805000:	d9000f17 	ldw	r4,60(sp)
  805004:	013c000e 	bge	zero,r4,804008 <_dtoa_r+0x4b0>
  805008:	d9800e17 	ldw	r6,56(sp)
  80500c:	01bc300e 	bge	zero,r6,8040d0 <_dtoa_r+0x578>
  805010:	0005883a 	mov	r2,zero
  805014:	00d00934 	movhi	r3,16420
  805018:	a80b883a 	mov	r5,r21
  80501c:	180f883a 	mov	r7,r3
  805020:	a009883a 	mov	r4,r20
  805024:	100d883a 	mov	r6,r2
  805028:	0809ae00 	call	809ae0 <__muldf3>
  80502c:	b1000044 	addi	r4,r22,1
  805030:	1021883a 	mov	r16,r2
  805034:	1823883a 	mov	r17,r3
  805038:	080a3a40 	call	80a3a4 <__floatsidf>
  80503c:	880b883a 	mov	r5,r17
  805040:	8009883a 	mov	r4,r16
  805044:	180f883a 	mov	r7,r3
  805048:	100d883a 	mov	r6,r2
  80504c:	0809ae00 	call	809ae0 <__muldf3>
  805050:	0011883a 	mov	r8,zero
  805054:	02500734 	movhi	r9,16412
  805058:	180b883a 	mov	r5,r3
  80505c:	480f883a 	mov	r7,r9
  805060:	1009883a 	mov	r4,r2
  805064:	400d883a 	mov	r6,r8
  805068:	0809a6c0 	call	809a6c <__adddf3>
  80506c:	102d883a 	mov	r22,r2
  805070:	00bf3034 	movhi	r2,64704
  805074:	10ef883a 	add	r23,r2,r3
  805078:	d8800d17 	ldw	r2,52(sp)
  80507c:	d8c00e17 	ldw	r3,56(sp)
  805080:	8029883a 	mov	r20,r16
  805084:	10bfffc4 	addi	r2,r2,-1
  805088:	882b883a 	mov	r21,r17
  80508c:	d8800415 	stw	r2,16(sp)
  805090:	d8c00315 	stw	r3,12(sp)
  805094:	003e8306 	br	804aa4 <_dtoa_r+0xf4c>
  805098:	d8800117 	ldw	r2,4(sp)
  80509c:	dc001117 	ldw	r16,68(sp)
  8050a0:	dc801017 	ldw	r18,64(sp)
  8050a4:	00c00d84 	movi	r3,54
  8050a8:	1887c83a 	sub	r3,r3,r2
  8050ac:	003d6906 	br	804654 <_dtoa_r+0xafc>
  8050b0:	01800044 	movi	r6,1
  8050b4:	3021883a 	mov	r16,r6
  8050b8:	d9800f15 	stw	r6,60(sp)
  8050bc:	d9802615 	stw	r6,152(sp)
  8050c0:	d9800e15 	stw	r6,56(sp)
  8050c4:	003b9306 	br	803f14 <_dtoa_r+0x3bc>
  8050c8:	b021883a 	mov	r16,r22
  8050cc:	dd800f15 	stw	r22,60(sp)
  8050d0:	003b9006 	br	803f14 <_dtoa_r+0x3bc>
  8050d4:	103e221e 	bne	r2,zero,804960 <_dtoa_r+0xe08>
  8050d8:	b880004c 	andi	r2,r23,1
  8050dc:	1005003a 	cmpeq	r2,r2,zero
  8050e0:	103e1f1e 	bne	r2,zero,804960 <_dtoa_r+0xe08>
  8050e4:	003e1b06 	br	804954 <_dtoa_r+0xdfc>
  8050e8:	d9001617 	ldw	r4,88(sp)
  8050ec:	980b883a 	mov	r5,r19
  8050f0:	01800284 	movi	r6,10
  8050f4:	000f883a 	mov	r7,zero
  8050f8:	08079a00 	call	8079a0 <__multadd>
  8050fc:	d8c00e17 	ldw	r3,56(sp)
  805100:	1027883a 	mov	r19,r2
  805104:	d8c00f15 	stw	r3,60(sp)
  805108:	003cd306 	br	804458 <_dtoa_r+0x900>

0080510c <_fflush_r>:
  80510c:	defffb04 	addi	sp,sp,-20
  805110:	dcc00315 	stw	r19,12(sp)
  805114:	dc800215 	stw	r18,8(sp)
  805118:	dfc00415 	stw	ra,16(sp)
  80511c:	dc400115 	stw	r17,4(sp)
  805120:	dc000015 	stw	r16,0(sp)
  805124:	2027883a 	mov	r19,r4
  805128:	2825883a 	mov	r18,r5
  80512c:	20000226 	beq	r4,zero,805138 <_fflush_r+0x2c>
  805130:	20800e17 	ldw	r2,56(r4)
  805134:	10005626 	beq	r2,zero,805290 <_fflush_r+0x184>
  805138:	9100030b 	ldhu	r4,12(r18)
  80513c:	20ffffcc 	andi	r3,r4,65535
  805140:	18e0001c 	xori	r3,r3,32768
  805144:	18e00004 	addi	r3,r3,-32768
  805148:	1880020c 	andi	r2,r3,8
  80514c:	1000261e 	bne	r2,zero,8051e8 <_fflush_r+0xdc>
  805150:	90c00117 	ldw	r3,4(r18)
  805154:	20820014 	ori	r2,r4,2048
  805158:	9080030d 	sth	r2,12(r18)
  80515c:	1009883a 	mov	r4,r2
  805160:	00c0400e 	bge	zero,r3,805264 <_fflush_r+0x158>
  805164:	92000a17 	ldw	r8,40(r18)
  805168:	40004026 	beq	r8,zero,80526c <_fflush_r+0x160>
  80516c:	2084000c 	andi	r2,r4,4096
  805170:	10005326 	beq	r2,zero,8052c0 <_fflush_r+0x1b4>
  805174:	94001417 	ldw	r16,80(r18)
  805178:	9080030b 	ldhu	r2,12(r18)
  80517c:	1080010c 	andi	r2,r2,4
  805180:	1000481e 	bne	r2,zero,8052a4 <_fflush_r+0x198>
  805184:	91400717 	ldw	r5,28(r18)
  805188:	9809883a 	mov	r4,r19
  80518c:	800d883a 	mov	r6,r16
  805190:	000f883a 	mov	r7,zero
  805194:	403ee83a 	callr	r8
  805198:	8080261e 	bne	r16,r2,805234 <_fflush_r+0x128>
  80519c:	9080030b 	ldhu	r2,12(r18)
  8051a0:	91000417 	ldw	r4,16(r18)
  8051a4:	90000115 	stw	zero,4(r18)
  8051a8:	10bdffcc 	andi	r2,r2,63487
  8051ac:	10ffffcc 	andi	r3,r2,65535
  8051b0:	18c4000c 	andi	r3,r3,4096
  8051b4:	9080030d 	sth	r2,12(r18)
  8051b8:	91000015 	stw	r4,0(r18)
  8051bc:	18002b26 	beq	r3,zero,80526c <_fflush_r+0x160>
  8051c0:	0007883a 	mov	r3,zero
  8051c4:	1805883a 	mov	r2,r3
  8051c8:	94001415 	stw	r16,80(r18)
  8051cc:	dfc00417 	ldw	ra,16(sp)
  8051d0:	dcc00317 	ldw	r19,12(sp)
  8051d4:	dc800217 	ldw	r18,8(sp)
  8051d8:	dc400117 	ldw	r17,4(sp)
  8051dc:	dc000017 	ldw	r16,0(sp)
  8051e0:	dec00504 	addi	sp,sp,20
  8051e4:	f800283a 	ret
  8051e8:	94400417 	ldw	r17,16(r18)
  8051ec:	88001f26 	beq	r17,zero,80526c <_fflush_r+0x160>
  8051f0:	90800017 	ldw	r2,0(r18)
  8051f4:	18c000cc 	andi	r3,r3,3
  8051f8:	94400015 	stw	r17,0(r18)
  8051fc:	1461c83a 	sub	r16,r2,r17
  805200:	18002526 	beq	r3,zero,805298 <_fflush_r+0x18c>
  805204:	0005883a 	mov	r2,zero
  805208:	90800215 	stw	r2,8(r18)
  80520c:	0400170e 	bge	zero,r16,80526c <_fflush_r+0x160>
  805210:	90c00917 	ldw	r3,36(r18)
  805214:	91400717 	ldw	r5,28(r18)
  805218:	880d883a 	mov	r6,r17
  80521c:	800f883a 	mov	r7,r16
  805220:	9809883a 	mov	r4,r19
  805224:	183ee83a 	callr	r3
  805228:	88a3883a 	add	r17,r17,r2
  80522c:	80a1c83a 	sub	r16,r16,r2
  805230:	00bff616 	blt	zero,r2,80520c <_fflush_r+0x100>
  805234:	9080030b 	ldhu	r2,12(r18)
  805238:	00ffffc4 	movi	r3,-1
  80523c:	10801014 	ori	r2,r2,64
  805240:	9080030d 	sth	r2,12(r18)
  805244:	1805883a 	mov	r2,r3
  805248:	dfc00417 	ldw	ra,16(sp)
  80524c:	dcc00317 	ldw	r19,12(sp)
  805250:	dc800217 	ldw	r18,8(sp)
  805254:	dc400117 	ldw	r17,4(sp)
  805258:	dc000017 	ldw	r16,0(sp)
  80525c:	dec00504 	addi	sp,sp,20
  805260:	f800283a 	ret
  805264:	90800f17 	ldw	r2,60(r18)
  805268:	00bfbe16 	blt	zero,r2,805164 <_fflush_r+0x58>
  80526c:	0007883a 	mov	r3,zero
  805270:	1805883a 	mov	r2,r3
  805274:	dfc00417 	ldw	ra,16(sp)
  805278:	dcc00317 	ldw	r19,12(sp)
  80527c:	dc800217 	ldw	r18,8(sp)
  805280:	dc400117 	ldw	r17,4(sp)
  805284:	dc000017 	ldw	r16,0(sp)
  805288:	dec00504 	addi	sp,sp,20
  80528c:	f800283a 	ret
  805290:	08053a40 	call	8053a4 <__sinit>
  805294:	003fa806 	br	805138 <_fflush_r+0x2c>
  805298:	90800517 	ldw	r2,20(r18)
  80529c:	90800215 	stw	r2,8(r18)
  8052a0:	003fda06 	br	80520c <_fflush_r+0x100>
  8052a4:	90800117 	ldw	r2,4(r18)
  8052a8:	90c00c17 	ldw	r3,48(r18)
  8052ac:	80a1c83a 	sub	r16,r16,r2
  8052b0:	183fb426 	beq	r3,zero,805184 <_fflush_r+0x78>
  8052b4:	90800f17 	ldw	r2,60(r18)
  8052b8:	80a1c83a 	sub	r16,r16,r2
  8052bc:	003fb106 	br	805184 <_fflush_r+0x78>
  8052c0:	91400717 	ldw	r5,28(r18)
  8052c4:	9809883a 	mov	r4,r19
  8052c8:	000d883a 	mov	r6,zero
  8052cc:	01c00044 	movi	r7,1
  8052d0:	403ee83a 	callr	r8
  8052d4:	1021883a 	mov	r16,r2
  8052d8:	00bfffc4 	movi	r2,-1
  8052dc:	80800226 	beq	r16,r2,8052e8 <_fflush_r+0x1dc>
  8052e0:	92000a17 	ldw	r8,40(r18)
  8052e4:	003fa406 	br	805178 <_fflush_r+0x6c>
  8052e8:	98c00017 	ldw	r3,0(r19)
  8052ec:	00800744 	movi	r2,29
  8052f0:	18bfde26 	beq	r3,r2,80526c <_fflush_r+0x160>
  8052f4:	9080030b 	ldhu	r2,12(r18)
  8052f8:	8007883a 	mov	r3,r16
  8052fc:	10801014 	ori	r2,r2,64
  805300:	9080030d 	sth	r2,12(r18)
  805304:	003fcf06 	br	805244 <_fflush_r+0x138>

00805308 <fflush>:
  805308:	01402034 	movhi	r5,128
  80530c:	29544304 	addi	r5,r5,20748
  805310:	2007883a 	mov	r3,r4
  805314:	20000526 	beq	r4,zero,80532c <fflush+0x24>
  805318:	00802074 	movhi	r2,129
  80531c:	1086c704 	addi	r2,r2,6940
  805320:	11000017 	ldw	r4,0(r2)
  805324:	180b883a 	mov	r5,r3
  805328:	080510c1 	jmpi	80510c <_fflush_r>
  80532c:	00802074 	movhi	r2,129
  805330:	1086c804 	addi	r2,r2,6944
  805334:	11000017 	ldw	r4,0(r2)
  805338:	0805ed81 	jmpi	805ed8 <_fwalk_reent>

0080533c <std>:
  80533c:	00802074 	movhi	r2,129
  805340:	10a0ed04 	addi	r2,r2,-31820
  805344:	20800b15 	stw	r2,44(r4)
  805348:	00802074 	movhi	r2,129
  80534c:	10a12804 	addi	r2,r2,-31584
  805350:	20800815 	stw	r2,32(r4)
  805354:	00c02074 	movhi	r3,129
  805358:	18e10904 	addi	r3,r3,-31708
  80535c:	00802074 	movhi	r2,129
  805360:	10a0ef04 	addi	r2,r2,-31812
  805364:	2140030d 	sth	r5,12(r4)
  805368:	2180038d 	sth	r6,14(r4)
  80536c:	20c00915 	stw	r3,36(r4)
  805370:	20800a15 	stw	r2,40(r4)
  805374:	20000015 	stw	zero,0(r4)
  805378:	20000115 	stw	zero,4(r4)
  80537c:	20000215 	stw	zero,8(r4)
  805380:	20000415 	stw	zero,16(r4)
  805384:	20000515 	stw	zero,20(r4)
  805388:	20000615 	stw	zero,24(r4)
  80538c:	21000715 	stw	r4,28(r4)
  805390:	f800283a 	ret

00805394 <__sfp_lock_acquire>:
  805394:	f800283a 	ret

00805398 <__sfp_lock_release>:
  805398:	f800283a 	ret

0080539c <__sinit_lock_acquire>:
  80539c:	f800283a 	ret

008053a0 <__sinit_lock_release>:
  8053a0:	f800283a 	ret

008053a4 <__sinit>:
  8053a4:	20800e17 	ldw	r2,56(r4)
  8053a8:	defffd04 	addi	sp,sp,-12
  8053ac:	dc400115 	stw	r17,4(sp)
  8053b0:	dc000015 	stw	r16,0(sp)
  8053b4:	dfc00215 	stw	ra,8(sp)
  8053b8:	04400044 	movi	r17,1
  8053bc:	01400104 	movi	r5,4
  8053c0:	000d883a 	mov	r6,zero
  8053c4:	2021883a 	mov	r16,r4
  8053c8:	2200bb04 	addi	r8,r4,748
  8053cc:	200f883a 	mov	r7,r4
  8053d0:	10000526 	beq	r2,zero,8053e8 <__sinit+0x44>
  8053d4:	dfc00217 	ldw	ra,8(sp)
  8053d8:	dc400117 	ldw	r17,4(sp)
  8053dc:	dc000017 	ldw	r16,0(sp)
  8053e0:	dec00304 	addi	sp,sp,12
  8053e4:	f800283a 	ret
  8053e8:	21000117 	ldw	r4,4(r4)
  8053ec:	00802034 	movhi	r2,128
  8053f0:	10952204 	addi	r2,r2,21640
  8053f4:	00c000c4 	movi	r3,3
  8053f8:	80800f15 	stw	r2,60(r16)
  8053fc:	80c0b915 	stw	r3,740(r16)
  805400:	8200ba15 	stw	r8,744(r16)
  805404:	84400e15 	stw	r17,56(r16)
  805408:	8000b815 	stw	zero,736(r16)
  80540c:	080533c0 	call	80533c <std>
  805410:	81000217 	ldw	r4,8(r16)
  805414:	880d883a 	mov	r6,r17
  805418:	800f883a 	mov	r7,r16
  80541c:	01400284 	movi	r5,10
  805420:	080533c0 	call	80533c <std>
  805424:	81000317 	ldw	r4,12(r16)
  805428:	800f883a 	mov	r7,r16
  80542c:	01400484 	movi	r5,18
  805430:	01800084 	movi	r6,2
  805434:	dfc00217 	ldw	ra,8(sp)
  805438:	dc400117 	ldw	r17,4(sp)
  80543c:	dc000017 	ldw	r16,0(sp)
  805440:	dec00304 	addi	sp,sp,12
  805444:	080533c1 	jmpi	80533c <std>

00805448 <__fp_lock>:
  805448:	0005883a 	mov	r2,zero
  80544c:	f800283a 	ret

00805450 <__fp_unlock>:
  805450:	0005883a 	mov	r2,zero
  805454:	f800283a 	ret

00805458 <__fp_unlock_all>:
  805458:	00802074 	movhi	r2,129
  80545c:	1086c704 	addi	r2,r2,6940
  805460:	11000017 	ldw	r4,0(r2)
  805464:	01402034 	movhi	r5,128
  805468:	29551404 	addi	r5,r5,21584
  80546c:	0805fa01 	jmpi	805fa0 <_fwalk>

00805470 <__fp_lock_all>:
  805470:	00802074 	movhi	r2,129
  805474:	1086c704 	addi	r2,r2,6940
  805478:	11000017 	ldw	r4,0(r2)
  80547c:	01402034 	movhi	r5,128
  805480:	29551204 	addi	r5,r5,21576
  805484:	0805fa01 	jmpi	805fa0 <_fwalk>

00805488 <_cleanup_r>:
  805488:	01402074 	movhi	r5,129
  80548c:	29621a04 	addi	r5,r5,-30616
  805490:	0805fa01 	jmpi	805fa0 <_fwalk>

00805494 <_cleanup>:
  805494:	00802074 	movhi	r2,129
  805498:	1086c804 	addi	r2,r2,6944
  80549c:	11000017 	ldw	r4,0(r2)
  8054a0:	08054881 	jmpi	805488 <_cleanup_r>

008054a4 <__sfmoreglue>:
  8054a4:	defffc04 	addi	sp,sp,-16
  8054a8:	dc400115 	stw	r17,4(sp)
  8054ac:	2c401724 	muli	r17,r5,92
  8054b0:	dc800215 	stw	r18,8(sp)
  8054b4:	2825883a 	mov	r18,r5
  8054b8:	89400304 	addi	r5,r17,12
  8054bc:	dc000015 	stw	r16,0(sp)
  8054c0:	dfc00315 	stw	ra,12(sp)
  8054c4:	08062b00 	call	8062b0 <_malloc_r>
  8054c8:	0021883a 	mov	r16,zero
  8054cc:	880d883a 	mov	r6,r17
  8054d0:	000b883a 	mov	r5,zero
  8054d4:	10000626 	beq	r2,zero,8054f0 <__sfmoreglue+0x4c>
  8054d8:	11000304 	addi	r4,r2,12
  8054dc:	14800115 	stw	r18,4(r2)
  8054e0:	10000015 	stw	zero,0(r2)
  8054e4:	11000215 	stw	r4,8(r2)
  8054e8:	1021883a 	mov	r16,r2
  8054ec:	0806c540 	call	806c54 <memset>
  8054f0:	8005883a 	mov	r2,r16
  8054f4:	dfc00317 	ldw	ra,12(sp)
  8054f8:	dc800217 	ldw	r18,8(sp)
  8054fc:	dc400117 	ldw	r17,4(sp)
  805500:	dc000017 	ldw	r16,0(sp)
  805504:	dec00404 	addi	sp,sp,16
  805508:	f800283a 	ret

0080550c <__sfp>:
  80550c:	defffd04 	addi	sp,sp,-12
  805510:	00802074 	movhi	r2,129
  805514:	1086c804 	addi	r2,r2,6944
  805518:	dc000015 	stw	r16,0(sp)
  80551c:	14000017 	ldw	r16,0(r2)
  805520:	dc400115 	stw	r17,4(sp)
  805524:	dfc00215 	stw	ra,8(sp)
  805528:	80800e17 	ldw	r2,56(r16)
  80552c:	2023883a 	mov	r17,r4
  805530:	10002626 	beq	r2,zero,8055cc <__sfp+0xc0>
  805534:	8400b804 	addi	r16,r16,736
  805538:	80800117 	ldw	r2,4(r16)
  80553c:	81000217 	ldw	r4,8(r16)
  805540:	10ffffc4 	addi	r3,r2,-1
  805544:	18000916 	blt	r3,zero,80556c <__sfp+0x60>
  805548:	2080030f 	ldh	r2,12(r4)
  80554c:	10000b26 	beq	r2,zero,80557c <__sfp+0x70>
  805550:	017fffc4 	movi	r5,-1
  805554:	00000206 	br	805560 <__sfp+0x54>
  805558:	2080030f 	ldh	r2,12(r4)
  80555c:	10000726 	beq	r2,zero,80557c <__sfp+0x70>
  805560:	18ffffc4 	addi	r3,r3,-1
  805564:	21001704 	addi	r4,r4,92
  805568:	197ffb1e 	bne	r3,r5,805558 <__sfp+0x4c>
  80556c:	80800017 	ldw	r2,0(r16)
  805570:	10001926 	beq	r2,zero,8055d8 <__sfp+0xcc>
  805574:	1021883a 	mov	r16,r2
  805578:	003fef06 	br	805538 <__sfp+0x2c>
  80557c:	00bfffc4 	movi	r2,-1
  805580:	00c00044 	movi	r3,1
  805584:	2080038d 	sth	r2,14(r4)
  805588:	20c0030d 	sth	r3,12(r4)
  80558c:	20000015 	stw	zero,0(r4)
  805590:	20000215 	stw	zero,8(r4)
  805594:	20000115 	stw	zero,4(r4)
  805598:	20000415 	stw	zero,16(r4)
  80559c:	20000515 	stw	zero,20(r4)
  8055a0:	20000615 	stw	zero,24(r4)
  8055a4:	20000c15 	stw	zero,48(r4)
  8055a8:	20000d15 	stw	zero,52(r4)
  8055ac:	20001115 	stw	zero,68(r4)
  8055b0:	20001215 	stw	zero,72(r4)
  8055b4:	2005883a 	mov	r2,r4
  8055b8:	dfc00217 	ldw	ra,8(sp)
  8055bc:	dc400117 	ldw	r17,4(sp)
  8055c0:	dc000017 	ldw	r16,0(sp)
  8055c4:	dec00304 	addi	sp,sp,12
  8055c8:	f800283a 	ret
  8055cc:	8009883a 	mov	r4,r16
  8055d0:	08053a40 	call	8053a4 <__sinit>
  8055d4:	003fd706 	br	805534 <__sfp+0x28>
  8055d8:	8809883a 	mov	r4,r17
  8055dc:	01400104 	movi	r5,4
  8055e0:	08054a40 	call	8054a4 <__sfmoreglue>
  8055e4:	80800015 	stw	r2,0(r16)
  8055e8:	103fe21e 	bne	r2,zero,805574 <__sfp+0x68>
  8055ec:	00800304 	movi	r2,12
  8055f0:	0009883a 	mov	r4,zero
  8055f4:	88800015 	stw	r2,0(r17)
  8055f8:	003fee06 	br	8055b4 <__sfp+0xa8>

008055fc <_malloc_trim_r>:
  8055fc:	defffb04 	addi	sp,sp,-20
  805600:	dcc00315 	stw	r19,12(sp)
  805604:	04c02074 	movhi	r19,129
  805608:	9cc11104 	addi	r19,r19,1092
  80560c:	dc800215 	stw	r18,8(sp)
  805610:	dc400115 	stw	r17,4(sp)
  805614:	dc000015 	stw	r16,0(sp)
  805618:	2823883a 	mov	r17,r5
  80561c:	2025883a 	mov	r18,r4
  805620:	dfc00415 	stw	ra,16(sp)
  805624:	080b1700 	call	80b170 <__malloc_lock>
  805628:	98800217 	ldw	r2,8(r19)
  80562c:	9009883a 	mov	r4,r18
  805630:	000b883a 	mov	r5,zero
  805634:	10c00117 	ldw	r3,4(r2)
  805638:	00bfff04 	movi	r2,-4
  80563c:	18a0703a 	and	r16,r3,r2
  805640:	8463c83a 	sub	r17,r16,r17
  805644:	8c43fbc4 	addi	r17,r17,4079
  805648:	8822d33a 	srli	r17,r17,12
  80564c:	0083ffc4 	movi	r2,4095
  805650:	8c7fffc4 	addi	r17,r17,-1
  805654:	8822933a 	slli	r17,r17,12
  805658:	1440060e 	bge	r2,r17,805674 <_malloc_trim_r+0x78>
  80565c:	08083440 	call	808344 <_sbrk_r>
  805660:	98c00217 	ldw	r3,8(r19)
  805664:	9009883a 	mov	r4,r18
  805668:	044bc83a 	sub	r5,zero,r17
  80566c:	80c7883a 	add	r3,r16,r3
  805670:	10c00926 	beq	r2,r3,805698 <_malloc_trim_r+0x9c>
  805674:	080b1900 	call	80b190 <__malloc_unlock>
  805678:	0005883a 	mov	r2,zero
  80567c:	dfc00417 	ldw	ra,16(sp)
  805680:	dcc00317 	ldw	r19,12(sp)
  805684:	dc800217 	ldw	r18,8(sp)
  805688:	dc400117 	ldw	r17,4(sp)
  80568c:	dc000017 	ldw	r16,0(sp)
  805690:	dec00504 	addi	sp,sp,20
  805694:	f800283a 	ret
  805698:	9009883a 	mov	r4,r18
  80569c:	08083440 	call	808344 <_sbrk_r>
  8056a0:	844dc83a 	sub	r6,r16,r17
  8056a4:	00ffffc4 	movi	r3,-1
  8056a8:	9009883a 	mov	r4,r18
  8056ac:	000b883a 	mov	r5,zero
  8056b0:	01c02074 	movhi	r7,129
  8056b4:	39cdaf04 	addi	r7,r7,14012
  8056b8:	31800054 	ori	r6,r6,1
  8056bc:	10c00926 	beq	r2,r3,8056e4 <_malloc_trim_r+0xe8>
  8056c0:	38800017 	ldw	r2,0(r7)
  8056c4:	98c00217 	ldw	r3,8(r19)
  8056c8:	9009883a 	mov	r4,r18
  8056cc:	1445c83a 	sub	r2,r2,r17
  8056d0:	38800015 	stw	r2,0(r7)
  8056d4:	19800115 	stw	r6,4(r3)
  8056d8:	080b1900 	call	80b190 <__malloc_unlock>
  8056dc:	00800044 	movi	r2,1
  8056e0:	003fe606 	br	80567c <_malloc_trim_r+0x80>
  8056e4:	08083440 	call	808344 <_sbrk_r>
  8056e8:	99800217 	ldw	r6,8(r19)
  8056ec:	100f883a 	mov	r7,r2
  8056f0:	9009883a 	mov	r4,r18
  8056f4:	1187c83a 	sub	r3,r2,r6
  8056f8:	008003c4 	movi	r2,15
  8056fc:	19400054 	ori	r5,r3,1
  805700:	10ffdc0e 	bge	r2,r3,805674 <_malloc_trim_r+0x78>
  805704:	00802074 	movhi	r2,129
  805708:	1086cc04 	addi	r2,r2,6960
  80570c:	10c00017 	ldw	r3,0(r2)
  805710:	00802074 	movhi	r2,129
  805714:	108daf04 	addi	r2,r2,14012
  805718:	31400115 	stw	r5,4(r6)
  80571c:	38c7c83a 	sub	r3,r7,r3
  805720:	10c00015 	stw	r3,0(r2)
  805724:	003fd306 	br	805674 <_malloc_trim_r+0x78>

00805728 <_free_r>:
  805728:	defffd04 	addi	sp,sp,-12
  80572c:	dc400115 	stw	r17,4(sp)
  805730:	dc000015 	stw	r16,0(sp)
  805734:	dfc00215 	stw	ra,8(sp)
  805738:	2821883a 	mov	r16,r5
  80573c:	2023883a 	mov	r17,r4
  805740:	28005a26 	beq	r5,zero,8058ac <_free_r+0x184>
  805744:	080b1700 	call	80b170 <__malloc_lock>
  805748:	823ffe04 	addi	r8,r16,-8
  80574c:	41400117 	ldw	r5,4(r8)
  805750:	00bfff84 	movi	r2,-2
  805754:	02802074 	movhi	r10,129
  805758:	52811104 	addi	r10,r10,1092
  80575c:	288e703a 	and	r7,r5,r2
  805760:	41cd883a 	add	r6,r8,r7
  805764:	30c00117 	ldw	r3,4(r6)
  805768:	51000217 	ldw	r4,8(r10)
  80576c:	00bfff04 	movi	r2,-4
  805770:	1892703a 	and	r9,r3,r2
  805774:	5017883a 	mov	r11,r10
  805778:	31006726 	beq	r6,r4,805918 <_free_r+0x1f0>
  80577c:	2880004c 	andi	r2,r5,1
  805780:	1005003a 	cmpeq	r2,r2,zero
  805784:	32400115 	stw	r9,4(r6)
  805788:	10001a1e 	bne	r2,zero,8057f4 <_free_r+0xcc>
  80578c:	000b883a 	mov	r5,zero
  805790:	3247883a 	add	r3,r6,r9
  805794:	18800117 	ldw	r2,4(r3)
  805798:	1080004c 	andi	r2,r2,1
  80579c:	1000231e 	bne	r2,zero,80582c <_free_r+0x104>
  8057a0:	280ac03a 	cmpne	r5,r5,zero
  8057a4:	3a4f883a 	add	r7,r7,r9
  8057a8:	2800451e 	bne	r5,zero,8058c0 <_free_r+0x198>
  8057ac:	31000217 	ldw	r4,8(r6)
  8057b0:	00802074 	movhi	r2,129
  8057b4:	10811304 	addi	r2,r2,1100
  8057b8:	20807b26 	beq	r4,r2,8059a8 <_free_r+0x280>
  8057bc:	30800317 	ldw	r2,12(r6)
  8057c0:	3a07883a 	add	r3,r7,r8
  8057c4:	19c00015 	stw	r7,0(r3)
  8057c8:	11000215 	stw	r4,8(r2)
  8057cc:	20800315 	stw	r2,12(r4)
  8057d0:	38800054 	ori	r2,r7,1
  8057d4:	40800115 	stw	r2,4(r8)
  8057d8:	28001a26 	beq	r5,zero,805844 <_free_r+0x11c>
  8057dc:	8809883a 	mov	r4,r17
  8057e0:	dfc00217 	ldw	ra,8(sp)
  8057e4:	dc400117 	ldw	r17,4(sp)
  8057e8:	dc000017 	ldw	r16,0(sp)
  8057ec:	dec00304 	addi	sp,sp,12
  8057f0:	080b1901 	jmpi	80b190 <__malloc_unlock>
  8057f4:	80bffe17 	ldw	r2,-8(r16)
  8057f8:	50c00204 	addi	r3,r10,8
  8057fc:	4091c83a 	sub	r8,r8,r2
  805800:	41000217 	ldw	r4,8(r8)
  805804:	388f883a 	add	r7,r7,r2
  805808:	20c06126 	beq	r4,r3,805990 <_free_r+0x268>
  80580c:	40800317 	ldw	r2,12(r8)
  805810:	3247883a 	add	r3,r6,r9
  805814:	000b883a 	mov	r5,zero
  805818:	11000215 	stw	r4,8(r2)
  80581c:	20800315 	stw	r2,12(r4)
  805820:	18800117 	ldw	r2,4(r3)
  805824:	1080004c 	andi	r2,r2,1
  805828:	103fdd26 	beq	r2,zero,8057a0 <_free_r+0x78>
  80582c:	38800054 	ori	r2,r7,1
  805830:	3a07883a 	add	r3,r7,r8
  805834:	280ac03a 	cmpne	r5,r5,zero
  805838:	40800115 	stw	r2,4(r8)
  80583c:	19c00015 	stw	r7,0(r3)
  805840:	283fe61e 	bne	r5,zero,8057dc <_free_r+0xb4>
  805844:	00807fc4 	movi	r2,511
  805848:	11c01f2e 	bgeu	r2,r7,8058c8 <_free_r+0x1a0>
  80584c:	3806d27a 	srli	r3,r7,9
  805850:	1800481e 	bne	r3,zero,805974 <_free_r+0x24c>
  805854:	3804d0fa 	srli	r2,r7,3
  805858:	100690fa 	slli	r3,r2,3
  80585c:	1acd883a 	add	r6,r3,r11
  805860:	31400217 	ldw	r5,8(r6)
  805864:	31405926 	beq	r6,r5,8059cc <_free_r+0x2a4>
  805868:	28800117 	ldw	r2,4(r5)
  80586c:	00ffff04 	movi	r3,-4
  805870:	10c4703a 	and	r2,r2,r3
  805874:	3880022e 	bgeu	r7,r2,805880 <_free_r+0x158>
  805878:	29400217 	ldw	r5,8(r5)
  80587c:	317ffa1e 	bne	r6,r5,805868 <_free_r+0x140>
  805880:	29800317 	ldw	r6,12(r5)
  805884:	41800315 	stw	r6,12(r8)
  805888:	41400215 	stw	r5,8(r8)
  80588c:	8809883a 	mov	r4,r17
  805890:	2a000315 	stw	r8,12(r5)
  805894:	32000215 	stw	r8,8(r6)
  805898:	dfc00217 	ldw	ra,8(sp)
  80589c:	dc400117 	ldw	r17,4(sp)
  8058a0:	dc000017 	ldw	r16,0(sp)
  8058a4:	dec00304 	addi	sp,sp,12
  8058a8:	080b1901 	jmpi	80b190 <__malloc_unlock>
  8058ac:	dfc00217 	ldw	ra,8(sp)
  8058b0:	dc400117 	ldw	r17,4(sp)
  8058b4:	dc000017 	ldw	r16,0(sp)
  8058b8:	dec00304 	addi	sp,sp,12
  8058bc:	f800283a 	ret
  8058c0:	31000217 	ldw	r4,8(r6)
  8058c4:	003fbd06 	br	8057bc <_free_r+0x94>
  8058c8:	3806d0fa 	srli	r3,r7,3
  8058cc:	00800044 	movi	r2,1
  8058d0:	51400117 	ldw	r5,4(r10)
  8058d4:	180890fa 	slli	r4,r3,3
  8058d8:	1807d0ba 	srai	r3,r3,2
  8058dc:	22c9883a 	add	r4,r4,r11
  8058e0:	21800217 	ldw	r6,8(r4)
  8058e4:	10c4983a 	sll	r2,r2,r3
  8058e8:	41000315 	stw	r4,12(r8)
  8058ec:	41800215 	stw	r6,8(r8)
  8058f0:	288ab03a 	or	r5,r5,r2
  8058f4:	22000215 	stw	r8,8(r4)
  8058f8:	8809883a 	mov	r4,r17
  8058fc:	51400115 	stw	r5,4(r10)
  805900:	32000315 	stw	r8,12(r6)
  805904:	dfc00217 	ldw	ra,8(sp)
  805908:	dc400117 	ldw	r17,4(sp)
  80590c:	dc000017 	ldw	r16,0(sp)
  805910:	dec00304 	addi	sp,sp,12
  805914:	080b1901 	jmpi	80b190 <__malloc_unlock>
  805918:	2880004c 	andi	r2,r5,1
  80591c:	3a4d883a 	add	r6,r7,r9
  805920:	1000071e 	bne	r2,zero,805940 <_free_r+0x218>
  805924:	80bffe17 	ldw	r2,-8(r16)
  805928:	4091c83a 	sub	r8,r8,r2
  80592c:	41000317 	ldw	r4,12(r8)
  805930:	40c00217 	ldw	r3,8(r8)
  805934:	308d883a 	add	r6,r6,r2
  805938:	20c00215 	stw	r3,8(r4)
  80593c:	19000315 	stw	r4,12(r3)
  805940:	00802074 	movhi	r2,129
  805944:	1086cb04 	addi	r2,r2,6956
  805948:	11000017 	ldw	r4,0(r2)
  80594c:	30c00054 	ori	r3,r6,1
  805950:	52000215 	stw	r8,8(r10)
  805954:	40c00115 	stw	r3,4(r8)
  805958:	313fa036 	bltu	r6,r4,8057dc <_free_r+0xb4>
  80595c:	00802074 	movhi	r2,129
  805960:	108da304 	addi	r2,r2,13964
  805964:	11400017 	ldw	r5,0(r2)
  805968:	8809883a 	mov	r4,r17
  80596c:	08055fc0 	call	8055fc <_malloc_trim_r>
  805970:	003f9a06 	br	8057dc <_free_r+0xb4>
  805974:	00800104 	movi	r2,4
  805978:	10c0072e 	bgeu	r2,r3,805998 <_free_r+0x270>
  80597c:	00800504 	movi	r2,20
  805980:	10c01936 	bltu	r2,r3,8059e8 <_free_r+0x2c0>
  805984:	188016c4 	addi	r2,r3,91
  805988:	100690fa 	slli	r3,r2,3
  80598c:	003fb306 	br	80585c <_free_r+0x134>
  805990:	01400044 	movi	r5,1
  805994:	003f7e06 	br	805790 <_free_r+0x68>
  805998:	3804d1ba 	srli	r2,r7,6
  80599c:	10800e04 	addi	r2,r2,56
  8059a0:	100690fa 	slli	r3,r2,3
  8059a4:	003fad06 	br	80585c <_free_r+0x134>
  8059a8:	22000315 	stw	r8,12(r4)
  8059ac:	22000215 	stw	r8,8(r4)
  8059b0:	3a05883a 	add	r2,r7,r8
  8059b4:	38c00054 	ori	r3,r7,1
  8059b8:	11c00015 	stw	r7,0(r2)
  8059bc:	41000215 	stw	r4,8(r8)
  8059c0:	40c00115 	stw	r3,4(r8)
  8059c4:	41000315 	stw	r4,12(r8)
  8059c8:	003f8406 	br	8057dc <_free_r+0xb4>
  8059cc:	1005d0ba 	srai	r2,r2,2
  8059d0:	00c00044 	movi	r3,1
  8059d4:	51000117 	ldw	r4,4(r10)
  8059d8:	1886983a 	sll	r3,r3,r2
  8059dc:	20c8b03a 	or	r4,r4,r3
  8059e0:	51000115 	stw	r4,4(r10)
  8059e4:	003fa706 	br	805884 <_free_r+0x15c>
  8059e8:	00801504 	movi	r2,84
  8059ec:	10c00436 	bltu	r2,r3,805a00 <_free_r+0x2d8>
  8059f0:	3804d33a 	srli	r2,r7,12
  8059f4:	10801b84 	addi	r2,r2,110
  8059f8:	100690fa 	slli	r3,r2,3
  8059fc:	003f9706 	br	80585c <_free_r+0x134>
  805a00:	00805504 	movi	r2,340
  805a04:	10c00436 	bltu	r2,r3,805a18 <_free_r+0x2f0>
  805a08:	3804d3fa 	srli	r2,r7,15
  805a0c:	10801dc4 	addi	r2,r2,119
  805a10:	100690fa 	slli	r3,r2,3
  805a14:	003f9106 	br	80585c <_free_r+0x134>
  805a18:	00815504 	movi	r2,1364
  805a1c:	10c0032e 	bgeu	r2,r3,805a2c <_free_r+0x304>
  805a20:	00801f84 	movi	r2,126
  805a24:	00c0fc04 	movi	r3,1008
  805a28:	003f8c06 	br	80585c <_free_r+0x134>
  805a2c:	3804d4ba 	srli	r2,r7,18
  805a30:	10801f04 	addi	r2,r2,124
  805a34:	100690fa 	slli	r3,r2,3
  805a38:	003f8806 	br	80585c <_free_r+0x134>

00805a3c <__sfvwrite_r>:
  805a3c:	30800217 	ldw	r2,8(r6)
  805a40:	defff504 	addi	sp,sp,-44
  805a44:	df000915 	stw	fp,36(sp)
  805a48:	dd800715 	stw	r22,28(sp)
  805a4c:	dc800315 	stw	r18,12(sp)
  805a50:	dfc00a15 	stw	ra,40(sp)
  805a54:	ddc00815 	stw	r23,32(sp)
  805a58:	dd400615 	stw	r21,24(sp)
  805a5c:	dd000515 	stw	r20,20(sp)
  805a60:	dcc00415 	stw	r19,16(sp)
  805a64:	dc400215 	stw	r17,8(sp)
  805a68:	dc000115 	stw	r16,4(sp)
  805a6c:	302d883a 	mov	r22,r6
  805a70:	2039883a 	mov	fp,r4
  805a74:	2825883a 	mov	r18,r5
  805a78:	10001c26 	beq	r2,zero,805aec <__sfvwrite_r+0xb0>
  805a7c:	29c0030b 	ldhu	r7,12(r5)
  805a80:	3880020c 	andi	r2,r7,8
  805a84:	10002726 	beq	r2,zero,805b24 <__sfvwrite_r+0xe8>
  805a88:	28800417 	ldw	r2,16(r5)
  805a8c:	10002526 	beq	r2,zero,805b24 <__sfvwrite_r+0xe8>
  805a90:	3880008c 	andi	r2,r7,2
  805a94:	b5400017 	ldw	r21,0(r22)
  805a98:	10002826 	beq	r2,zero,805b3c <__sfvwrite_r+0x100>
  805a9c:	0021883a 	mov	r16,zero
  805aa0:	0023883a 	mov	r17,zero
  805aa4:	880d883a 	mov	r6,r17
  805aa8:	e009883a 	mov	r4,fp
  805aac:	00810004 	movi	r2,1024
  805ab0:	80006e26 	beq	r16,zero,805c6c <__sfvwrite_r+0x230>
  805ab4:	800f883a 	mov	r7,r16
  805ab8:	91400717 	ldw	r5,28(r18)
  805abc:	1400012e 	bgeu	r2,r16,805ac4 <__sfvwrite_r+0x88>
  805ac0:	100f883a 	mov	r7,r2
  805ac4:	90c00917 	ldw	r3,36(r18)
  805ac8:	183ee83a 	callr	r3
  805acc:	1007883a 	mov	r3,r2
  805ad0:	80a1c83a 	sub	r16,r16,r2
  805ad4:	88a3883a 	add	r17,r17,r2
  805ad8:	00806d0e 	bge	zero,r2,805c90 <__sfvwrite_r+0x254>
  805adc:	b0800217 	ldw	r2,8(r22)
  805ae0:	10c5c83a 	sub	r2,r2,r3
  805ae4:	b0800215 	stw	r2,8(r22)
  805ae8:	103fee1e 	bne	r2,zero,805aa4 <__sfvwrite_r+0x68>
  805aec:	0009883a 	mov	r4,zero
  805af0:	2005883a 	mov	r2,r4
  805af4:	dfc00a17 	ldw	ra,40(sp)
  805af8:	df000917 	ldw	fp,36(sp)
  805afc:	ddc00817 	ldw	r23,32(sp)
  805b00:	dd800717 	ldw	r22,28(sp)
  805b04:	dd400617 	ldw	r21,24(sp)
  805b08:	dd000517 	ldw	r20,20(sp)
  805b0c:	dcc00417 	ldw	r19,16(sp)
  805b10:	dc800317 	ldw	r18,12(sp)
  805b14:	dc400217 	ldw	r17,8(sp)
  805b18:	dc000117 	ldw	r16,4(sp)
  805b1c:	dec00b04 	addi	sp,sp,44
  805b20:	f800283a 	ret
  805b24:	08038040 	call	803804 <__swsetup_r>
  805b28:	1000e41e 	bne	r2,zero,805ebc <__sfvwrite_r+0x480>
  805b2c:	91c0030b 	ldhu	r7,12(r18)
  805b30:	b5400017 	ldw	r21,0(r22)
  805b34:	3880008c 	andi	r2,r7,2
  805b38:	103fd81e 	bne	r2,zero,805a9c <__sfvwrite_r+0x60>
  805b3c:	3880004c 	andi	r2,r7,1
  805b40:	1005003a 	cmpeq	r2,r2,zero
  805b44:	10005726 	beq	r2,zero,805ca4 <__sfvwrite_r+0x268>
  805b48:	0029883a 	mov	r20,zero
  805b4c:	002f883a 	mov	r23,zero
  805b50:	a0004226 	beq	r20,zero,805c5c <__sfvwrite_r+0x220>
  805b54:	3880800c 	andi	r2,r7,512
  805b58:	94000217 	ldw	r16,8(r18)
  805b5c:	10008b26 	beq	r2,zero,805d8c <__sfvwrite_r+0x350>
  805b60:	800d883a 	mov	r6,r16
  805b64:	a400a536 	bltu	r20,r16,805dfc <__sfvwrite_r+0x3c0>
  805b68:	3881200c 	andi	r2,r7,1152
  805b6c:	10002726 	beq	r2,zero,805c0c <__sfvwrite_r+0x1d0>
  805b70:	90800517 	ldw	r2,20(r18)
  805b74:	92000417 	ldw	r8,16(r18)
  805b78:	91400017 	ldw	r5,0(r18)
  805b7c:	1087883a 	add	r3,r2,r2
  805b80:	1887883a 	add	r3,r3,r2
  805b84:	1808d7fa 	srli	r4,r3,31
  805b88:	2a21c83a 	sub	r16,r5,r8
  805b8c:	80800044 	addi	r2,r16,1
  805b90:	20c9883a 	add	r4,r4,r3
  805b94:	2027d07a 	srai	r19,r4,1
  805b98:	a085883a 	add	r2,r20,r2
  805b9c:	980d883a 	mov	r6,r19
  805ba0:	9880022e 	bgeu	r19,r2,805bac <__sfvwrite_r+0x170>
  805ba4:	1027883a 	mov	r19,r2
  805ba8:	100d883a 	mov	r6,r2
  805bac:	3881000c 	andi	r2,r7,1024
  805bb0:	1000b826 	beq	r2,zero,805e94 <__sfvwrite_r+0x458>
  805bb4:	300b883a 	mov	r5,r6
  805bb8:	e009883a 	mov	r4,fp
  805bbc:	08062b00 	call	8062b0 <_malloc_r>
  805bc0:	10003126 	beq	r2,zero,805c88 <__sfvwrite_r+0x24c>
  805bc4:	91400417 	ldw	r5,16(r18)
  805bc8:	1009883a 	mov	r4,r2
  805bcc:	800d883a 	mov	r6,r16
  805bd0:	1023883a 	mov	r17,r2
  805bd4:	0806ad40 	call	806ad4 <memcpy>
  805bd8:	90c0030b 	ldhu	r3,12(r18)
  805bdc:	00beffc4 	movi	r2,-1025
  805be0:	1886703a 	and	r3,r3,r2
  805be4:	18c02014 	ori	r3,r3,128
  805be8:	90c0030d 	sth	r3,12(r18)
  805bec:	9c07c83a 	sub	r3,r19,r16
  805bf0:	8c05883a 	add	r2,r17,r16
  805bf4:	a00d883a 	mov	r6,r20
  805bf8:	a021883a 	mov	r16,r20
  805bfc:	90800015 	stw	r2,0(r18)
  805c00:	90c00215 	stw	r3,8(r18)
  805c04:	94400415 	stw	r17,16(r18)
  805c08:	94c00515 	stw	r19,20(r18)
  805c0c:	91000017 	ldw	r4,0(r18)
  805c10:	b80b883a 	mov	r5,r23
  805c14:	a023883a 	mov	r17,r20
  805c18:	0806b740 	call	806b74 <memmove>
  805c1c:	90c00217 	ldw	r3,8(r18)
  805c20:	90800017 	ldw	r2,0(r18)
  805c24:	a027883a 	mov	r19,r20
  805c28:	1c07c83a 	sub	r3,r3,r16
  805c2c:	1405883a 	add	r2,r2,r16
  805c30:	90c00215 	stw	r3,8(r18)
  805c34:	a021883a 	mov	r16,r20
  805c38:	90800015 	stw	r2,0(r18)
  805c3c:	b0800217 	ldw	r2,8(r22)
  805c40:	1405c83a 	sub	r2,r2,r16
  805c44:	b0800215 	stw	r2,8(r22)
  805c48:	103fa826 	beq	r2,zero,805aec <__sfvwrite_r+0xb0>
  805c4c:	a469c83a 	sub	r20,r20,r17
  805c50:	91c0030b 	ldhu	r7,12(r18)
  805c54:	bcef883a 	add	r23,r23,r19
  805c58:	a03fbe1e 	bne	r20,zero,805b54 <__sfvwrite_r+0x118>
  805c5c:	adc00017 	ldw	r23,0(r21)
  805c60:	ad000117 	ldw	r20,4(r21)
  805c64:	ad400204 	addi	r21,r21,8
  805c68:	003fb906 	br	805b50 <__sfvwrite_r+0x114>
  805c6c:	ac400017 	ldw	r17,0(r21)
  805c70:	ac000117 	ldw	r16,4(r21)
  805c74:	ad400204 	addi	r21,r21,8
  805c78:	003f8a06 	br	805aa4 <__sfvwrite_r+0x68>
  805c7c:	91400417 	ldw	r5,16(r18)
  805c80:	e009883a 	mov	r4,fp
  805c84:	08057280 	call	805728 <_free_r>
  805c88:	00800304 	movi	r2,12
  805c8c:	e0800015 	stw	r2,0(fp)
  805c90:	9080030b 	ldhu	r2,12(r18)
  805c94:	013fffc4 	movi	r4,-1
  805c98:	10801014 	ori	r2,r2,64
  805c9c:	9080030d 	sth	r2,12(r18)
  805ca0:	003f9306 	br	805af0 <__sfvwrite_r+0xb4>
  805ca4:	0027883a 	mov	r19,zero
  805ca8:	002f883a 	mov	r23,zero
  805cac:	d8000015 	stw	zero,0(sp)
  805cb0:	0029883a 	mov	r20,zero
  805cb4:	98001e26 	beq	r19,zero,805d30 <__sfvwrite_r+0x2f4>
  805cb8:	d8c00017 	ldw	r3,0(sp)
  805cbc:	1804c03a 	cmpne	r2,r3,zero
  805cc0:	10005e26 	beq	r2,zero,805e3c <__sfvwrite_r+0x400>
  805cc4:	9821883a 	mov	r16,r19
  805cc8:	a4c0012e 	bgeu	r20,r19,805cd0 <__sfvwrite_r+0x294>
  805ccc:	a021883a 	mov	r16,r20
  805cd0:	91000017 	ldw	r4,0(r18)
  805cd4:	90800417 	ldw	r2,16(r18)
  805cd8:	91800217 	ldw	r6,8(r18)
  805cdc:	91c00517 	ldw	r7,20(r18)
  805ce0:	1100022e 	bgeu	r2,r4,805cec <__sfvwrite_r+0x2b0>
  805ce4:	31e3883a 	add	r17,r6,r7
  805ce8:	8c001616 	blt	r17,r16,805d44 <__sfvwrite_r+0x308>
  805cec:	81c03816 	blt	r16,r7,805dd0 <__sfvwrite_r+0x394>
  805cf0:	90c00917 	ldw	r3,36(r18)
  805cf4:	91400717 	ldw	r5,28(r18)
  805cf8:	e009883a 	mov	r4,fp
  805cfc:	b80d883a 	mov	r6,r23
  805d00:	183ee83a 	callr	r3
  805d04:	1023883a 	mov	r17,r2
  805d08:	00bfe10e 	bge	zero,r2,805c90 <__sfvwrite_r+0x254>
  805d0c:	a469c83a 	sub	r20,r20,r17
  805d10:	a0001826 	beq	r20,zero,805d74 <__sfvwrite_r+0x338>
  805d14:	b0800217 	ldw	r2,8(r22)
  805d18:	1445c83a 	sub	r2,r2,r17
  805d1c:	b0800215 	stw	r2,8(r22)
  805d20:	103f7226 	beq	r2,zero,805aec <__sfvwrite_r+0xb0>
  805d24:	9c67c83a 	sub	r19,r19,r17
  805d28:	bc6f883a 	add	r23,r23,r17
  805d2c:	983fe21e 	bne	r19,zero,805cb8 <__sfvwrite_r+0x27c>
  805d30:	adc00017 	ldw	r23,0(r21)
  805d34:	acc00117 	ldw	r19,4(r21)
  805d38:	ad400204 	addi	r21,r21,8
  805d3c:	d8000015 	stw	zero,0(sp)
  805d40:	003fdc06 	br	805cb4 <__sfvwrite_r+0x278>
  805d44:	b80b883a 	mov	r5,r23
  805d48:	880d883a 	mov	r6,r17
  805d4c:	0806b740 	call	806b74 <memmove>
  805d50:	90c00017 	ldw	r3,0(r18)
  805d54:	e009883a 	mov	r4,fp
  805d58:	900b883a 	mov	r5,r18
  805d5c:	1c47883a 	add	r3,r3,r17
  805d60:	90c00015 	stw	r3,0(r18)
  805d64:	080510c0 	call	80510c <_fflush_r>
  805d68:	103fc91e 	bne	r2,zero,805c90 <__sfvwrite_r+0x254>
  805d6c:	a469c83a 	sub	r20,r20,r17
  805d70:	a03fe81e 	bne	r20,zero,805d14 <__sfvwrite_r+0x2d8>
  805d74:	e009883a 	mov	r4,fp
  805d78:	900b883a 	mov	r5,r18
  805d7c:	080510c0 	call	80510c <_fflush_r>
  805d80:	103fc31e 	bne	r2,zero,805c90 <__sfvwrite_r+0x254>
  805d84:	d8000015 	stw	zero,0(sp)
  805d88:	003fe206 	br	805d14 <__sfvwrite_r+0x2d8>
  805d8c:	91000017 	ldw	r4,0(r18)
  805d90:	90800417 	ldw	r2,16(r18)
  805d94:	1100022e 	bgeu	r2,r4,805da0 <__sfvwrite_r+0x364>
  805d98:	8023883a 	mov	r17,r16
  805d9c:	85003136 	bltu	r16,r20,805e64 <__sfvwrite_r+0x428>
  805da0:	91c00517 	ldw	r7,20(r18)
  805da4:	a1c01836 	bltu	r20,r7,805e08 <__sfvwrite_r+0x3cc>
  805da8:	90c00917 	ldw	r3,36(r18)
  805dac:	91400717 	ldw	r5,28(r18)
  805db0:	e009883a 	mov	r4,fp
  805db4:	b80d883a 	mov	r6,r23
  805db8:	183ee83a 	callr	r3
  805dbc:	1021883a 	mov	r16,r2
  805dc0:	00bfb30e 	bge	zero,r2,805c90 <__sfvwrite_r+0x254>
  805dc4:	1023883a 	mov	r17,r2
  805dc8:	1027883a 	mov	r19,r2
  805dcc:	003f9b06 	br	805c3c <__sfvwrite_r+0x200>
  805dd0:	b80b883a 	mov	r5,r23
  805dd4:	800d883a 	mov	r6,r16
  805dd8:	0806b740 	call	806b74 <memmove>
  805ddc:	90c00217 	ldw	r3,8(r18)
  805de0:	90800017 	ldw	r2,0(r18)
  805de4:	8023883a 	mov	r17,r16
  805de8:	1c07c83a 	sub	r3,r3,r16
  805dec:	1405883a 	add	r2,r2,r16
  805df0:	90c00215 	stw	r3,8(r18)
  805df4:	90800015 	stw	r2,0(r18)
  805df8:	003fc406 	br	805d0c <__sfvwrite_r+0x2d0>
  805dfc:	a00d883a 	mov	r6,r20
  805e00:	a021883a 	mov	r16,r20
  805e04:	003f8106 	br	805c0c <__sfvwrite_r+0x1d0>
  805e08:	b80b883a 	mov	r5,r23
  805e0c:	a00d883a 	mov	r6,r20
  805e10:	0806b740 	call	806b74 <memmove>
  805e14:	90c00217 	ldw	r3,8(r18)
  805e18:	90800017 	ldw	r2,0(r18)
  805e1c:	a021883a 	mov	r16,r20
  805e20:	1d07c83a 	sub	r3,r3,r20
  805e24:	1505883a 	add	r2,r2,r20
  805e28:	a023883a 	mov	r17,r20
  805e2c:	a027883a 	mov	r19,r20
  805e30:	90c00215 	stw	r3,8(r18)
  805e34:	90800015 	stw	r2,0(r18)
  805e38:	003f8006 	br	805c3c <__sfvwrite_r+0x200>
  805e3c:	b809883a 	mov	r4,r23
  805e40:	01400284 	movi	r5,10
  805e44:	980d883a 	mov	r6,r19
  805e48:	08069f00 	call	8069f0 <memchr>
  805e4c:	10001726 	beq	r2,zero,805eac <__sfvwrite_r+0x470>
  805e50:	15c5c83a 	sub	r2,r2,r23
  805e54:	15000044 	addi	r20,r2,1
  805e58:	00800044 	movi	r2,1
  805e5c:	d8800015 	stw	r2,0(sp)
  805e60:	003f9806 	br	805cc4 <__sfvwrite_r+0x288>
  805e64:	b80b883a 	mov	r5,r23
  805e68:	800d883a 	mov	r6,r16
  805e6c:	0806b740 	call	806b74 <memmove>
  805e70:	90c00017 	ldw	r3,0(r18)
  805e74:	e009883a 	mov	r4,fp
  805e78:	900b883a 	mov	r5,r18
  805e7c:	1c07883a 	add	r3,r3,r16
  805e80:	90c00015 	stw	r3,0(r18)
  805e84:	8027883a 	mov	r19,r16
  805e88:	080510c0 	call	80510c <_fflush_r>
  805e8c:	103f6b26 	beq	r2,zero,805c3c <__sfvwrite_r+0x200>
  805e90:	003f7f06 	br	805c90 <__sfvwrite_r+0x254>
  805e94:	400b883a 	mov	r5,r8
  805e98:	e009883a 	mov	r4,fp
  805e9c:	0807ce00 	call	807ce0 <_realloc_r>
  805ea0:	103f7626 	beq	r2,zero,805c7c <__sfvwrite_r+0x240>
  805ea4:	1023883a 	mov	r17,r2
  805ea8:	003f5006 	br	805bec <__sfvwrite_r+0x1b0>
  805eac:	00c00044 	movi	r3,1
  805eb0:	9d000044 	addi	r20,r19,1
  805eb4:	d8c00015 	stw	r3,0(sp)
  805eb8:	003f8206 	br	805cc4 <__sfvwrite_r+0x288>
  805ebc:	9080030b 	ldhu	r2,12(r18)
  805ec0:	00c00244 	movi	r3,9
  805ec4:	013fffc4 	movi	r4,-1
  805ec8:	10801014 	ori	r2,r2,64
  805ecc:	9080030d 	sth	r2,12(r18)
  805ed0:	e0c00015 	stw	r3,0(fp)
  805ed4:	003f0606 	br	805af0 <__sfvwrite_r+0xb4>

00805ed8 <_fwalk_reent>:
  805ed8:	defff704 	addi	sp,sp,-36
  805edc:	dcc00315 	stw	r19,12(sp)
  805ee0:	24c0b804 	addi	r19,r4,736
  805ee4:	dd800615 	stw	r22,24(sp)
  805ee8:	dd400515 	stw	r21,20(sp)
  805eec:	dfc00815 	stw	ra,32(sp)
  805ef0:	ddc00715 	stw	r23,28(sp)
  805ef4:	dd000415 	stw	r20,16(sp)
  805ef8:	dc800215 	stw	r18,8(sp)
  805efc:	dc400115 	stw	r17,4(sp)
  805f00:	dc000015 	stw	r16,0(sp)
  805f04:	202b883a 	mov	r21,r4
  805f08:	282d883a 	mov	r22,r5
  805f0c:	08053940 	call	805394 <__sfp_lock_acquire>
  805f10:	98002126 	beq	r19,zero,805f98 <_fwalk_reent+0xc0>
  805f14:	002f883a 	mov	r23,zero
  805f18:	9c800117 	ldw	r18,4(r19)
  805f1c:	9c000217 	ldw	r16,8(r19)
  805f20:	90bfffc4 	addi	r2,r18,-1
  805f24:	10000d16 	blt	r2,zero,805f5c <_fwalk_reent+0x84>
  805f28:	0023883a 	mov	r17,zero
  805f2c:	053fffc4 	movi	r20,-1
  805f30:	8080030f 	ldh	r2,12(r16)
  805f34:	8c400044 	addi	r17,r17,1
  805f38:	10000626 	beq	r2,zero,805f54 <_fwalk_reent+0x7c>
  805f3c:	8080038f 	ldh	r2,14(r16)
  805f40:	800b883a 	mov	r5,r16
  805f44:	a809883a 	mov	r4,r21
  805f48:	15000226 	beq	r2,r20,805f54 <_fwalk_reent+0x7c>
  805f4c:	b03ee83a 	callr	r22
  805f50:	b8aeb03a 	or	r23,r23,r2
  805f54:	84001704 	addi	r16,r16,92
  805f58:	947ff51e 	bne	r18,r17,805f30 <_fwalk_reent+0x58>
  805f5c:	9cc00017 	ldw	r19,0(r19)
  805f60:	983fed1e 	bne	r19,zero,805f18 <_fwalk_reent+0x40>
  805f64:	08053980 	call	805398 <__sfp_lock_release>
  805f68:	b805883a 	mov	r2,r23
  805f6c:	dfc00817 	ldw	ra,32(sp)
  805f70:	ddc00717 	ldw	r23,28(sp)
  805f74:	dd800617 	ldw	r22,24(sp)
  805f78:	dd400517 	ldw	r21,20(sp)
  805f7c:	dd000417 	ldw	r20,16(sp)
  805f80:	dcc00317 	ldw	r19,12(sp)
  805f84:	dc800217 	ldw	r18,8(sp)
  805f88:	dc400117 	ldw	r17,4(sp)
  805f8c:	dc000017 	ldw	r16,0(sp)
  805f90:	dec00904 	addi	sp,sp,36
  805f94:	f800283a 	ret
  805f98:	002f883a 	mov	r23,zero
  805f9c:	003ff106 	br	805f64 <_fwalk_reent+0x8c>

00805fa0 <_fwalk>:
  805fa0:	defff804 	addi	sp,sp,-32
  805fa4:	dcc00315 	stw	r19,12(sp)
  805fa8:	24c0b804 	addi	r19,r4,736
  805fac:	dd400515 	stw	r21,20(sp)
  805fb0:	dfc00715 	stw	ra,28(sp)
  805fb4:	dd800615 	stw	r22,24(sp)
  805fb8:	dd000415 	stw	r20,16(sp)
  805fbc:	dc800215 	stw	r18,8(sp)
  805fc0:	dc400115 	stw	r17,4(sp)
  805fc4:	dc000015 	stw	r16,0(sp)
  805fc8:	282b883a 	mov	r21,r5
  805fcc:	08053940 	call	805394 <__sfp_lock_acquire>
  805fd0:	98001f26 	beq	r19,zero,806050 <_fwalk+0xb0>
  805fd4:	002d883a 	mov	r22,zero
  805fd8:	9c800117 	ldw	r18,4(r19)
  805fdc:	9c000217 	ldw	r16,8(r19)
  805fe0:	90bfffc4 	addi	r2,r18,-1
  805fe4:	10000c16 	blt	r2,zero,806018 <_fwalk+0x78>
  805fe8:	0023883a 	mov	r17,zero
  805fec:	053fffc4 	movi	r20,-1
  805ff0:	8080030f 	ldh	r2,12(r16)
  805ff4:	8c400044 	addi	r17,r17,1
  805ff8:	10000526 	beq	r2,zero,806010 <_fwalk+0x70>
  805ffc:	8080038f 	ldh	r2,14(r16)
  806000:	8009883a 	mov	r4,r16
  806004:	15000226 	beq	r2,r20,806010 <_fwalk+0x70>
  806008:	a83ee83a 	callr	r21
  80600c:	b0acb03a 	or	r22,r22,r2
  806010:	84001704 	addi	r16,r16,92
  806014:	947ff61e 	bne	r18,r17,805ff0 <_fwalk+0x50>
  806018:	9cc00017 	ldw	r19,0(r19)
  80601c:	983fee1e 	bne	r19,zero,805fd8 <_fwalk+0x38>
  806020:	08053980 	call	805398 <__sfp_lock_release>
  806024:	b005883a 	mov	r2,r22
  806028:	dfc00717 	ldw	ra,28(sp)
  80602c:	dd800617 	ldw	r22,24(sp)
  806030:	dd400517 	ldw	r21,20(sp)
  806034:	dd000417 	ldw	r20,16(sp)
  806038:	dcc00317 	ldw	r19,12(sp)
  80603c:	dc800217 	ldw	r18,8(sp)
  806040:	dc400117 	ldw	r17,4(sp)
  806044:	dc000017 	ldw	r16,0(sp)
  806048:	dec00804 	addi	sp,sp,32
  80604c:	f800283a 	ret
  806050:	002d883a 	mov	r22,zero
  806054:	003ff206 	br	806020 <_fwalk+0x80>

00806058 <__locale_charset>:
  806058:	d0a00317 	ldw	r2,-32756(gp)
  80605c:	f800283a 	ret

00806060 <_localeconv_r>:
  806060:	00802074 	movhi	r2,129
  806064:	10bf8904 	addi	r2,r2,-476
  806068:	f800283a 	ret

0080606c <localeconv>:
  80606c:	00802074 	movhi	r2,129
  806070:	1086c704 	addi	r2,r2,6940
  806074:	11000017 	ldw	r4,0(r2)
  806078:	08060601 	jmpi	806060 <_localeconv_r>

0080607c <_setlocale_r>:
  80607c:	defffc04 	addi	sp,sp,-16
  806080:	00c02074 	movhi	r3,129
  806084:	18ff8404 	addi	r3,r3,-496
  806088:	dc800215 	stw	r18,8(sp)
  80608c:	dc400115 	stw	r17,4(sp)
  806090:	dc000015 	stw	r16,0(sp)
  806094:	2023883a 	mov	r17,r4
  806098:	2825883a 	mov	r18,r5
  80609c:	dfc00315 	stw	ra,12(sp)
  8060a0:	3021883a 	mov	r16,r6
  8060a4:	3009883a 	mov	r4,r6
  8060a8:	180b883a 	mov	r5,r3
  8060ac:	30000926 	beq	r6,zero,8060d4 <_setlocale_r+0x58>
  8060b0:	08085000 	call	808500 <strcmp>
  8060b4:	8009883a 	mov	r4,r16
  8060b8:	01402074 	movhi	r5,129
  8060bc:	297f6f04 	addi	r5,r5,-580
  8060c0:	10000b1e 	bne	r2,zero,8060f0 <_setlocale_r+0x74>
  8060c4:	8c000d15 	stw	r16,52(r17)
  8060c8:	8c800c15 	stw	r18,48(r17)
  8060cc:	00c02074 	movhi	r3,129
  8060d0:	18ff8404 	addi	r3,r3,-496
  8060d4:	1805883a 	mov	r2,r3
  8060d8:	dfc00317 	ldw	ra,12(sp)
  8060dc:	dc800217 	ldw	r18,8(sp)
  8060e0:	dc400117 	ldw	r17,4(sp)
  8060e4:	dc000017 	ldw	r16,0(sp)
  8060e8:	dec00404 	addi	sp,sp,16
  8060ec:	f800283a 	ret
  8060f0:	08085000 	call	808500 <strcmp>
  8060f4:	0007883a 	mov	r3,zero
  8060f8:	103ff226 	beq	r2,zero,8060c4 <_setlocale_r+0x48>
  8060fc:	003ff506 	br	8060d4 <_setlocale_r+0x58>

00806100 <setlocale>:
  806100:	01802074 	movhi	r6,129
  806104:	3186c704 	addi	r6,r6,6940
  806108:	2007883a 	mov	r3,r4
  80610c:	31000017 	ldw	r4,0(r6)
  806110:	280d883a 	mov	r6,r5
  806114:	180b883a 	mov	r5,r3
  806118:	080607c1 	jmpi	80607c <_setlocale_r>

0080611c <__smakebuf_r>:
  80611c:	2880030b 	ldhu	r2,12(r5)
  806120:	deffed04 	addi	sp,sp,-76
  806124:	dc401015 	stw	r17,64(sp)
  806128:	1080008c 	andi	r2,r2,2
  80612c:	dc000f15 	stw	r16,60(sp)
  806130:	dfc01215 	stw	ra,72(sp)
  806134:	dc801115 	stw	r18,68(sp)
  806138:	2821883a 	mov	r16,r5
  80613c:	2023883a 	mov	r17,r4
  806140:	10000b26 	beq	r2,zero,806170 <__smakebuf_r+0x54>
  806144:	28c010c4 	addi	r3,r5,67
  806148:	00800044 	movi	r2,1
  80614c:	28800515 	stw	r2,20(r5)
  806150:	28c00415 	stw	r3,16(r5)
  806154:	28c00015 	stw	r3,0(r5)
  806158:	dfc01217 	ldw	ra,72(sp)
  80615c:	dc801117 	ldw	r18,68(sp)
  806160:	dc401017 	ldw	r17,64(sp)
  806164:	dc000f17 	ldw	r16,60(sp)
  806168:	dec01304 	addi	sp,sp,76
  80616c:	f800283a 	ret
  806170:	2940038f 	ldh	r5,14(r5)
  806174:	28002116 	blt	r5,zero,8061fc <__smakebuf_r+0xe0>
  806178:	d80d883a 	mov	r6,sp
  80617c:	080887c0 	call	80887c <_fstat_r>
  806180:	10001e16 	blt	r2,zero,8061fc <__smakebuf_r+0xe0>
  806184:	d8800117 	ldw	r2,4(sp)
  806188:	00e00014 	movui	r3,32768
  80618c:	113c000c 	andi	r4,r2,61440
  806190:	20c03126 	beq	r4,r3,806258 <__smakebuf_r+0x13c>
  806194:	8080030b 	ldhu	r2,12(r16)
  806198:	00c80004 	movi	r3,8192
  80619c:	10820014 	ori	r2,r2,2048
  8061a0:	8080030d 	sth	r2,12(r16)
  8061a4:	20c01e26 	beq	r4,r3,806220 <__smakebuf_r+0x104>
  8061a8:	04810004 	movi	r18,1024
  8061ac:	8809883a 	mov	r4,r17
  8061b0:	900b883a 	mov	r5,r18
  8061b4:	08062b00 	call	8062b0 <_malloc_r>
  8061b8:	1009883a 	mov	r4,r2
  8061bc:	10003126 	beq	r2,zero,806284 <__smakebuf_r+0x168>
  8061c0:	80c0030b 	ldhu	r3,12(r16)
  8061c4:	00802034 	movhi	r2,128
  8061c8:	10952204 	addi	r2,r2,21640
  8061cc:	88800f15 	stw	r2,60(r17)
  8061d0:	18c02014 	ori	r3,r3,128
  8061d4:	84800515 	stw	r18,20(r16)
  8061d8:	80c0030d 	sth	r3,12(r16)
  8061dc:	81000415 	stw	r4,16(r16)
  8061e0:	81000015 	stw	r4,0(r16)
  8061e4:	dfc01217 	ldw	ra,72(sp)
  8061e8:	dc801117 	ldw	r18,68(sp)
  8061ec:	dc401017 	ldw	r17,64(sp)
  8061f0:	dc000f17 	ldw	r16,60(sp)
  8061f4:	dec01304 	addi	sp,sp,76
  8061f8:	f800283a 	ret
  8061fc:	80c0030b 	ldhu	r3,12(r16)
  806200:	1880200c 	andi	r2,r3,128
  806204:	10000426 	beq	r2,zero,806218 <__smakebuf_r+0xfc>
  806208:	04801004 	movi	r18,64
  80620c:	18820014 	ori	r2,r3,2048
  806210:	8080030d 	sth	r2,12(r16)
  806214:	003fe506 	br	8061ac <__smakebuf_r+0x90>
  806218:	04810004 	movi	r18,1024
  80621c:	003ffb06 	br	80620c <__smakebuf_r+0xf0>
  806220:	8140038f 	ldh	r5,14(r16)
  806224:	8809883a 	mov	r4,r17
  806228:	08088f00 	call	8088f0 <_isatty_r>
  80622c:	103fde26 	beq	r2,zero,8061a8 <__smakebuf_r+0x8c>
  806230:	8080030b 	ldhu	r2,12(r16)
  806234:	80c010c4 	addi	r3,r16,67
  806238:	04810004 	movi	r18,1024
  80623c:	10800054 	ori	r2,r2,1
  806240:	8080030d 	sth	r2,12(r16)
  806244:	00800044 	movi	r2,1
  806248:	80c00415 	stw	r3,16(r16)
  80624c:	80800515 	stw	r2,20(r16)
  806250:	80c00015 	stw	r3,0(r16)
  806254:	003fd506 	br	8061ac <__smakebuf_r+0x90>
  806258:	80c00a17 	ldw	r3,40(r16)
  80625c:	00802074 	movhi	r2,129
  806260:	10a0ef04 	addi	r2,r2,-31812
  806264:	18bfcb1e 	bne	r3,r2,806194 <__smakebuf_r+0x78>
  806268:	8080030b 	ldhu	r2,12(r16)
  80626c:	00c10004 	movi	r3,1024
  806270:	1825883a 	mov	r18,r3
  806274:	10c4b03a 	or	r2,r2,r3
  806278:	8080030d 	sth	r2,12(r16)
  80627c:	80c01315 	stw	r3,76(r16)
  806280:	003fca06 	br	8061ac <__smakebuf_r+0x90>
  806284:	8100030b 	ldhu	r4,12(r16)
  806288:	2080800c 	andi	r2,r4,512
  80628c:	103fb21e 	bne	r2,zero,806158 <__smakebuf_r+0x3c>
  806290:	80c010c4 	addi	r3,r16,67
  806294:	21000094 	ori	r4,r4,2
  806298:	00800044 	movi	r2,1
  80629c:	80800515 	stw	r2,20(r16)
  8062a0:	8100030d 	sth	r4,12(r16)
  8062a4:	80c00415 	stw	r3,16(r16)
  8062a8:	80c00015 	stw	r3,0(r16)
  8062ac:	003faa06 	br	806158 <__smakebuf_r+0x3c>

008062b0 <_malloc_r>:
  8062b0:	defff604 	addi	sp,sp,-40
  8062b4:	28c002c4 	addi	r3,r5,11
  8062b8:	00800584 	movi	r2,22
  8062bc:	dc800215 	stw	r18,8(sp)
  8062c0:	dfc00915 	stw	ra,36(sp)
  8062c4:	df000815 	stw	fp,32(sp)
  8062c8:	ddc00715 	stw	r23,28(sp)
  8062cc:	dd800615 	stw	r22,24(sp)
  8062d0:	dd400515 	stw	r21,20(sp)
  8062d4:	dd000415 	stw	r20,16(sp)
  8062d8:	dcc00315 	stw	r19,12(sp)
  8062dc:	dc400115 	stw	r17,4(sp)
  8062e0:	dc000015 	stw	r16,0(sp)
  8062e4:	2025883a 	mov	r18,r4
  8062e8:	10c01236 	bltu	r2,r3,806334 <_malloc_r+0x84>
  8062ec:	04400404 	movi	r17,16
  8062f0:	8940142e 	bgeu	r17,r5,806344 <_malloc_r+0x94>
  8062f4:	00800304 	movi	r2,12
  8062f8:	0007883a 	mov	r3,zero
  8062fc:	90800015 	stw	r2,0(r18)
  806300:	1805883a 	mov	r2,r3
  806304:	dfc00917 	ldw	ra,36(sp)
  806308:	df000817 	ldw	fp,32(sp)
  80630c:	ddc00717 	ldw	r23,28(sp)
  806310:	dd800617 	ldw	r22,24(sp)
  806314:	dd400517 	ldw	r21,20(sp)
  806318:	dd000417 	ldw	r20,16(sp)
  80631c:	dcc00317 	ldw	r19,12(sp)
  806320:	dc800217 	ldw	r18,8(sp)
  806324:	dc400117 	ldw	r17,4(sp)
  806328:	dc000017 	ldw	r16,0(sp)
  80632c:	dec00a04 	addi	sp,sp,40
  806330:	f800283a 	ret
  806334:	00bffe04 	movi	r2,-8
  806338:	18a2703a 	and	r17,r3,r2
  80633c:	883fed16 	blt	r17,zero,8062f4 <_malloc_r+0x44>
  806340:	897fec36 	bltu	r17,r5,8062f4 <_malloc_r+0x44>
  806344:	9009883a 	mov	r4,r18
  806348:	080b1700 	call	80b170 <__malloc_lock>
  80634c:	00807dc4 	movi	r2,503
  806350:	14402b2e 	bgeu	r2,r17,806400 <_malloc_r+0x150>
  806354:	8806d27a 	srli	r3,r17,9
  806358:	18003f1e 	bne	r3,zero,806458 <_malloc_r+0x1a8>
  80635c:	880cd0fa 	srli	r6,r17,3
  806360:	300490fa 	slli	r2,r6,3
  806364:	02c02074 	movhi	r11,129
  806368:	5ac11104 	addi	r11,r11,1092
  80636c:	12cb883a 	add	r5,r2,r11
  806370:	2c000317 	ldw	r16,12(r5)
  806374:	580f883a 	mov	r7,r11
  806378:	2c00041e 	bne	r5,r16,80638c <_malloc_r+0xdc>
  80637c:	00000a06 	br	8063a8 <_malloc_r+0xf8>
  806380:	1800860e 	bge	r3,zero,80659c <_malloc_r+0x2ec>
  806384:	84000317 	ldw	r16,12(r16)
  806388:	2c000726 	beq	r5,r16,8063a8 <_malloc_r+0xf8>
  80638c:	80800117 	ldw	r2,4(r16)
  806390:	00ffff04 	movi	r3,-4
  806394:	10c8703a 	and	r4,r2,r3
  806398:	2447c83a 	sub	r3,r4,r17
  80639c:	008003c4 	movi	r2,15
  8063a0:	10fff70e 	bge	r2,r3,806380 <_malloc_r+0xd0>
  8063a4:	31bfffc4 	addi	r6,r6,-1
  8063a8:	32400044 	addi	r9,r6,1
  8063ac:	02802074 	movhi	r10,129
  8063b0:	52811304 	addi	r10,r10,1100
  8063b4:	54000217 	ldw	r16,8(r10)
  8063b8:	8280a026 	beq	r16,r10,80663c <_malloc_r+0x38c>
  8063bc:	80800117 	ldw	r2,4(r16)
  8063c0:	00ffff04 	movi	r3,-4
  8063c4:	10ca703a 	and	r5,r2,r3
  8063c8:	2c4dc83a 	sub	r6,r5,r17
  8063cc:	008003c4 	movi	r2,15
  8063d0:	11808316 	blt	r2,r6,8065e0 <_malloc_r+0x330>
  8063d4:	52800315 	stw	r10,12(r10)
  8063d8:	52800215 	stw	r10,8(r10)
  8063dc:	30002916 	blt	r6,zero,806484 <_malloc_r+0x1d4>
  8063e0:	8147883a 	add	r3,r16,r5
  8063e4:	18800117 	ldw	r2,4(r3)
  8063e8:	9009883a 	mov	r4,r18
  8063ec:	10800054 	ori	r2,r2,1
  8063f0:	18800115 	stw	r2,4(r3)
  8063f4:	080b1900 	call	80b190 <__malloc_unlock>
  8063f8:	80c00204 	addi	r3,r16,8
  8063fc:	003fc006 	br	806300 <_malloc_r+0x50>
  806400:	02c02074 	movhi	r11,129
  806404:	5ac11104 	addi	r11,r11,1092
  806408:	8ac5883a 	add	r2,r17,r11
  80640c:	14000317 	ldw	r16,12(r2)
  806410:	580f883a 	mov	r7,r11
  806414:	8806d0fa 	srli	r3,r17,3
  806418:	14006c26 	beq	r2,r16,8065cc <_malloc_r+0x31c>
  80641c:	80c00117 	ldw	r3,4(r16)
  806420:	00bfff04 	movi	r2,-4
  806424:	81800317 	ldw	r6,12(r16)
  806428:	1886703a 	and	r3,r3,r2
  80642c:	80c7883a 	add	r3,r16,r3
  806430:	18800117 	ldw	r2,4(r3)
  806434:	81400217 	ldw	r5,8(r16)
  806438:	9009883a 	mov	r4,r18
  80643c:	10800054 	ori	r2,r2,1
  806440:	18800115 	stw	r2,4(r3)
  806444:	31400215 	stw	r5,8(r6)
  806448:	29800315 	stw	r6,12(r5)
  80644c:	080b1900 	call	80b190 <__malloc_unlock>
  806450:	80c00204 	addi	r3,r16,8
  806454:	003faa06 	br	806300 <_malloc_r+0x50>
  806458:	00800104 	movi	r2,4
  80645c:	10c0052e 	bgeu	r2,r3,806474 <_malloc_r+0x1c4>
  806460:	00800504 	movi	r2,20
  806464:	10c07836 	bltu	r2,r3,806648 <_malloc_r+0x398>
  806468:	198016c4 	addi	r6,r3,91
  80646c:	300490fa 	slli	r2,r6,3
  806470:	003fbc06 	br	806364 <_malloc_r+0xb4>
  806474:	8804d1ba 	srli	r2,r17,6
  806478:	11800e04 	addi	r6,r2,56
  80647c:	300490fa 	slli	r2,r6,3
  806480:	003fb806 	br	806364 <_malloc_r+0xb4>
  806484:	00807fc4 	movi	r2,511
  806488:	1140bb36 	bltu	r2,r5,806778 <_malloc_r+0x4c8>
  80648c:	2806d0fa 	srli	r3,r5,3
  806490:	573ffe04 	addi	fp,r10,-8
  806494:	00800044 	movi	r2,1
  806498:	180890fa 	slli	r4,r3,3
  80649c:	1807d0ba 	srai	r3,r3,2
  8064a0:	e1c00117 	ldw	r7,4(fp)
  8064a4:	5909883a 	add	r4,r11,r4
  8064a8:	21400217 	ldw	r5,8(r4)
  8064ac:	10c4983a 	sll	r2,r2,r3
  8064b0:	81000315 	stw	r4,12(r16)
  8064b4:	81400215 	stw	r5,8(r16)
  8064b8:	388eb03a 	or	r7,r7,r2
  8064bc:	2c000315 	stw	r16,12(r5)
  8064c0:	24000215 	stw	r16,8(r4)
  8064c4:	e1c00115 	stw	r7,4(fp)
  8064c8:	4807883a 	mov	r3,r9
  8064cc:	4800cd16 	blt	r9,zero,806804 <_malloc_r+0x554>
  8064d0:	1807d0ba 	srai	r3,r3,2
  8064d4:	00800044 	movi	r2,1
  8064d8:	10c8983a 	sll	r4,r2,r3
  8064dc:	39004436 	bltu	r7,r4,8065f0 <_malloc_r+0x340>
  8064e0:	21c4703a 	and	r2,r4,r7
  8064e4:	10000a1e 	bne	r2,zero,806510 <_malloc_r+0x260>
  8064e8:	2109883a 	add	r4,r4,r4
  8064ec:	00bfff04 	movi	r2,-4
  8064f0:	4884703a 	and	r2,r9,r2
  8064f4:	3906703a 	and	r3,r7,r4
  8064f8:	12400104 	addi	r9,r2,4
  8064fc:	1800041e 	bne	r3,zero,806510 <_malloc_r+0x260>
  806500:	2109883a 	add	r4,r4,r4
  806504:	3904703a 	and	r2,r7,r4
  806508:	4a400104 	addi	r9,r9,4
  80650c:	103ffc26 	beq	r2,zero,806500 <_malloc_r+0x250>
  806510:	480490fa 	slli	r2,r9,3
  806514:	4819883a 	mov	r12,r9
  806518:	023fff04 	movi	r8,-4
  80651c:	589b883a 	add	r13,r11,r2
  806520:	6807883a 	mov	r3,r13
  806524:	014003c4 	movi	r5,15
  806528:	1c000317 	ldw	r16,12(r3)
  80652c:	1c00041e 	bne	r3,r16,806540 <_malloc_r+0x290>
  806530:	0000a706 	br	8067d0 <_malloc_r+0x520>
  806534:	3000ab0e 	bge	r6,zero,8067e4 <_malloc_r+0x534>
  806538:	84000317 	ldw	r16,12(r16)
  80653c:	1c00a426 	beq	r3,r16,8067d0 <_malloc_r+0x520>
  806540:	80800117 	ldw	r2,4(r16)
  806544:	1204703a 	and	r2,r2,r8
  806548:	144dc83a 	sub	r6,r2,r17
  80654c:	29bff90e 	bge	r5,r6,806534 <_malloc_r+0x284>
  806550:	81000317 	ldw	r4,12(r16)
  806554:	80c00217 	ldw	r3,8(r16)
  806558:	89400054 	ori	r5,r17,1
  80655c:	8445883a 	add	r2,r16,r17
  806560:	20c00215 	stw	r3,8(r4)
  806564:	19000315 	stw	r4,12(r3)
  806568:	81400115 	stw	r5,4(r16)
  80656c:	1187883a 	add	r3,r2,r6
  806570:	31000054 	ori	r4,r6,1
  806574:	50800315 	stw	r2,12(r10)
  806578:	50800215 	stw	r2,8(r10)
  80657c:	19800015 	stw	r6,0(r3)
  806580:	11000115 	stw	r4,4(r2)
  806584:	12800215 	stw	r10,8(r2)
  806588:	12800315 	stw	r10,12(r2)
  80658c:	9009883a 	mov	r4,r18
  806590:	080b1900 	call	80b190 <__malloc_unlock>
  806594:	80c00204 	addi	r3,r16,8
  806598:	003f5906 	br	806300 <_malloc_r+0x50>
  80659c:	8109883a 	add	r4,r16,r4
  8065a0:	20800117 	ldw	r2,4(r4)
  8065a4:	80c00217 	ldw	r3,8(r16)
  8065a8:	81400317 	ldw	r5,12(r16)
  8065ac:	10800054 	ori	r2,r2,1
  8065b0:	20800115 	stw	r2,4(r4)
  8065b4:	28c00215 	stw	r3,8(r5)
  8065b8:	19400315 	stw	r5,12(r3)
  8065bc:	9009883a 	mov	r4,r18
  8065c0:	080b1900 	call	80b190 <__malloc_unlock>
  8065c4:	80c00204 	addi	r3,r16,8
  8065c8:	003f4d06 	br	806300 <_malloc_r+0x50>
  8065cc:	80800204 	addi	r2,r16,8
  8065d0:	14000317 	ldw	r16,12(r2)
  8065d4:	143f911e 	bne	r2,r16,80641c <_malloc_r+0x16c>
  8065d8:	1a400084 	addi	r9,r3,2
  8065dc:	003f7306 	br	8063ac <_malloc_r+0xfc>
  8065e0:	88c00054 	ori	r3,r17,1
  8065e4:	8445883a 	add	r2,r16,r17
  8065e8:	80c00115 	stw	r3,4(r16)
  8065ec:	003fdf06 	br	80656c <_malloc_r+0x2bc>
  8065f0:	e4000217 	ldw	r16,8(fp)
  8065f4:	00bfff04 	movi	r2,-4
  8065f8:	80c00117 	ldw	r3,4(r16)
  8065fc:	802d883a 	mov	r22,r16
  806600:	18aa703a 	and	r21,r3,r2
  806604:	ac401636 	bltu	r21,r17,806660 <_malloc_r+0x3b0>
  806608:	ac49c83a 	sub	r4,r21,r17
  80660c:	008003c4 	movi	r2,15
  806610:	1100130e 	bge	r2,r4,806660 <_malloc_r+0x3b0>
  806614:	88800054 	ori	r2,r17,1
  806618:	8447883a 	add	r3,r16,r17
  80661c:	80800115 	stw	r2,4(r16)
  806620:	20800054 	ori	r2,r4,1
  806624:	18800115 	stw	r2,4(r3)
  806628:	e0c00215 	stw	r3,8(fp)
  80662c:	9009883a 	mov	r4,r18
  806630:	080b1900 	call	80b190 <__malloc_unlock>
  806634:	80c00204 	addi	r3,r16,8
  806638:	003f3106 	br	806300 <_malloc_r+0x50>
  80663c:	39c00117 	ldw	r7,4(r7)
  806640:	573ffe04 	addi	fp,r10,-8
  806644:	003fa006 	br	8064c8 <_malloc_r+0x218>
  806648:	00801504 	movi	r2,84
  80664c:	10c06736 	bltu	r2,r3,8067ec <_malloc_r+0x53c>
  806650:	8804d33a 	srli	r2,r17,12
  806654:	11801b84 	addi	r6,r2,110
  806658:	300490fa 	slli	r2,r6,3
  80665c:	003f4106 	br	806364 <_malloc_r+0xb4>
  806660:	d0a6dc17 	ldw	r2,-25744(gp)
  806664:	d0e00517 	ldw	r3,-32748(gp)
  806668:	053fffc4 	movi	r20,-1
  80666c:	10800404 	addi	r2,r2,16
  806670:	88a7883a 	add	r19,r17,r2
  806674:	1d000326 	beq	r3,r20,806684 <_malloc_r+0x3d4>
  806678:	98c3ffc4 	addi	r3,r19,4095
  80667c:	00bc0004 	movi	r2,-4096
  806680:	18a6703a 	and	r19,r3,r2
  806684:	9009883a 	mov	r4,r18
  806688:	980b883a 	mov	r5,r19
  80668c:	08083440 	call	808344 <_sbrk_r>
  806690:	1009883a 	mov	r4,r2
  806694:	15000426 	beq	r2,r20,8066a8 <_malloc_r+0x3f8>
  806698:	854b883a 	add	r5,r16,r21
  80669c:	1029883a 	mov	r20,r2
  8066a0:	11405a2e 	bgeu	r2,r5,80680c <_malloc_r+0x55c>
  8066a4:	87000c26 	beq	r16,fp,8066d8 <_malloc_r+0x428>
  8066a8:	e4000217 	ldw	r16,8(fp)
  8066ac:	80c00117 	ldw	r3,4(r16)
  8066b0:	00bfff04 	movi	r2,-4
  8066b4:	1884703a 	and	r2,r3,r2
  8066b8:	14400336 	bltu	r2,r17,8066c8 <_malloc_r+0x418>
  8066bc:	1449c83a 	sub	r4,r2,r17
  8066c0:	008003c4 	movi	r2,15
  8066c4:	113fd316 	blt	r2,r4,806614 <_malloc_r+0x364>
  8066c8:	9009883a 	mov	r4,r18
  8066cc:	080b1900 	call	80b190 <__malloc_unlock>
  8066d0:	0007883a 	mov	r3,zero
  8066d4:	003f0a06 	br	806300 <_malloc_r+0x50>
  8066d8:	05c02074 	movhi	r23,129
  8066dc:	bdcdaf04 	addi	r23,r23,14012
  8066e0:	b8800017 	ldw	r2,0(r23)
  8066e4:	988d883a 	add	r6,r19,r2
  8066e8:	b9800015 	stw	r6,0(r23)
  8066ec:	d0e00517 	ldw	r3,-32748(gp)
  8066f0:	00bfffc4 	movi	r2,-1
  8066f4:	18808e26 	beq	r3,r2,806930 <_malloc_r+0x680>
  8066f8:	2145c83a 	sub	r2,r4,r5
  8066fc:	3085883a 	add	r2,r6,r2
  806700:	b8800015 	stw	r2,0(r23)
  806704:	20c001cc 	andi	r3,r4,7
  806708:	18005f1e 	bne	r3,zero,806888 <_malloc_r+0x5d8>
  80670c:	000b883a 	mov	r5,zero
  806710:	a4c5883a 	add	r2,r20,r19
  806714:	1083ffcc 	andi	r2,r2,4095
  806718:	00c40004 	movi	r3,4096
  80671c:	1887c83a 	sub	r3,r3,r2
  806720:	28e7883a 	add	r19,r5,r3
  806724:	9009883a 	mov	r4,r18
  806728:	980b883a 	mov	r5,r19
  80672c:	08083440 	call	808344 <_sbrk_r>
  806730:	1007883a 	mov	r3,r2
  806734:	00bfffc4 	movi	r2,-1
  806738:	18807a26 	beq	r3,r2,806924 <_malloc_r+0x674>
  80673c:	1d05c83a 	sub	r2,r3,r20
  806740:	9885883a 	add	r2,r19,r2
  806744:	10c00054 	ori	r3,r2,1
  806748:	b8800017 	ldw	r2,0(r23)
  80674c:	a021883a 	mov	r16,r20
  806750:	a0c00115 	stw	r3,4(r20)
  806754:	9885883a 	add	r2,r19,r2
  806758:	b8800015 	stw	r2,0(r23)
  80675c:	e5000215 	stw	r20,8(fp)
  806760:	b7003626 	beq	r22,fp,80683c <_malloc_r+0x58c>
  806764:	018003c4 	movi	r6,15
  806768:	35404b36 	bltu	r6,r21,806898 <_malloc_r+0x5e8>
  80676c:	00800044 	movi	r2,1
  806770:	a0800115 	stw	r2,4(r20)
  806774:	003fcd06 	br	8066ac <_malloc_r+0x3fc>
  806778:	2808d27a 	srli	r4,r5,9
  80677c:	2000371e 	bne	r4,zero,80685c <_malloc_r+0x5ac>
  806780:	2808d0fa 	srli	r4,r5,3
  806784:	200690fa 	slli	r3,r4,3
  806788:	1ad1883a 	add	r8,r3,r11
  80678c:	41800217 	ldw	r6,8(r8)
  806790:	41805b26 	beq	r8,r6,806900 <_malloc_r+0x650>
  806794:	30800117 	ldw	r2,4(r6)
  806798:	00ffff04 	movi	r3,-4
  80679c:	10c4703a 	and	r2,r2,r3
  8067a0:	2880022e 	bgeu	r5,r2,8067ac <_malloc_r+0x4fc>
  8067a4:	31800217 	ldw	r6,8(r6)
  8067a8:	41bffa1e 	bne	r8,r6,806794 <_malloc_r+0x4e4>
  8067ac:	32000317 	ldw	r8,12(r6)
  8067b0:	39c00117 	ldw	r7,4(r7)
  8067b4:	82000315 	stw	r8,12(r16)
  8067b8:	81800215 	stw	r6,8(r16)
  8067bc:	07002074 	movhi	fp,129
  8067c0:	e7011104 	addi	fp,fp,1092
  8067c4:	34000315 	stw	r16,12(r6)
  8067c8:	44000215 	stw	r16,8(r8)
  8067cc:	003f3e06 	br	8064c8 <_malloc_r+0x218>
  8067d0:	63000044 	addi	r12,r12,1
  8067d4:	608000cc 	andi	r2,r12,3
  8067d8:	10005d26 	beq	r2,zero,806950 <_malloc_r+0x6a0>
  8067dc:	18c00204 	addi	r3,r3,8
  8067e0:	003f5106 	br	806528 <_malloc_r+0x278>
  8067e4:	8089883a 	add	r4,r16,r2
  8067e8:	003f6d06 	br	8065a0 <_malloc_r+0x2f0>
  8067ec:	00805504 	movi	r2,340
  8067f0:	10c02036 	bltu	r2,r3,806874 <_malloc_r+0x5c4>
  8067f4:	8804d3fa 	srli	r2,r17,15
  8067f8:	11801dc4 	addi	r6,r2,119
  8067fc:	300490fa 	slli	r2,r6,3
  806800:	003ed806 	br	806364 <_malloc_r+0xb4>
  806804:	48c000c4 	addi	r3,r9,3
  806808:	003f3106 	br	8064d0 <_malloc_r+0x220>
  80680c:	05c02074 	movhi	r23,129
  806810:	bdcdaf04 	addi	r23,r23,14012
  806814:	b8800017 	ldw	r2,0(r23)
  806818:	988d883a 	add	r6,r19,r2
  80681c:	b9800015 	stw	r6,0(r23)
  806820:	293fb21e 	bne	r5,r4,8066ec <_malloc_r+0x43c>
  806824:	2083ffcc 	andi	r2,r4,4095
  806828:	103fb01e 	bne	r2,zero,8066ec <_malloc_r+0x43c>
  80682c:	e4000217 	ldw	r16,8(fp)
  806830:	9d45883a 	add	r2,r19,r21
  806834:	10800054 	ori	r2,r2,1
  806838:	80800115 	stw	r2,4(r16)
  80683c:	b8c00017 	ldw	r3,0(r23)
  806840:	d0a6dd17 	ldw	r2,-25740(gp)
  806844:	10c0012e 	bgeu	r2,r3,80684c <_malloc_r+0x59c>
  806848:	d0e6dd15 	stw	r3,-25740(gp)
  80684c:	d0a6de17 	ldw	r2,-25736(gp)
  806850:	10ff962e 	bgeu	r2,r3,8066ac <_malloc_r+0x3fc>
  806854:	d0e6de15 	stw	r3,-25736(gp)
  806858:	003f9406 	br	8066ac <_malloc_r+0x3fc>
  80685c:	00800104 	movi	r2,4
  806860:	11001e36 	bltu	r2,r4,8068dc <_malloc_r+0x62c>
  806864:	2804d1ba 	srli	r2,r5,6
  806868:	11000e04 	addi	r4,r2,56
  80686c:	200690fa 	slli	r3,r4,3
  806870:	003fc506 	br	806788 <_malloc_r+0x4d8>
  806874:	00815504 	movi	r2,1364
  806878:	10c01d2e 	bgeu	r2,r3,8068f0 <_malloc_r+0x640>
  80687c:	01801f84 	movi	r6,126
  806880:	0080fc04 	movi	r2,1008
  806884:	003eb706 	br	806364 <_malloc_r+0xb4>
  806888:	00800204 	movi	r2,8
  80688c:	10cbc83a 	sub	r5,r2,r3
  806890:	2169883a 	add	r20,r4,r5
  806894:	003f9e06 	br	806710 <_malloc_r+0x460>
  806898:	00bffe04 	movi	r2,-8
  80689c:	a93ffd04 	addi	r4,r21,-12
  8068a0:	2088703a 	and	r4,r4,r2
  8068a4:	b10b883a 	add	r5,r22,r4
  8068a8:	00c00144 	movi	r3,5
  8068ac:	28c00215 	stw	r3,8(r5)
  8068b0:	28c00115 	stw	r3,4(r5)
  8068b4:	b0800117 	ldw	r2,4(r22)
  8068b8:	1080004c 	andi	r2,r2,1
  8068bc:	2084b03a 	or	r2,r4,r2
  8068c0:	b0800115 	stw	r2,4(r22)
  8068c4:	313fdd2e 	bgeu	r6,r4,80683c <_malloc_r+0x58c>
  8068c8:	b1400204 	addi	r5,r22,8
  8068cc:	9009883a 	mov	r4,r18
  8068d0:	08057280 	call	805728 <_free_r>
  8068d4:	e4000217 	ldw	r16,8(fp)
  8068d8:	003fd806 	br	80683c <_malloc_r+0x58c>
  8068dc:	00800504 	movi	r2,20
  8068e0:	11001536 	bltu	r2,r4,806938 <_malloc_r+0x688>
  8068e4:	210016c4 	addi	r4,r4,91
  8068e8:	200690fa 	slli	r3,r4,3
  8068ec:	003fa606 	br	806788 <_malloc_r+0x4d8>
  8068f0:	8804d4ba 	srli	r2,r17,18
  8068f4:	11801f04 	addi	r6,r2,124
  8068f8:	300490fa 	slli	r2,r6,3
  8068fc:	003e9906 	br	806364 <_malloc_r+0xb4>
  806900:	2009d0ba 	srai	r4,r4,2
  806904:	01402074 	movhi	r5,129
  806908:	29411104 	addi	r5,r5,1092
  80690c:	00c00044 	movi	r3,1
  806910:	28800117 	ldw	r2,4(r5)
  806914:	1906983a 	sll	r3,r3,r4
  806918:	10c4b03a 	or	r2,r2,r3
  80691c:	28800115 	stw	r2,4(r5)
  806920:	003fa306 	br	8067b0 <_malloc_r+0x500>
  806924:	0027883a 	mov	r19,zero
  806928:	00c00044 	movi	r3,1
  80692c:	003f8606 	br	806748 <_malloc_r+0x498>
  806930:	d1200515 	stw	r4,-32748(gp)
  806934:	003f7306 	br	806704 <_malloc_r+0x454>
  806938:	00801504 	movi	r2,84
  80693c:	11001936 	bltu	r2,r4,8069a4 <_malloc_r+0x6f4>
  806940:	2804d33a 	srli	r2,r5,12
  806944:	11001b84 	addi	r4,r2,110
  806948:	200690fa 	slli	r3,r4,3
  80694c:	003f8e06 	br	806788 <_malloc_r+0x4d8>
  806950:	480b883a 	mov	r5,r9
  806954:	6807883a 	mov	r3,r13
  806958:	288000cc 	andi	r2,r5,3
  80695c:	18fffe04 	addi	r3,r3,-8
  806960:	297fffc4 	addi	r5,r5,-1
  806964:	10001526 	beq	r2,zero,8069bc <_malloc_r+0x70c>
  806968:	18800217 	ldw	r2,8(r3)
  80696c:	10fffa26 	beq	r2,r3,806958 <_malloc_r+0x6a8>
  806970:	2109883a 	add	r4,r4,r4
  806974:	393f1e36 	bltu	r7,r4,8065f0 <_malloc_r+0x340>
  806978:	203f1d26 	beq	r4,zero,8065f0 <_malloc_r+0x340>
  80697c:	21c4703a 	and	r2,r4,r7
  806980:	10000226 	beq	r2,zero,80698c <_malloc_r+0x6dc>
  806984:	6013883a 	mov	r9,r12
  806988:	003ee106 	br	806510 <_malloc_r+0x260>
  80698c:	2109883a 	add	r4,r4,r4
  806990:	3904703a 	and	r2,r7,r4
  806994:	63000104 	addi	r12,r12,4
  806998:	103ffc26 	beq	r2,zero,80698c <_malloc_r+0x6dc>
  80699c:	6013883a 	mov	r9,r12
  8069a0:	003edb06 	br	806510 <_malloc_r+0x260>
  8069a4:	00805504 	movi	r2,340
  8069a8:	11000836 	bltu	r2,r4,8069cc <_malloc_r+0x71c>
  8069ac:	2804d3fa 	srli	r2,r5,15
  8069b0:	11001dc4 	addi	r4,r2,119
  8069b4:	200690fa 	slli	r3,r4,3
  8069b8:	003f7306 	br	806788 <_malloc_r+0x4d8>
  8069bc:	0104303a 	nor	r2,zero,r4
  8069c0:	388e703a 	and	r7,r7,r2
  8069c4:	e1c00115 	stw	r7,4(fp)
  8069c8:	003fe906 	br	806970 <_malloc_r+0x6c0>
  8069cc:	00815504 	movi	r2,1364
  8069d0:	1100032e 	bgeu	r2,r4,8069e0 <_malloc_r+0x730>
  8069d4:	01001f84 	movi	r4,126
  8069d8:	00c0fc04 	movi	r3,1008
  8069dc:	003f6a06 	br	806788 <_malloc_r+0x4d8>
  8069e0:	2804d4ba 	srli	r2,r5,18
  8069e4:	11001f04 	addi	r4,r2,124
  8069e8:	200690fa 	slli	r3,r4,3
  8069ec:	003f6606 	br	806788 <_malloc_r+0x4d8>

008069f0 <memchr>:
  8069f0:	008000c4 	movi	r2,3
  8069f4:	29403fcc 	andi	r5,r5,255
  8069f8:	2007883a 	mov	r3,r4
  8069fc:	1180022e 	bgeu	r2,r6,806a08 <memchr+0x18>
  806a00:	2084703a 	and	r2,r4,r2
  806a04:	10000b26 	beq	r2,zero,806a34 <memchr+0x44>
  806a08:	313fffc4 	addi	r4,r6,-1
  806a0c:	3000051e 	bne	r6,zero,806a24 <memchr+0x34>
  806a10:	00002c06 	br	806ac4 <memchr+0xd4>
  806a14:	213fffc4 	addi	r4,r4,-1
  806a18:	00bfffc4 	movi	r2,-1
  806a1c:	18c00044 	addi	r3,r3,1
  806a20:	20802826 	beq	r4,r2,806ac4 <memchr+0xd4>
  806a24:	18800003 	ldbu	r2,0(r3)
  806a28:	28bffa1e 	bne	r5,r2,806a14 <memchr+0x24>
  806a2c:	1805883a 	mov	r2,r3
  806a30:	f800283a 	ret
  806a34:	0011883a 	mov	r8,zero
  806a38:	0007883a 	mov	r3,zero
  806a3c:	01c00104 	movi	r7,4
  806a40:	4004923a 	slli	r2,r8,8
  806a44:	18c00044 	addi	r3,r3,1
  806a48:	1151883a 	add	r8,r2,r5
  806a4c:	19fffc1e 	bne	r3,r7,806a40 <memchr+0x50>
  806a50:	02bfbff4 	movhi	r10,65279
  806a54:	52bfbfc4 	addi	r10,r10,-257
  806a58:	02602074 	movhi	r9,32897
  806a5c:	4a602004 	addi	r9,r9,-32640
  806a60:	02c000c4 	movi	r11,3
  806a64:	20800017 	ldw	r2,0(r4)
  806a68:	31bfff04 	addi	r6,r6,-4
  806a6c:	200f883a 	mov	r7,r4
  806a70:	1204f03a 	xor	r2,r2,r8
  806a74:	1287883a 	add	r3,r2,r10
  806a78:	1a46703a 	and	r3,r3,r9
  806a7c:	0084303a 	nor	r2,zero,r2
  806a80:	10c4703a 	and	r2,r2,r3
  806a84:	10000b26 	beq	r2,zero,806ab4 <memchr+0xc4>
  806a88:	20800003 	ldbu	r2,0(r4)
  806a8c:	28800f26 	beq	r5,r2,806acc <memchr+0xdc>
  806a90:	20800043 	ldbu	r2,1(r4)
  806a94:	21c00044 	addi	r7,r4,1
  806a98:	28800c26 	beq	r5,r2,806acc <memchr+0xdc>
  806a9c:	20800083 	ldbu	r2,2(r4)
  806aa0:	21c00084 	addi	r7,r4,2
  806aa4:	28800926 	beq	r5,r2,806acc <memchr+0xdc>
  806aa8:	208000c3 	ldbu	r2,3(r4)
  806aac:	21c000c4 	addi	r7,r4,3
  806ab0:	28800626 	beq	r5,r2,806acc <memchr+0xdc>
  806ab4:	21000104 	addi	r4,r4,4
  806ab8:	59bfea36 	bltu	r11,r6,806a64 <memchr+0x74>
  806abc:	2007883a 	mov	r3,r4
  806ac0:	003fd106 	br	806a08 <memchr+0x18>
  806ac4:	0005883a 	mov	r2,zero
  806ac8:	f800283a 	ret
  806acc:	3805883a 	mov	r2,r7
  806ad0:	f800283a 	ret

00806ad4 <memcpy>:
  806ad4:	01c003c4 	movi	r7,15
  806ad8:	2007883a 	mov	r3,r4
  806adc:	3980032e 	bgeu	r7,r6,806aec <memcpy+0x18>
  806ae0:	2904b03a 	or	r2,r5,r4
  806ae4:	108000cc 	andi	r2,r2,3
  806ae8:	10000926 	beq	r2,zero,806b10 <memcpy+0x3c>
  806aec:	30000626 	beq	r6,zero,806b08 <memcpy+0x34>
  806af0:	30cd883a 	add	r6,r6,r3
  806af4:	28800003 	ldbu	r2,0(r5)
  806af8:	29400044 	addi	r5,r5,1
  806afc:	18800005 	stb	r2,0(r3)
  806b00:	18c00044 	addi	r3,r3,1
  806b04:	30fffb1e 	bne	r6,r3,806af4 <memcpy+0x20>
  806b08:	2005883a 	mov	r2,r4
  806b0c:	f800283a 	ret
  806b10:	3811883a 	mov	r8,r7
  806b14:	200f883a 	mov	r7,r4
  806b18:	28c00017 	ldw	r3,0(r5)
  806b1c:	31bffc04 	addi	r6,r6,-16
  806b20:	38c00015 	stw	r3,0(r7)
  806b24:	28800117 	ldw	r2,4(r5)
  806b28:	38800115 	stw	r2,4(r7)
  806b2c:	28c00217 	ldw	r3,8(r5)
  806b30:	38c00215 	stw	r3,8(r7)
  806b34:	28800317 	ldw	r2,12(r5)
  806b38:	29400404 	addi	r5,r5,16
  806b3c:	38800315 	stw	r2,12(r7)
  806b40:	39c00404 	addi	r7,r7,16
  806b44:	41bff436 	bltu	r8,r6,806b18 <memcpy+0x44>
  806b48:	008000c4 	movi	r2,3
  806b4c:	1180072e 	bgeu	r2,r6,806b6c <memcpy+0x98>
  806b50:	1007883a 	mov	r3,r2
  806b54:	28800017 	ldw	r2,0(r5)
  806b58:	31bfff04 	addi	r6,r6,-4
  806b5c:	29400104 	addi	r5,r5,4
  806b60:	38800015 	stw	r2,0(r7)
  806b64:	39c00104 	addi	r7,r7,4
  806b68:	19bffa36 	bltu	r3,r6,806b54 <memcpy+0x80>
  806b6c:	3807883a 	mov	r3,r7
  806b70:	003fde06 	br	806aec <memcpy+0x18>

00806b74 <memmove>:
  806b74:	2807883a 	mov	r3,r5
  806b78:	2011883a 	mov	r8,r4
  806b7c:	29000c2e 	bgeu	r5,r4,806bb0 <memmove+0x3c>
  806b80:	298f883a 	add	r7,r5,r6
  806b84:	21c00a2e 	bgeu	r4,r7,806bb0 <memmove+0x3c>
  806b88:	30000726 	beq	r6,zero,806ba8 <memmove+0x34>
  806b8c:	2187883a 	add	r3,r4,r6
  806b90:	198dc83a 	sub	r6,r3,r6
  806b94:	39ffffc4 	addi	r7,r7,-1
  806b98:	38800003 	ldbu	r2,0(r7)
  806b9c:	18ffffc4 	addi	r3,r3,-1
  806ba0:	18800005 	stb	r2,0(r3)
  806ba4:	19bffb1e 	bne	r3,r6,806b94 <memmove+0x20>
  806ba8:	2005883a 	mov	r2,r4
  806bac:	f800283a 	ret
  806bb0:	01c003c4 	movi	r7,15
  806bb4:	39800a36 	bltu	r7,r6,806be0 <memmove+0x6c>
  806bb8:	303ffb26 	beq	r6,zero,806ba8 <memmove+0x34>
  806bbc:	400f883a 	mov	r7,r8
  806bc0:	320d883a 	add	r6,r6,r8
  806bc4:	28800003 	ldbu	r2,0(r5)
  806bc8:	29400044 	addi	r5,r5,1
  806bcc:	38800005 	stb	r2,0(r7)
  806bd0:	39c00044 	addi	r7,r7,1
  806bd4:	39bffb1e 	bne	r7,r6,806bc4 <memmove+0x50>
  806bd8:	2005883a 	mov	r2,r4
  806bdc:	f800283a 	ret
  806be0:	1904b03a 	or	r2,r3,r4
  806be4:	108000cc 	andi	r2,r2,3
  806be8:	103ff31e 	bne	r2,zero,806bb8 <memmove+0x44>
  806bec:	3811883a 	mov	r8,r7
  806bf0:	180b883a 	mov	r5,r3
  806bf4:	200f883a 	mov	r7,r4
  806bf8:	28c00017 	ldw	r3,0(r5)
  806bfc:	31bffc04 	addi	r6,r6,-16
  806c00:	38c00015 	stw	r3,0(r7)
  806c04:	28800117 	ldw	r2,4(r5)
  806c08:	38800115 	stw	r2,4(r7)
  806c0c:	28c00217 	ldw	r3,8(r5)
  806c10:	38c00215 	stw	r3,8(r7)
  806c14:	28800317 	ldw	r2,12(r5)
  806c18:	29400404 	addi	r5,r5,16
  806c1c:	38800315 	stw	r2,12(r7)
  806c20:	39c00404 	addi	r7,r7,16
  806c24:	41bff436 	bltu	r8,r6,806bf8 <memmove+0x84>
  806c28:	008000c4 	movi	r2,3
  806c2c:	1180072e 	bgeu	r2,r6,806c4c <memmove+0xd8>
  806c30:	1007883a 	mov	r3,r2
  806c34:	28800017 	ldw	r2,0(r5)
  806c38:	31bfff04 	addi	r6,r6,-4
  806c3c:	29400104 	addi	r5,r5,4
  806c40:	38800015 	stw	r2,0(r7)
  806c44:	39c00104 	addi	r7,r7,4
  806c48:	19bffa36 	bltu	r3,r6,806c34 <memmove+0xc0>
  806c4c:	3811883a 	mov	r8,r7
  806c50:	003fd906 	br	806bb8 <memmove+0x44>

00806c54 <memset>:
  806c54:	008000c4 	movi	r2,3
  806c58:	29403fcc 	andi	r5,r5,255
  806c5c:	2007883a 	mov	r3,r4
  806c60:	1180022e 	bgeu	r2,r6,806c6c <memset+0x18>
  806c64:	2084703a 	and	r2,r4,r2
  806c68:	10000826 	beq	r2,zero,806c8c <memset+0x38>
  806c6c:	30000526 	beq	r6,zero,806c84 <memset+0x30>
  806c70:	2805883a 	mov	r2,r5
  806c74:	30cd883a 	add	r6,r6,r3
  806c78:	18800005 	stb	r2,0(r3)
  806c7c:	18c00044 	addi	r3,r3,1
  806c80:	19bffd1e 	bne	r3,r6,806c78 <memset+0x24>
  806c84:	2005883a 	mov	r2,r4
  806c88:	f800283a 	ret
  806c8c:	2804923a 	slli	r2,r5,8
  806c90:	020003c4 	movi	r8,15
  806c94:	200f883a 	mov	r7,r4
  806c98:	2884b03a 	or	r2,r5,r2
  806c9c:	1006943a 	slli	r3,r2,16
  806ca0:	10c6b03a 	or	r3,r2,r3
  806ca4:	41800a2e 	bgeu	r8,r6,806cd0 <memset+0x7c>
  806ca8:	4005883a 	mov	r2,r8
  806cac:	31bffc04 	addi	r6,r6,-16
  806cb0:	38c00015 	stw	r3,0(r7)
  806cb4:	38c00115 	stw	r3,4(r7)
  806cb8:	38c00215 	stw	r3,8(r7)
  806cbc:	38c00315 	stw	r3,12(r7)
  806cc0:	39c00404 	addi	r7,r7,16
  806cc4:	11bff936 	bltu	r2,r6,806cac <memset+0x58>
  806cc8:	008000c4 	movi	r2,3
  806ccc:	1180052e 	bgeu	r2,r6,806ce4 <memset+0x90>
  806cd0:	31bfff04 	addi	r6,r6,-4
  806cd4:	008000c4 	movi	r2,3
  806cd8:	38c00015 	stw	r3,0(r7)
  806cdc:	39c00104 	addi	r7,r7,4
  806ce0:	11bffb36 	bltu	r2,r6,806cd0 <memset+0x7c>
  806ce4:	3807883a 	mov	r3,r7
  806ce8:	003fe006 	br	806c6c <memset+0x18>

00806cec <_Bfree>:
  806cec:	28000826 	beq	r5,zero,806d10 <_Bfree+0x24>
  806cf0:	28800117 	ldw	r2,4(r5)
  806cf4:	21001317 	ldw	r4,76(r4)
  806cf8:	1085883a 	add	r2,r2,r2
  806cfc:	1085883a 	add	r2,r2,r2
  806d00:	1105883a 	add	r2,r2,r4
  806d04:	10c00017 	ldw	r3,0(r2)
  806d08:	28c00015 	stw	r3,0(r5)
  806d0c:	11400015 	stw	r5,0(r2)
  806d10:	f800283a 	ret

00806d14 <__hi0bits>:
  806d14:	20bfffec 	andhi	r2,r4,65535
  806d18:	10001426 	beq	r2,zero,806d6c <__hi0bits+0x58>
  806d1c:	0007883a 	mov	r3,zero
  806d20:	20bfc02c 	andhi	r2,r4,65280
  806d24:	1000021e 	bne	r2,zero,806d30 <__hi0bits+0x1c>
  806d28:	2008923a 	slli	r4,r4,8
  806d2c:	18c00204 	addi	r3,r3,8
  806d30:	20bc002c 	andhi	r2,r4,61440
  806d34:	1000021e 	bne	r2,zero,806d40 <__hi0bits+0x2c>
  806d38:	2008913a 	slli	r4,r4,4
  806d3c:	18c00104 	addi	r3,r3,4
  806d40:	20b0002c 	andhi	r2,r4,49152
  806d44:	1000031e 	bne	r2,zero,806d54 <__hi0bits+0x40>
  806d48:	2105883a 	add	r2,r4,r4
  806d4c:	18c00084 	addi	r3,r3,2
  806d50:	1089883a 	add	r4,r2,r2
  806d54:	20000316 	blt	r4,zero,806d64 <__hi0bits+0x50>
  806d58:	2090002c 	andhi	r2,r4,16384
  806d5c:	10000626 	beq	r2,zero,806d78 <__hi0bits+0x64>
  806d60:	18c00044 	addi	r3,r3,1
  806d64:	1805883a 	mov	r2,r3
  806d68:	f800283a 	ret
  806d6c:	2008943a 	slli	r4,r4,16
  806d70:	00c00404 	movi	r3,16
  806d74:	003fea06 	br	806d20 <__hi0bits+0xc>
  806d78:	00c00804 	movi	r3,32
  806d7c:	1805883a 	mov	r2,r3
  806d80:	f800283a 	ret

00806d84 <__lo0bits>:
  806d84:	20c00017 	ldw	r3,0(r4)
  806d88:	188001cc 	andi	r2,r3,7
  806d8c:	10000a26 	beq	r2,zero,806db8 <__lo0bits+0x34>
  806d90:	1880004c 	andi	r2,r3,1
  806d94:	1005003a 	cmpeq	r2,r2,zero
  806d98:	10002126 	beq	r2,zero,806e20 <__lo0bits+0x9c>
  806d9c:	1880008c 	andi	r2,r3,2
  806da0:	1000251e 	bne	r2,zero,806e38 <__lo0bits+0xb4>
  806da4:	1804d0ba 	srli	r2,r3,2
  806da8:	01400084 	movi	r5,2
  806dac:	20800015 	stw	r2,0(r4)
  806db0:	2805883a 	mov	r2,r5
  806db4:	f800283a 	ret
  806db8:	18bfffcc 	andi	r2,r3,65535
  806dbc:	10001526 	beq	r2,zero,806e14 <__lo0bits+0x90>
  806dc0:	000b883a 	mov	r5,zero
  806dc4:	18803fcc 	andi	r2,r3,255
  806dc8:	1000021e 	bne	r2,zero,806dd4 <__lo0bits+0x50>
  806dcc:	1806d23a 	srli	r3,r3,8
  806dd0:	29400204 	addi	r5,r5,8
  806dd4:	188003cc 	andi	r2,r3,15
  806dd8:	1000021e 	bne	r2,zero,806de4 <__lo0bits+0x60>
  806ddc:	1806d13a 	srli	r3,r3,4
  806de0:	29400104 	addi	r5,r5,4
  806de4:	188000cc 	andi	r2,r3,3
  806de8:	1000021e 	bne	r2,zero,806df4 <__lo0bits+0x70>
  806dec:	1806d0ba 	srli	r3,r3,2
  806df0:	29400084 	addi	r5,r5,2
  806df4:	1880004c 	andi	r2,r3,1
  806df8:	1000031e 	bne	r2,zero,806e08 <__lo0bits+0x84>
  806dfc:	1806d07a 	srli	r3,r3,1
  806e00:	18000a26 	beq	r3,zero,806e2c <__lo0bits+0xa8>
  806e04:	29400044 	addi	r5,r5,1
  806e08:	2805883a 	mov	r2,r5
  806e0c:	20c00015 	stw	r3,0(r4)
  806e10:	f800283a 	ret
  806e14:	1806d43a 	srli	r3,r3,16
  806e18:	01400404 	movi	r5,16
  806e1c:	003fe906 	br	806dc4 <__lo0bits+0x40>
  806e20:	000b883a 	mov	r5,zero
  806e24:	2805883a 	mov	r2,r5
  806e28:	f800283a 	ret
  806e2c:	01400804 	movi	r5,32
  806e30:	2805883a 	mov	r2,r5
  806e34:	f800283a 	ret
  806e38:	1804d07a 	srli	r2,r3,1
  806e3c:	01400044 	movi	r5,1
  806e40:	20800015 	stw	r2,0(r4)
  806e44:	003fda06 	br	806db0 <__lo0bits+0x2c>

00806e48 <__mcmp>:
  806e48:	20800417 	ldw	r2,16(r4)
  806e4c:	28c00417 	ldw	r3,16(r5)
  806e50:	10cfc83a 	sub	r7,r2,r3
  806e54:	38000c1e 	bne	r7,zero,806e88 <__mcmp+0x40>
  806e58:	18c5883a 	add	r2,r3,r3
  806e5c:	1085883a 	add	r2,r2,r2
  806e60:	10c00504 	addi	r3,r2,20
  806e64:	21000504 	addi	r4,r4,20
  806e68:	28cb883a 	add	r5,r5,r3
  806e6c:	2085883a 	add	r2,r4,r2
  806e70:	10bfff04 	addi	r2,r2,-4
  806e74:	297fff04 	addi	r5,r5,-4
  806e78:	11800017 	ldw	r6,0(r2)
  806e7c:	28c00017 	ldw	r3,0(r5)
  806e80:	30c0031e 	bne	r6,r3,806e90 <__mcmp+0x48>
  806e84:	20bffa36 	bltu	r4,r2,806e70 <__mcmp+0x28>
  806e88:	3805883a 	mov	r2,r7
  806e8c:	f800283a 	ret
  806e90:	30c00336 	bltu	r6,r3,806ea0 <__mcmp+0x58>
  806e94:	01c00044 	movi	r7,1
  806e98:	3805883a 	mov	r2,r7
  806e9c:	f800283a 	ret
  806ea0:	01ffffc4 	movi	r7,-1
  806ea4:	003ff806 	br	806e88 <__mcmp+0x40>

00806ea8 <__ulp>:
  806ea8:	295ffc2c 	andhi	r5,r5,32752
  806eac:	013f3034 	movhi	r4,64704
  806eb0:	290b883a 	add	r5,r5,r4
  806eb4:	0145c83a 	sub	r2,zero,r5
  806eb8:	1007d53a 	srai	r3,r2,20
  806ebc:	000d883a 	mov	r6,zero
  806ec0:	0140040e 	bge	zero,r5,806ed4 <__ulp+0x2c>
  806ec4:	280f883a 	mov	r7,r5
  806ec8:	3807883a 	mov	r3,r7
  806ecc:	3005883a 	mov	r2,r6
  806ed0:	f800283a 	ret
  806ed4:	008004c4 	movi	r2,19
  806ed8:	193ffb04 	addi	r4,r3,-20
  806edc:	10c00c0e 	bge	r2,r3,806f10 <__ulp+0x68>
  806ee0:	008007c4 	movi	r2,31
  806ee4:	1107c83a 	sub	r3,r2,r4
  806ee8:	00800784 	movi	r2,30
  806eec:	01400044 	movi	r5,1
  806ef0:	11000216 	blt	r2,r4,806efc <__ulp+0x54>
  806ef4:	00800044 	movi	r2,1
  806ef8:	10ca983a 	sll	r5,r2,r3
  806efc:	000f883a 	mov	r7,zero
  806f00:	280d883a 	mov	r6,r5
  806f04:	3807883a 	mov	r3,r7
  806f08:	3005883a 	mov	r2,r6
  806f0c:	f800283a 	ret
  806f10:	00800234 	movhi	r2,8
  806f14:	10cfd83a 	sra	r7,r2,r3
  806f18:	000d883a 	mov	r6,zero
  806f1c:	3005883a 	mov	r2,r6
  806f20:	3807883a 	mov	r3,r7
  806f24:	f800283a 	ret

00806f28 <__b2d>:
  806f28:	20800417 	ldw	r2,16(r4)
  806f2c:	defff904 	addi	sp,sp,-28
  806f30:	dd000415 	stw	r20,16(sp)
  806f34:	1085883a 	add	r2,r2,r2
  806f38:	25000504 	addi	r20,r4,20
  806f3c:	1085883a 	add	r2,r2,r2
  806f40:	dc000015 	stw	r16,0(sp)
  806f44:	a0a1883a 	add	r16,r20,r2
  806f48:	dd400515 	stw	r21,20(sp)
  806f4c:	857fff17 	ldw	r21,-4(r16)
  806f50:	dc400115 	stw	r17,4(sp)
  806f54:	dfc00615 	stw	ra,24(sp)
  806f58:	a809883a 	mov	r4,r21
  806f5c:	2823883a 	mov	r17,r5
  806f60:	dcc00315 	stw	r19,12(sp)
  806f64:	dc800215 	stw	r18,8(sp)
  806f68:	0806d140 	call	806d14 <__hi0bits>
  806f6c:	100b883a 	mov	r5,r2
  806f70:	00800804 	movi	r2,32
  806f74:	1145c83a 	sub	r2,r2,r5
  806f78:	88800015 	stw	r2,0(r17)
  806f7c:	00800284 	movi	r2,10
  806f80:	80ffff04 	addi	r3,r16,-4
  806f84:	11401416 	blt	r2,r5,806fd8 <__b2d+0xb0>
  806f88:	008002c4 	movi	r2,11
  806f8c:	1149c83a 	sub	r4,r2,r5
  806f90:	a0c02736 	bltu	r20,r3,807030 <__b2d+0x108>
  806f94:	000d883a 	mov	r6,zero
  806f98:	28800544 	addi	r2,r5,21
  806f9c:	a906d83a 	srl	r3,r21,r4
  806fa0:	a884983a 	sll	r2,r21,r2
  806fa4:	1ccffc34 	orhi	r19,r3,16368
  806fa8:	11a4b03a 	or	r18,r2,r6
  806fac:	9005883a 	mov	r2,r18
  806fb0:	9807883a 	mov	r3,r19
  806fb4:	dfc00617 	ldw	ra,24(sp)
  806fb8:	dd400517 	ldw	r21,20(sp)
  806fbc:	dd000417 	ldw	r20,16(sp)
  806fc0:	dcc00317 	ldw	r19,12(sp)
  806fc4:	dc800217 	ldw	r18,8(sp)
  806fc8:	dc400117 	ldw	r17,4(sp)
  806fcc:	dc000017 	ldw	r16,0(sp)
  806fd0:	dec00704 	addi	sp,sp,28
  806fd4:	f800283a 	ret
  806fd8:	a0c00e36 	bltu	r20,r3,807014 <__b2d+0xec>
  806fdc:	293ffd44 	addi	r4,r5,-11
  806fe0:	000d883a 	mov	r6,zero
  806fe4:	20000f26 	beq	r4,zero,807024 <__b2d+0xfc>
  806fe8:	00800804 	movi	r2,32
  806fec:	110bc83a 	sub	r5,r2,r4
  806ff0:	a0c01236 	bltu	r20,r3,80703c <__b2d+0x114>
  806ff4:	000f883a 	mov	r7,zero
  806ff8:	a904983a 	sll	r2,r21,r4
  806ffc:	3146d83a 	srl	r3,r6,r5
  807000:	3108983a 	sll	r4,r6,r4
  807004:	108ffc34 	orhi	r2,r2,16368
  807008:	18a6b03a 	or	r19,r3,r2
  80700c:	3924b03a 	or	r18,r7,r4
  807010:	003fe606 	br	806fac <__b2d+0x84>
  807014:	293ffd44 	addi	r4,r5,-11
  807018:	81bffe17 	ldw	r6,-8(r16)
  80701c:	80fffe04 	addi	r3,r16,-8
  807020:	203ff11e 	bne	r4,zero,806fe8 <__b2d+0xc0>
  807024:	accffc34 	orhi	r19,r21,16368
  807028:	3025883a 	mov	r18,r6
  80702c:	003fdf06 	br	806fac <__b2d+0x84>
  807030:	18bfff17 	ldw	r2,-4(r3)
  807034:	110cd83a 	srl	r6,r2,r4
  807038:	003fd706 	br	806f98 <__b2d+0x70>
  80703c:	18bfff17 	ldw	r2,-4(r3)
  807040:	114ed83a 	srl	r7,r2,r5
  807044:	003fec06 	br	806ff8 <__b2d+0xd0>

00807048 <__ratio>:
  807048:	defff904 	addi	sp,sp,-28
  80704c:	dc400215 	stw	r17,8(sp)
  807050:	2823883a 	mov	r17,r5
  807054:	d80b883a 	mov	r5,sp
  807058:	dfc00615 	stw	ra,24(sp)
  80705c:	dd000515 	stw	r20,20(sp)
  807060:	dcc00415 	stw	r19,16(sp)
  807064:	dc800315 	stw	r18,12(sp)
  807068:	2025883a 	mov	r18,r4
  80706c:	0806f280 	call	806f28 <__b2d>
  807070:	8809883a 	mov	r4,r17
  807074:	d9400104 	addi	r5,sp,4
  807078:	1027883a 	mov	r19,r2
  80707c:	1829883a 	mov	r20,r3
  807080:	0806f280 	call	806f28 <__b2d>
  807084:	89000417 	ldw	r4,16(r17)
  807088:	91c00417 	ldw	r7,16(r18)
  80708c:	d9800117 	ldw	r6,4(sp)
  807090:	180b883a 	mov	r5,r3
  807094:	390fc83a 	sub	r7,r7,r4
  807098:	1009883a 	mov	r4,r2
  80709c:	d8800017 	ldw	r2,0(sp)
  8070a0:	380e917a 	slli	r7,r7,5
  8070a4:	2011883a 	mov	r8,r4
  8070a8:	1185c83a 	sub	r2,r2,r6
  8070ac:	11c5883a 	add	r2,r2,r7
  8070b0:	1006953a 	slli	r3,r2,20
  8070b4:	2813883a 	mov	r9,r5
  8070b8:	00800d0e 	bge	zero,r2,8070f0 <__ratio+0xa8>
  8070bc:	1d29883a 	add	r20,r3,r20
  8070c0:	a00b883a 	mov	r5,r20
  8070c4:	480f883a 	mov	r7,r9
  8070c8:	9809883a 	mov	r4,r19
  8070cc:	400d883a 	mov	r6,r8
  8070d0:	0809ea40 	call	809ea4 <__divdf3>
  8070d4:	dfc00617 	ldw	ra,24(sp)
  8070d8:	dd000517 	ldw	r20,20(sp)
  8070dc:	dcc00417 	ldw	r19,16(sp)
  8070e0:	dc800317 	ldw	r18,12(sp)
  8070e4:	dc400217 	ldw	r17,8(sp)
  8070e8:	dec00704 	addi	sp,sp,28
  8070ec:	f800283a 	ret
  8070f0:	28d3c83a 	sub	r9,r5,r3
  8070f4:	003ff206 	br	8070c0 <__ratio+0x78>

008070f8 <_mprec_log10>:
  8070f8:	defffe04 	addi	sp,sp,-8
  8070fc:	008005c4 	movi	r2,23
  807100:	dc000015 	stw	r16,0(sp)
  807104:	dfc00115 	stw	ra,4(sp)
  807108:	2021883a 	mov	r16,r4
  80710c:	11000c16 	blt	r2,r4,807140 <_mprec_log10+0x48>
  807110:	200490fa 	slli	r2,r4,3
  807114:	00c02074 	movhi	r3,129
  807118:	18ff9504 	addi	r3,r3,-428
  80711c:	10c5883a 	add	r2,r2,r3
  807120:	12400117 	ldw	r9,4(r2)
  807124:	12000017 	ldw	r8,0(r2)
  807128:	4807883a 	mov	r3,r9
  80712c:	4005883a 	mov	r2,r8
  807130:	dfc00117 	ldw	ra,4(sp)
  807134:	dc000017 	ldw	r16,0(sp)
  807138:	dec00204 	addi	sp,sp,8
  80713c:	f800283a 	ret
  807140:	0011883a 	mov	r8,zero
  807144:	024ffc34 	movhi	r9,16368
  807148:	0005883a 	mov	r2,zero
  80714c:	00d00934 	movhi	r3,16420
  807150:	480b883a 	mov	r5,r9
  807154:	4009883a 	mov	r4,r8
  807158:	180f883a 	mov	r7,r3
  80715c:	100d883a 	mov	r6,r2
  807160:	0809ae00 	call	809ae0 <__muldf3>
  807164:	843fffc4 	addi	r16,r16,-1
  807168:	1011883a 	mov	r8,r2
  80716c:	1813883a 	mov	r9,r3
  807170:	803ff51e 	bne	r16,zero,807148 <_mprec_log10+0x50>
  807174:	4005883a 	mov	r2,r8
  807178:	4807883a 	mov	r3,r9
  80717c:	dfc00117 	ldw	ra,4(sp)
  807180:	dc000017 	ldw	r16,0(sp)
  807184:	dec00204 	addi	sp,sp,8
  807188:	f800283a 	ret

0080718c <__copybits>:
  80718c:	297fffc4 	addi	r5,r5,-1
  807190:	30800417 	ldw	r2,16(r6)
  807194:	280bd17a 	srai	r5,r5,5
  807198:	31800504 	addi	r6,r6,20
  80719c:	1085883a 	add	r2,r2,r2
  8071a0:	294b883a 	add	r5,r5,r5
  8071a4:	294b883a 	add	r5,r5,r5
  8071a8:	1085883a 	add	r2,r2,r2
  8071ac:	290b883a 	add	r5,r5,r4
  8071b0:	3087883a 	add	r3,r6,r2
  8071b4:	29400104 	addi	r5,r5,4
  8071b8:	30c0052e 	bgeu	r6,r3,8071d0 <__copybits+0x44>
  8071bc:	30800017 	ldw	r2,0(r6)
  8071c0:	31800104 	addi	r6,r6,4
  8071c4:	20800015 	stw	r2,0(r4)
  8071c8:	21000104 	addi	r4,r4,4
  8071cc:	30fffb36 	bltu	r6,r3,8071bc <__copybits+0x30>
  8071d0:	2140032e 	bgeu	r4,r5,8071e0 <__copybits+0x54>
  8071d4:	20000015 	stw	zero,0(r4)
  8071d8:	21000104 	addi	r4,r4,4
  8071dc:	217ffd36 	bltu	r4,r5,8071d4 <__copybits+0x48>
  8071e0:	f800283a 	ret

008071e4 <__any_on>:
  8071e4:	20800417 	ldw	r2,16(r4)
  8071e8:	2807d17a 	srai	r3,r5,5
  8071ec:	21000504 	addi	r4,r4,20
  8071f0:	10c00d0e 	bge	r2,r3,807228 <__any_on+0x44>
  8071f4:	1085883a 	add	r2,r2,r2
  8071f8:	1085883a 	add	r2,r2,r2
  8071fc:	208d883a 	add	r6,r4,r2
  807200:	2180182e 	bgeu	r4,r6,807264 <__any_on+0x80>
  807204:	30bfff17 	ldw	r2,-4(r6)
  807208:	30ffff04 	addi	r3,r6,-4
  80720c:	1000041e 	bne	r2,zero,807220 <__any_on+0x3c>
  807210:	20c0142e 	bgeu	r4,r3,807264 <__any_on+0x80>
  807214:	18ffff04 	addi	r3,r3,-4
  807218:	18800017 	ldw	r2,0(r3)
  80721c:	103ffc26 	beq	r2,zero,807210 <__any_on+0x2c>
  807220:	00800044 	movi	r2,1
  807224:	f800283a 	ret
  807228:	18800a0e 	bge	r3,r2,807254 <__any_on+0x70>
  80722c:	294007cc 	andi	r5,r5,31
  807230:	28000826 	beq	r5,zero,807254 <__any_on+0x70>
  807234:	18c5883a 	add	r2,r3,r3
  807238:	1085883a 	add	r2,r2,r2
  80723c:	208d883a 	add	r6,r4,r2
  807240:	30c00017 	ldw	r3,0(r6)
  807244:	1944d83a 	srl	r2,r3,r5
  807248:	1144983a 	sll	r2,r2,r5
  80724c:	18bff41e 	bne	r3,r2,807220 <__any_on+0x3c>
  807250:	003feb06 	br	807200 <__any_on+0x1c>
  807254:	18c5883a 	add	r2,r3,r3
  807258:	1085883a 	add	r2,r2,r2
  80725c:	208d883a 	add	r6,r4,r2
  807260:	003fe706 	br	807200 <__any_on+0x1c>
  807264:	0005883a 	mov	r2,zero
  807268:	f800283a 	ret

0080726c <_Balloc>:
  80726c:	20c01317 	ldw	r3,76(r4)
  807270:	defffb04 	addi	sp,sp,-20
  807274:	dcc00315 	stw	r19,12(sp)
  807278:	dc800215 	stw	r18,8(sp)
  80727c:	dfc00415 	stw	ra,16(sp)
  807280:	2825883a 	mov	r18,r5
  807284:	dc400115 	stw	r17,4(sp)
  807288:	dc000015 	stw	r16,0(sp)
  80728c:	2027883a 	mov	r19,r4
  807290:	01800404 	movi	r6,16
  807294:	01400104 	movi	r5,4
  807298:	18001726 	beq	r3,zero,8072f8 <_Balloc+0x8c>
  80729c:	01400044 	movi	r5,1
  8072a0:	9485883a 	add	r2,r18,r18
  8072a4:	2ca2983a 	sll	r17,r5,r18
  8072a8:	1085883a 	add	r2,r2,r2
  8072ac:	10c7883a 	add	r3,r2,r3
  8072b0:	1c000017 	ldw	r16,0(r3)
  8072b4:	8c4d883a 	add	r6,r17,r17
  8072b8:	318d883a 	add	r6,r6,r6
  8072bc:	9809883a 	mov	r4,r19
  8072c0:	31800504 	addi	r6,r6,20
  8072c4:	80001226 	beq	r16,zero,807310 <_Balloc+0xa4>
  8072c8:	80800017 	ldw	r2,0(r16)
  8072cc:	18800015 	stw	r2,0(r3)
  8072d0:	80000415 	stw	zero,16(r16)
  8072d4:	80000315 	stw	zero,12(r16)
  8072d8:	8005883a 	mov	r2,r16
  8072dc:	dfc00417 	ldw	ra,16(sp)
  8072e0:	dcc00317 	ldw	r19,12(sp)
  8072e4:	dc800217 	ldw	r18,8(sp)
  8072e8:	dc400117 	ldw	r17,4(sp)
  8072ec:	dc000017 	ldw	r16,0(sp)
  8072f0:	dec00504 	addi	sp,sp,20
  8072f4:	f800283a 	ret
  8072f8:	08086340 	call	808634 <_calloc_r>
  8072fc:	1007883a 	mov	r3,r2
  807300:	0021883a 	mov	r16,zero
  807304:	98801315 	stw	r2,76(r19)
  807308:	103fe41e 	bne	r2,zero,80729c <_Balloc+0x30>
  80730c:	003ff206 	br	8072d8 <_Balloc+0x6c>
  807310:	08086340 	call	808634 <_calloc_r>
  807314:	103ff026 	beq	r2,zero,8072d8 <_Balloc+0x6c>
  807318:	1021883a 	mov	r16,r2
  80731c:	14800115 	stw	r18,4(r2)
  807320:	14400215 	stw	r17,8(r2)
  807324:	003fea06 	br	8072d0 <_Balloc+0x64>

00807328 <__d2b>:
  807328:	defff504 	addi	sp,sp,-44
  80732c:	dcc00515 	stw	r19,20(sp)
  807330:	04c00044 	movi	r19,1
  807334:	dc000215 	stw	r16,8(sp)
  807338:	2821883a 	mov	r16,r5
  80733c:	980b883a 	mov	r5,r19
  807340:	ddc00915 	stw	r23,36(sp)
  807344:	dd800815 	stw	r22,32(sp)
  807348:	dd400715 	stw	r21,28(sp)
  80734c:	dd000615 	stw	r20,24(sp)
  807350:	dc800415 	stw	r18,16(sp)
  807354:	dc400315 	stw	r17,12(sp)
  807358:	dfc00a15 	stw	ra,40(sp)
  80735c:	3023883a 	mov	r17,r6
  807360:	382d883a 	mov	r22,r7
  807364:	ddc00b17 	ldw	r23,44(sp)
  807368:	080726c0 	call	80726c <_Balloc>
  80736c:	1025883a 	mov	r18,r2
  807370:	00a00034 	movhi	r2,32768
  807374:	10bfffc4 	addi	r2,r2,-1
  807378:	8888703a 	and	r4,r17,r2
  80737c:	202ad53a 	srli	r21,r4,20
  807380:	00800434 	movhi	r2,16
  807384:	10bfffc4 	addi	r2,r2,-1
  807388:	8886703a 	and	r3,r17,r2
  80738c:	a829003a 	cmpeq	r20,r21,zero
  807390:	800b883a 	mov	r5,r16
  807394:	d8c00115 	stw	r3,4(sp)
  807398:	94000504 	addi	r16,r18,20
  80739c:	a000021e 	bne	r20,zero,8073a8 <__d2b+0x80>
  8073a0:	18c00434 	orhi	r3,r3,16
  8073a4:	d8c00115 	stw	r3,4(sp)
  8073a8:	28002726 	beq	r5,zero,807448 <__d2b+0x120>
  8073ac:	d809883a 	mov	r4,sp
  8073b0:	d9400015 	stw	r5,0(sp)
  8073b4:	0806d840 	call	806d84 <__lo0bits>
  8073b8:	100d883a 	mov	r6,r2
  8073bc:	10003526 	beq	r2,zero,807494 <__d2b+0x16c>
  8073c0:	d8c00117 	ldw	r3,4(sp)
  8073c4:	00800804 	movi	r2,32
  8073c8:	1185c83a 	sub	r2,r2,r6
  8073cc:	d9000017 	ldw	r4,0(sp)
  8073d0:	1886983a 	sll	r3,r3,r2
  8073d4:	1906b03a 	or	r3,r3,r4
  8073d8:	90c00515 	stw	r3,20(r18)
  8073dc:	d8c00117 	ldw	r3,4(sp)
  8073e0:	1986d83a 	srl	r3,r3,r6
  8073e4:	d8c00115 	stw	r3,4(sp)
  8073e8:	180b003a 	cmpeq	r5,r3,zero
  8073ec:	00800084 	movi	r2,2
  8073f0:	114bc83a 	sub	r5,r2,r5
  8073f4:	80c00115 	stw	r3,4(r16)
  8073f8:	91400415 	stw	r5,16(r18)
  8073fc:	a0001a1e 	bne	r20,zero,807468 <__d2b+0x140>
  807400:	3545883a 	add	r2,r6,r21
  807404:	10bef344 	addi	r2,r2,-1075
  807408:	00c00d44 	movi	r3,53
  80740c:	b0800015 	stw	r2,0(r22)
  807410:	1987c83a 	sub	r3,r3,r6
  807414:	b8c00015 	stw	r3,0(r23)
  807418:	9005883a 	mov	r2,r18
  80741c:	dfc00a17 	ldw	ra,40(sp)
  807420:	ddc00917 	ldw	r23,36(sp)
  807424:	dd800817 	ldw	r22,32(sp)
  807428:	dd400717 	ldw	r21,28(sp)
  80742c:	dd000617 	ldw	r20,24(sp)
  807430:	dcc00517 	ldw	r19,20(sp)
  807434:	dc800417 	ldw	r18,16(sp)
  807438:	dc400317 	ldw	r17,12(sp)
  80743c:	dc000217 	ldw	r16,8(sp)
  807440:	dec00b04 	addi	sp,sp,44
  807444:	f800283a 	ret
  807448:	d9000104 	addi	r4,sp,4
  80744c:	0806d840 	call	806d84 <__lo0bits>
  807450:	11800804 	addi	r6,r2,32
  807454:	d8800117 	ldw	r2,4(sp)
  807458:	94c00415 	stw	r19,16(r18)
  80745c:	980b883a 	mov	r5,r19
  807460:	90800515 	stw	r2,20(r18)
  807464:	a03fe626 	beq	r20,zero,807400 <__d2b+0xd8>
  807468:	2945883a 	add	r2,r5,r5
  80746c:	1085883a 	add	r2,r2,r2
  807470:	1405883a 	add	r2,r2,r16
  807474:	113fff17 	ldw	r4,-4(r2)
  807478:	30fef384 	addi	r3,r6,-1074
  80747c:	2820917a 	slli	r16,r5,5
  807480:	b0c00015 	stw	r3,0(r22)
  807484:	0806d140 	call	806d14 <__hi0bits>
  807488:	80a1c83a 	sub	r16,r16,r2
  80748c:	bc000015 	stw	r16,0(r23)
  807490:	003fe106 	br	807418 <__d2b+0xf0>
  807494:	d8800017 	ldw	r2,0(sp)
  807498:	90800515 	stw	r2,20(r18)
  80749c:	d8c00117 	ldw	r3,4(sp)
  8074a0:	003fd106 	br	8073e8 <__d2b+0xc0>

008074a4 <__mdiff>:
  8074a4:	defffb04 	addi	sp,sp,-20
  8074a8:	dc000015 	stw	r16,0(sp)
  8074ac:	2821883a 	mov	r16,r5
  8074b0:	dc800215 	stw	r18,8(sp)
  8074b4:	300b883a 	mov	r5,r6
  8074b8:	2025883a 	mov	r18,r4
  8074bc:	8009883a 	mov	r4,r16
  8074c0:	dc400115 	stw	r17,4(sp)
  8074c4:	dfc00415 	stw	ra,16(sp)
  8074c8:	dcc00315 	stw	r19,12(sp)
  8074cc:	3023883a 	mov	r17,r6
  8074d0:	0806e480 	call	806e48 <__mcmp>
  8074d4:	10004226 	beq	r2,zero,8075e0 <__mdiff+0x13c>
  8074d8:	10005016 	blt	r2,zero,80761c <__mdiff+0x178>
  8074dc:	0027883a 	mov	r19,zero
  8074e0:	81400117 	ldw	r5,4(r16)
  8074e4:	9009883a 	mov	r4,r18
  8074e8:	080726c0 	call	80726c <_Balloc>
  8074ec:	1019883a 	mov	r12,r2
  8074f0:	82800417 	ldw	r10,16(r16)
  8074f4:	88800417 	ldw	r2,16(r17)
  8074f8:	81800504 	addi	r6,r16,20
  8074fc:	5287883a 	add	r3,r10,r10
  807500:	1085883a 	add	r2,r2,r2
  807504:	18c7883a 	add	r3,r3,r3
  807508:	1085883a 	add	r2,r2,r2
  80750c:	8a000504 	addi	r8,r17,20
  807510:	64c00315 	stw	r19,12(r12)
  807514:	30db883a 	add	r13,r6,r3
  807518:	4097883a 	add	r11,r8,r2
  80751c:	61c00504 	addi	r7,r12,20
  807520:	0013883a 	mov	r9,zero
  807524:	31000017 	ldw	r4,0(r6)
  807528:	41400017 	ldw	r5,0(r8)
  80752c:	42000104 	addi	r8,r8,4
  807530:	20bfffcc 	andi	r2,r4,65535
  807534:	28ffffcc 	andi	r3,r5,65535
  807538:	10c5c83a 	sub	r2,r2,r3
  80753c:	1245883a 	add	r2,r2,r9
  807540:	2008d43a 	srli	r4,r4,16
  807544:	280ad43a 	srli	r5,r5,16
  807548:	1007d43a 	srai	r3,r2,16
  80754c:	3880000d 	sth	r2,0(r7)
  807550:	2149c83a 	sub	r4,r4,r5
  807554:	20c9883a 	add	r4,r4,r3
  807558:	3900008d 	sth	r4,2(r7)
  80755c:	31800104 	addi	r6,r6,4
  807560:	39c00104 	addi	r7,r7,4
  807564:	2013d43a 	srai	r9,r4,16
  807568:	42ffee36 	bltu	r8,r11,807524 <__mdiff+0x80>
  80756c:	33400c2e 	bgeu	r6,r13,8075a0 <__mdiff+0xfc>
  807570:	30800017 	ldw	r2,0(r6)
  807574:	31800104 	addi	r6,r6,4
  807578:	10ffffcc 	andi	r3,r2,65535
  80757c:	1a47883a 	add	r3,r3,r9
  807580:	1004d43a 	srli	r2,r2,16
  807584:	1809d43a 	srai	r4,r3,16
  807588:	38c0000d 	sth	r3,0(r7)
  80758c:	1105883a 	add	r2,r2,r4
  807590:	3880008d 	sth	r2,2(r7)
  807594:	1013d43a 	srai	r9,r2,16
  807598:	39c00104 	addi	r7,r7,4
  80759c:	337ff436 	bltu	r6,r13,807570 <__mdiff+0xcc>
  8075a0:	38bfff17 	ldw	r2,-4(r7)
  8075a4:	38ffff04 	addi	r3,r7,-4
  8075a8:	1000041e 	bne	r2,zero,8075bc <__mdiff+0x118>
  8075ac:	18ffff04 	addi	r3,r3,-4
  8075b0:	18800017 	ldw	r2,0(r3)
  8075b4:	52bfffc4 	addi	r10,r10,-1
  8075b8:	103ffc26 	beq	r2,zero,8075ac <__mdiff+0x108>
  8075bc:	6005883a 	mov	r2,r12
  8075c0:	62800415 	stw	r10,16(r12)
  8075c4:	dfc00417 	ldw	ra,16(sp)
  8075c8:	dcc00317 	ldw	r19,12(sp)
  8075cc:	dc800217 	ldw	r18,8(sp)
  8075d0:	dc400117 	ldw	r17,4(sp)
  8075d4:	dc000017 	ldw	r16,0(sp)
  8075d8:	dec00504 	addi	sp,sp,20
  8075dc:	f800283a 	ret
  8075e0:	9009883a 	mov	r4,r18
  8075e4:	000b883a 	mov	r5,zero
  8075e8:	080726c0 	call	80726c <_Balloc>
  8075ec:	1019883a 	mov	r12,r2
  8075f0:	00800044 	movi	r2,1
  8075f4:	60800415 	stw	r2,16(r12)
  8075f8:	6005883a 	mov	r2,r12
  8075fc:	60000515 	stw	zero,20(r12)
  807600:	dfc00417 	ldw	ra,16(sp)
  807604:	dcc00317 	ldw	r19,12(sp)
  807608:	dc800217 	ldw	r18,8(sp)
  80760c:	dc400117 	ldw	r17,4(sp)
  807610:	dc000017 	ldw	r16,0(sp)
  807614:	dec00504 	addi	sp,sp,20
  807618:	f800283a 	ret
  80761c:	880d883a 	mov	r6,r17
  807620:	04c00044 	movi	r19,1
  807624:	8023883a 	mov	r17,r16
  807628:	3021883a 	mov	r16,r6
  80762c:	003fac06 	br	8074e0 <__mdiff+0x3c>

00807630 <__lshift>:
  807630:	defff904 	addi	sp,sp,-28
  807634:	28800417 	ldw	r2,16(r5)
  807638:	dc000015 	stw	r16,0(sp)
  80763c:	3021d17a 	srai	r16,r6,5
  807640:	28c00217 	ldw	r3,8(r5)
  807644:	10800044 	addi	r2,r2,1
  807648:	dc400115 	stw	r17,4(sp)
  80764c:	80a3883a 	add	r17,r16,r2
  807650:	dd400515 	stw	r21,20(sp)
  807654:	dd000415 	stw	r20,16(sp)
  807658:	dc800215 	stw	r18,8(sp)
  80765c:	dfc00615 	stw	ra,24(sp)
  807660:	2825883a 	mov	r18,r5
  807664:	dcc00315 	stw	r19,12(sp)
  807668:	3029883a 	mov	r20,r6
  80766c:	202b883a 	mov	r21,r4
  807670:	29400117 	ldw	r5,4(r5)
  807674:	1c40030e 	bge	r3,r17,807684 <__lshift+0x54>
  807678:	18c7883a 	add	r3,r3,r3
  80767c:	29400044 	addi	r5,r5,1
  807680:	1c7ffd16 	blt	r3,r17,807678 <__lshift+0x48>
  807684:	a809883a 	mov	r4,r21
  807688:	080726c0 	call	80726c <_Balloc>
  80768c:	1027883a 	mov	r19,r2
  807690:	11400504 	addi	r5,r2,20
  807694:	0400090e 	bge	zero,r16,8076bc <__lshift+0x8c>
  807698:	2805883a 	mov	r2,r5
  80769c:	0007883a 	mov	r3,zero
  8076a0:	18c00044 	addi	r3,r3,1
  8076a4:	10000015 	stw	zero,0(r2)
  8076a8:	10800104 	addi	r2,r2,4
  8076ac:	80fffc1e 	bne	r16,r3,8076a0 <__lshift+0x70>
  8076b0:	8405883a 	add	r2,r16,r16
  8076b4:	1085883a 	add	r2,r2,r2
  8076b8:	288b883a 	add	r5,r5,r2
  8076bc:	90800417 	ldw	r2,16(r18)
  8076c0:	91000504 	addi	r4,r18,20
  8076c4:	a18007cc 	andi	r6,r20,31
  8076c8:	1085883a 	add	r2,r2,r2
  8076cc:	1085883a 	add	r2,r2,r2
  8076d0:	208f883a 	add	r7,r4,r2
  8076d4:	30001e26 	beq	r6,zero,807750 <__lshift+0x120>
  8076d8:	00800804 	movi	r2,32
  8076dc:	1191c83a 	sub	r8,r2,r6
  8076e0:	0007883a 	mov	r3,zero
  8076e4:	20800017 	ldw	r2,0(r4)
  8076e8:	1184983a 	sll	r2,r2,r6
  8076ec:	1884b03a 	or	r2,r3,r2
  8076f0:	28800015 	stw	r2,0(r5)
  8076f4:	20c00017 	ldw	r3,0(r4)
  8076f8:	21000104 	addi	r4,r4,4
  8076fc:	29400104 	addi	r5,r5,4
  807700:	1a06d83a 	srl	r3,r3,r8
  807704:	21fff736 	bltu	r4,r7,8076e4 <__lshift+0xb4>
  807708:	28c00015 	stw	r3,0(r5)
  80770c:	18000126 	beq	r3,zero,807714 <__lshift+0xe4>
  807710:	8c400044 	addi	r17,r17,1
  807714:	88bfffc4 	addi	r2,r17,-1
  807718:	98800415 	stw	r2,16(r19)
  80771c:	a809883a 	mov	r4,r21
  807720:	900b883a 	mov	r5,r18
  807724:	0806cec0 	call	806cec <_Bfree>
  807728:	9805883a 	mov	r2,r19
  80772c:	dfc00617 	ldw	ra,24(sp)
  807730:	dd400517 	ldw	r21,20(sp)
  807734:	dd000417 	ldw	r20,16(sp)
  807738:	dcc00317 	ldw	r19,12(sp)
  80773c:	dc800217 	ldw	r18,8(sp)
  807740:	dc400117 	ldw	r17,4(sp)
  807744:	dc000017 	ldw	r16,0(sp)
  807748:	dec00704 	addi	sp,sp,28
  80774c:	f800283a 	ret
  807750:	20800017 	ldw	r2,0(r4)
  807754:	21000104 	addi	r4,r4,4
  807758:	28800015 	stw	r2,0(r5)
  80775c:	29400104 	addi	r5,r5,4
  807760:	21ffec2e 	bgeu	r4,r7,807714 <__lshift+0xe4>
  807764:	20800017 	ldw	r2,0(r4)
  807768:	21000104 	addi	r4,r4,4
  80776c:	28800015 	stw	r2,0(r5)
  807770:	29400104 	addi	r5,r5,4
  807774:	21fff636 	bltu	r4,r7,807750 <__lshift+0x120>
  807778:	003fe606 	br	807714 <__lshift+0xe4>

0080777c <__multiply>:
  80777c:	defff904 	addi	sp,sp,-28
  807780:	dcc00315 	stw	r19,12(sp)
  807784:	dc800215 	stw	r18,8(sp)
  807788:	2cc00417 	ldw	r19,16(r5)
  80778c:	34800417 	ldw	r18,16(r6)
  807790:	dd000415 	stw	r20,16(sp)
  807794:	dc400115 	stw	r17,4(sp)
  807798:	dfc00615 	stw	ra,24(sp)
  80779c:	dd400515 	stw	r21,20(sp)
  8077a0:	dc000015 	stw	r16,0(sp)
  8077a4:	2823883a 	mov	r17,r5
  8077a8:	3029883a 	mov	r20,r6
  8077ac:	9c80040e 	bge	r19,r18,8077c0 <__multiply+0x44>
  8077b0:	9027883a 	mov	r19,r18
  8077b4:	2c800417 	ldw	r18,16(r5)
  8077b8:	2829883a 	mov	r20,r5
  8077bc:	3023883a 	mov	r17,r6
  8077c0:	88800217 	ldw	r2,8(r17)
  8077c4:	9ca1883a 	add	r16,r19,r18
  8077c8:	89400117 	ldw	r5,4(r17)
  8077cc:	1400010e 	bge	r2,r16,8077d4 <__multiply+0x58>
  8077d0:	29400044 	addi	r5,r5,1
  8077d4:	080726c0 	call	80726c <_Balloc>
  8077d8:	102b883a 	mov	r21,r2
  8077dc:	8405883a 	add	r2,r16,r16
  8077e0:	1085883a 	add	r2,r2,r2
  8077e4:	a9000504 	addi	r4,r21,20
  8077e8:	209d883a 	add	r14,r4,r2
  8077ec:	2380042e 	bgeu	r4,r14,807800 <__multiply+0x84>
  8077f0:	2005883a 	mov	r2,r4
  8077f4:	10000015 	stw	zero,0(r2)
  8077f8:	10800104 	addi	r2,r2,4
  8077fc:	13bffd36 	bltu	r2,r14,8077f4 <__multiply+0x78>
  807800:	9485883a 	add	r2,r18,r18
  807804:	9cc7883a 	add	r3,r19,r19
  807808:	a1800504 	addi	r6,r20,20
  80780c:	1085883a 	add	r2,r2,r2
  807810:	8b400504 	addi	r13,r17,20
  807814:	18c7883a 	add	r3,r3,r3
  807818:	309f883a 	add	r15,r6,r2
  80781c:	68d7883a 	add	r11,r13,r3
  807820:	33c03b2e 	bgeu	r6,r15,807910 <__multiply+0x194>
  807824:	2019883a 	mov	r12,r4
  807828:	30800017 	ldw	r2,0(r6)
  80782c:	127fffcc 	andi	r9,r2,65535
  807830:	48001826 	beq	r9,zero,807894 <__multiply+0x118>
  807834:	6811883a 	mov	r8,r13
  807838:	600f883a 	mov	r7,r12
  80783c:	0015883a 	mov	r10,zero
  807840:	40c00017 	ldw	r3,0(r8)
  807844:	39400017 	ldw	r5,0(r7)
  807848:	42000104 	addi	r8,r8,4
  80784c:	193fffcc 	andi	r4,r3,65535
  807850:	4909383a 	mul	r4,r9,r4
  807854:	1806d43a 	srli	r3,r3,16
  807858:	28bfffcc 	andi	r2,r5,65535
  80785c:	5085883a 	add	r2,r10,r2
  807860:	2089883a 	add	r4,r4,r2
  807864:	48c7383a 	mul	r3,r9,r3
  807868:	280ad43a 	srli	r5,r5,16
  80786c:	2004d43a 	srli	r2,r4,16
  807870:	3900000d 	sth	r4,0(r7)
  807874:	1947883a 	add	r3,r3,r5
  807878:	10c5883a 	add	r2,r2,r3
  80787c:	3880008d 	sth	r2,2(r7)
  807880:	1014d43a 	srli	r10,r2,16
  807884:	39c00104 	addi	r7,r7,4
  807888:	42ffed36 	bltu	r8,r11,807840 <__multiply+0xc4>
  80788c:	3a800015 	stw	r10,0(r7)
  807890:	30800017 	ldw	r2,0(r6)
  807894:	1012d43a 	srli	r9,r2,16
  807898:	48001926 	beq	r9,zero,807900 <__multiply+0x184>
  80789c:	60800017 	ldw	r2,0(r12)
  8078a0:	6811883a 	mov	r8,r13
  8078a4:	600f883a 	mov	r7,r12
  8078a8:	0015883a 	mov	r10,zero
  8078ac:	100b883a 	mov	r5,r2
  8078b0:	41000017 	ldw	r4,0(r8)
  8078b4:	2806d43a 	srli	r3,r5,16
  8078b8:	3880000d 	sth	r2,0(r7)
  8078bc:	20bfffcc 	andi	r2,r4,65535
  8078c0:	4885383a 	mul	r2,r9,r2
  8078c4:	50c7883a 	add	r3,r10,r3
  8078c8:	2008d43a 	srli	r4,r4,16
  8078cc:	10c5883a 	add	r2,r2,r3
  8078d0:	3880008d 	sth	r2,2(r7)
  8078d4:	39c00104 	addi	r7,r7,4
  8078d8:	39400017 	ldw	r5,0(r7)
  8078dc:	4909383a 	mul	r4,r9,r4
  8078e0:	1004d43a 	srli	r2,r2,16
  8078e4:	28ffffcc 	andi	r3,r5,65535
  8078e8:	20c9883a 	add	r4,r4,r3
  8078ec:	1105883a 	add	r2,r2,r4
  8078f0:	42000104 	addi	r8,r8,4
  8078f4:	1014d43a 	srli	r10,r2,16
  8078f8:	42ffed36 	bltu	r8,r11,8078b0 <__multiply+0x134>
  8078fc:	38800015 	stw	r2,0(r7)
  807900:	31800104 	addi	r6,r6,4
  807904:	33c0022e 	bgeu	r6,r15,807910 <__multiply+0x194>
  807908:	63000104 	addi	r12,r12,4
  80790c:	003fc606 	br	807828 <__multiply+0xac>
  807910:	0400090e 	bge	zero,r16,807938 <__multiply+0x1bc>
  807914:	70bfff17 	ldw	r2,-4(r14)
  807918:	70ffff04 	addi	r3,r14,-4
  80791c:	10000326 	beq	r2,zero,80792c <__multiply+0x1b0>
  807920:	00000506 	br	807938 <__multiply+0x1bc>
  807924:	18800017 	ldw	r2,0(r3)
  807928:	1000031e 	bne	r2,zero,807938 <__multiply+0x1bc>
  80792c:	843fffc4 	addi	r16,r16,-1
  807930:	18ffff04 	addi	r3,r3,-4
  807934:	803ffb1e 	bne	r16,zero,807924 <__multiply+0x1a8>
  807938:	a805883a 	mov	r2,r21
  80793c:	ac000415 	stw	r16,16(r21)
  807940:	dfc00617 	ldw	ra,24(sp)
  807944:	dd400517 	ldw	r21,20(sp)
  807948:	dd000417 	ldw	r20,16(sp)
  80794c:	dcc00317 	ldw	r19,12(sp)
  807950:	dc800217 	ldw	r18,8(sp)
  807954:	dc400117 	ldw	r17,4(sp)
  807958:	dc000017 	ldw	r16,0(sp)
  80795c:	dec00704 	addi	sp,sp,28
  807960:	f800283a 	ret

00807964 <__i2b>:
  807964:	defffd04 	addi	sp,sp,-12
  807968:	dc000015 	stw	r16,0(sp)
  80796c:	04000044 	movi	r16,1
  807970:	dc800115 	stw	r18,4(sp)
  807974:	2825883a 	mov	r18,r5
  807978:	800b883a 	mov	r5,r16
  80797c:	dfc00215 	stw	ra,8(sp)
  807980:	080726c0 	call	80726c <_Balloc>
  807984:	14000415 	stw	r16,16(r2)
  807988:	14800515 	stw	r18,20(r2)
  80798c:	dfc00217 	ldw	ra,8(sp)
  807990:	dc800117 	ldw	r18,4(sp)
  807994:	dc000017 	ldw	r16,0(sp)
  807998:	dec00304 	addi	sp,sp,12
  80799c:	f800283a 	ret

008079a0 <__multadd>:
  8079a0:	defffa04 	addi	sp,sp,-24
  8079a4:	dc800215 	stw	r18,8(sp)
  8079a8:	2c800417 	ldw	r18,16(r5)
  8079ac:	dd000415 	stw	r20,16(sp)
  8079b0:	dcc00315 	stw	r19,12(sp)
  8079b4:	dc000015 	stw	r16,0(sp)
  8079b8:	dfc00515 	stw	ra,20(sp)
  8079bc:	3821883a 	mov	r16,r7
  8079c0:	dc400115 	stw	r17,4(sp)
  8079c4:	2827883a 	mov	r19,r5
  8079c8:	2029883a 	mov	r20,r4
  8079cc:	2a000504 	addi	r8,r5,20
  8079d0:	000f883a 	mov	r7,zero
  8079d4:	40800017 	ldw	r2,0(r8)
  8079d8:	39c00044 	addi	r7,r7,1
  8079dc:	10ffffcc 	andi	r3,r2,65535
  8079e0:	1987383a 	mul	r3,r3,r6
  8079e4:	1004d43a 	srli	r2,r2,16
  8079e8:	1c07883a 	add	r3,r3,r16
  8079ec:	180ad43a 	srli	r5,r3,16
  8079f0:	1185383a 	mul	r2,r2,r6
  8079f4:	18ffffcc 	andi	r3,r3,65535
  8079f8:	1145883a 	add	r2,r2,r5
  8079fc:	1008943a 	slli	r4,r2,16
  807a00:	1020d43a 	srli	r16,r2,16
  807a04:	20c9883a 	add	r4,r4,r3
  807a08:	41000015 	stw	r4,0(r8)
  807a0c:	42000104 	addi	r8,r8,4
  807a10:	3cbff016 	blt	r7,r18,8079d4 <__multadd+0x34>
  807a14:	80000826 	beq	r16,zero,807a38 <__multadd+0x98>
  807a18:	98800217 	ldw	r2,8(r19)
  807a1c:	90800f0e 	bge	r18,r2,807a5c <__multadd+0xbc>
  807a20:	9485883a 	add	r2,r18,r18
  807a24:	1085883a 	add	r2,r2,r2
  807a28:	14c5883a 	add	r2,r2,r19
  807a2c:	90c00044 	addi	r3,r18,1
  807a30:	14000515 	stw	r16,20(r2)
  807a34:	98c00415 	stw	r3,16(r19)
  807a38:	9805883a 	mov	r2,r19
  807a3c:	dfc00517 	ldw	ra,20(sp)
  807a40:	dd000417 	ldw	r20,16(sp)
  807a44:	dcc00317 	ldw	r19,12(sp)
  807a48:	dc800217 	ldw	r18,8(sp)
  807a4c:	dc400117 	ldw	r17,4(sp)
  807a50:	dc000017 	ldw	r16,0(sp)
  807a54:	dec00604 	addi	sp,sp,24
  807a58:	f800283a 	ret
  807a5c:	99400117 	ldw	r5,4(r19)
  807a60:	a009883a 	mov	r4,r20
  807a64:	29400044 	addi	r5,r5,1
  807a68:	080726c0 	call	80726c <_Balloc>
  807a6c:	99800417 	ldw	r6,16(r19)
  807a70:	99400304 	addi	r5,r19,12
  807a74:	11000304 	addi	r4,r2,12
  807a78:	318d883a 	add	r6,r6,r6
  807a7c:	318d883a 	add	r6,r6,r6
  807a80:	31800204 	addi	r6,r6,8
  807a84:	1023883a 	mov	r17,r2
  807a88:	0806ad40 	call	806ad4 <memcpy>
  807a8c:	980b883a 	mov	r5,r19
  807a90:	a009883a 	mov	r4,r20
  807a94:	0806cec0 	call	806cec <_Bfree>
  807a98:	8827883a 	mov	r19,r17
  807a9c:	003fe006 	br	807a20 <__multadd+0x80>

00807aa0 <__pow5mult>:
  807aa0:	defffa04 	addi	sp,sp,-24
  807aa4:	308000cc 	andi	r2,r6,3
  807aa8:	dd000415 	stw	r20,16(sp)
  807aac:	dcc00315 	stw	r19,12(sp)
  807ab0:	dc000015 	stw	r16,0(sp)
  807ab4:	dfc00515 	stw	ra,20(sp)
  807ab8:	dc800215 	stw	r18,8(sp)
  807abc:	dc400115 	stw	r17,4(sp)
  807ac0:	3021883a 	mov	r16,r6
  807ac4:	2027883a 	mov	r19,r4
  807ac8:	2829883a 	mov	r20,r5
  807acc:	10002b1e 	bne	r2,zero,807b7c <__pow5mult+0xdc>
  807ad0:	8025d0ba 	srai	r18,r16,2
  807ad4:	90001b26 	beq	r18,zero,807b44 <__pow5mult+0xa4>
  807ad8:	9c001217 	ldw	r16,72(r19)
  807adc:	8000081e 	bne	r16,zero,807b00 <__pow5mult+0x60>
  807ae0:	00003006 	br	807ba4 <__pow5mult+0x104>
  807ae4:	800b883a 	mov	r5,r16
  807ae8:	800d883a 	mov	r6,r16
  807aec:	9809883a 	mov	r4,r19
  807af0:	90001426 	beq	r18,zero,807b44 <__pow5mult+0xa4>
  807af4:	80800017 	ldw	r2,0(r16)
  807af8:	10001b26 	beq	r2,zero,807b68 <__pow5mult+0xc8>
  807afc:	1021883a 	mov	r16,r2
  807b00:	9080004c 	andi	r2,r18,1
  807b04:	1005003a 	cmpeq	r2,r2,zero
  807b08:	9025d07a 	srai	r18,r18,1
  807b0c:	800d883a 	mov	r6,r16
  807b10:	9809883a 	mov	r4,r19
  807b14:	a00b883a 	mov	r5,r20
  807b18:	103ff21e 	bne	r2,zero,807ae4 <__pow5mult+0x44>
  807b1c:	080777c0 	call	80777c <__multiply>
  807b20:	a00b883a 	mov	r5,r20
  807b24:	9809883a 	mov	r4,r19
  807b28:	1023883a 	mov	r17,r2
  807b2c:	0806cec0 	call	806cec <_Bfree>
  807b30:	8829883a 	mov	r20,r17
  807b34:	800b883a 	mov	r5,r16
  807b38:	800d883a 	mov	r6,r16
  807b3c:	9809883a 	mov	r4,r19
  807b40:	903fec1e 	bne	r18,zero,807af4 <__pow5mult+0x54>
  807b44:	a005883a 	mov	r2,r20
  807b48:	dfc00517 	ldw	ra,20(sp)
  807b4c:	dd000417 	ldw	r20,16(sp)
  807b50:	dcc00317 	ldw	r19,12(sp)
  807b54:	dc800217 	ldw	r18,8(sp)
  807b58:	dc400117 	ldw	r17,4(sp)
  807b5c:	dc000017 	ldw	r16,0(sp)
  807b60:	dec00604 	addi	sp,sp,24
  807b64:	f800283a 	ret
  807b68:	080777c0 	call	80777c <__multiply>
  807b6c:	80800015 	stw	r2,0(r16)
  807b70:	1021883a 	mov	r16,r2
  807b74:	10000015 	stw	zero,0(r2)
  807b78:	003fe106 	br	807b00 <__pow5mult+0x60>
  807b7c:	1085883a 	add	r2,r2,r2
  807b80:	00c02074 	movhi	r3,129
  807b84:	18ffdb04 	addi	r3,r3,-148
  807b88:	1085883a 	add	r2,r2,r2
  807b8c:	10c5883a 	add	r2,r2,r3
  807b90:	11bfff17 	ldw	r6,-4(r2)
  807b94:	000f883a 	mov	r7,zero
  807b98:	08079a00 	call	8079a0 <__multadd>
  807b9c:	1029883a 	mov	r20,r2
  807ba0:	003fcb06 	br	807ad0 <__pow5mult+0x30>
  807ba4:	9809883a 	mov	r4,r19
  807ba8:	01409c44 	movi	r5,625
  807bac:	08079640 	call	807964 <__i2b>
  807bb0:	98801215 	stw	r2,72(r19)
  807bb4:	1021883a 	mov	r16,r2
  807bb8:	10000015 	stw	zero,0(r2)
  807bbc:	003fd006 	br	807b00 <__pow5mult+0x60>

00807bc0 <__s2b>:
  807bc0:	defff904 	addi	sp,sp,-28
  807bc4:	dcc00315 	stw	r19,12(sp)
  807bc8:	dc800215 	stw	r18,8(sp)
  807bcc:	2827883a 	mov	r19,r5
  807bd0:	2025883a 	mov	r18,r4
  807bd4:	01400244 	movi	r5,9
  807bd8:	39000204 	addi	r4,r7,8
  807bdc:	dd000415 	stw	r20,16(sp)
  807be0:	dc400115 	stw	r17,4(sp)
  807be4:	dfc00615 	stw	ra,24(sp)
  807be8:	dd400515 	stw	r21,20(sp)
  807bec:	dc000015 	stw	r16,0(sp)
  807bf0:	3829883a 	mov	r20,r7
  807bf4:	3023883a 	mov	r17,r6
  807bf8:	080a7840 	call	80a784 <__divsi3>
  807bfc:	00c00044 	movi	r3,1
  807c00:	1880350e 	bge	r3,r2,807cd8 <__s2b+0x118>
  807c04:	000b883a 	mov	r5,zero
  807c08:	18c7883a 	add	r3,r3,r3
  807c0c:	29400044 	addi	r5,r5,1
  807c10:	18bffd16 	blt	r3,r2,807c08 <__s2b+0x48>
  807c14:	9009883a 	mov	r4,r18
  807c18:	080726c0 	call	80726c <_Balloc>
  807c1c:	1011883a 	mov	r8,r2
  807c20:	d8800717 	ldw	r2,28(sp)
  807c24:	00c00044 	movi	r3,1
  807c28:	01800244 	movi	r6,9
  807c2c:	40800515 	stw	r2,20(r8)
  807c30:	40c00415 	stw	r3,16(r8)
  807c34:	3440260e 	bge	r6,r17,807cd0 <__s2b+0x110>
  807c38:	3021883a 	mov	r16,r6
  807c3c:	99ab883a 	add	r21,r19,r6
  807c40:	9c05883a 	add	r2,r19,r16
  807c44:	11c00007 	ldb	r7,0(r2)
  807c48:	400b883a 	mov	r5,r8
  807c4c:	9009883a 	mov	r4,r18
  807c50:	39fff404 	addi	r7,r7,-48
  807c54:	01800284 	movi	r6,10
  807c58:	08079a00 	call	8079a0 <__multadd>
  807c5c:	84000044 	addi	r16,r16,1
  807c60:	1011883a 	mov	r8,r2
  807c64:	8c3ff61e 	bne	r17,r16,807c40 <__s2b+0x80>
  807c68:	ac45883a 	add	r2,r21,r17
  807c6c:	117ffe04 	addi	r5,r2,-8
  807c70:	880d883a 	mov	r6,r17
  807c74:	35000c0e 	bge	r6,r20,807ca8 <__s2b+0xe8>
  807c78:	a185c83a 	sub	r2,r20,r6
  807c7c:	2821883a 	mov	r16,r5
  807c80:	28a3883a 	add	r17,r5,r2
  807c84:	81c00007 	ldb	r7,0(r16)
  807c88:	400b883a 	mov	r5,r8
  807c8c:	9009883a 	mov	r4,r18
  807c90:	39fff404 	addi	r7,r7,-48
  807c94:	01800284 	movi	r6,10
  807c98:	08079a00 	call	8079a0 <__multadd>
  807c9c:	84000044 	addi	r16,r16,1
  807ca0:	1011883a 	mov	r8,r2
  807ca4:	847ff71e 	bne	r16,r17,807c84 <__s2b+0xc4>
  807ca8:	4005883a 	mov	r2,r8
  807cac:	dfc00617 	ldw	ra,24(sp)
  807cb0:	dd400517 	ldw	r21,20(sp)
  807cb4:	dd000417 	ldw	r20,16(sp)
  807cb8:	dcc00317 	ldw	r19,12(sp)
  807cbc:	dc800217 	ldw	r18,8(sp)
  807cc0:	dc400117 	ldw	r17,4(sp)
  807cc4:	dc000017 	ldw	r16,0(sp)
  807cc8:	dec00704 	addi	sp,sp,28
  807ccc:	f800283a 	ret
  807cd0:	99400284 	addi	r5,r19,10
  807cd4:	003fe706 	br	807c74 <__s2b+0xb4>
  807cd8:	000b883a 	mov	r5,zero
  807cdc:	003fcd06 	br	807c14 <__s2b+0x54>

00807ce0 <_realloc_r>:
  807ce0:	defff404 	addi	sp,sp,-48
  807ce4:	dd800815 	stw	r22,32(sp)
  807ce8:	dc800415 	stw	r18,16(sp)
  807cec:	dc400315 	stw	r17,12(sp)
  807cf0:	dfc00b15 	stw	ra,44(sp)
  807cf4:	df000a15 	stw	fp,40(sp)
  807cf8:	ddc00915 	stw	r23,36(sp)
  807cfc:	dd400715 	stw	r21,28(sp)
  807d00:	dd000615 	stw	r20,24(sp)
  807d04:	dcc00515 	stw	r19,20(sp)
  807d08:	dc000215 	stw	r16,8(sp)
  807d0c:	2825883a 	mov	r18,r5
  807d10:	3023883a 	mov	r17,r6
  807d14:	202d883a 	mov	r22,r4
  807d18:	2800c926 	beq	r5,zero,808040 <_realloc_r+0x360>
  807d1c:	080b1700 	call	80b170 <__malloc_lock>
  807d20:	943ffe04 	addi	r16,r18,-8
  807d24:	88c002c4 	addi	r3,r17,11
  807d28:	00800584 	movi	r2,22
  807d2c:	82000117 	ldw	r8,4(r16)
  807d30:	10c01b2e 	bgeu	r2,r3,807da0 <_realloc_r+0xc0>
  807d34:	00bffe04 	movi	r2,-8
  807d38:	188e703a 	and	r7,r3,r2
  807d3c:	3839883a 	mov	fp,r7
  807d40:	38001a16 	blt	r7,zero,807dac <_realloc_r+0xcc>
  807d44:	e4401936 	bltu	fp,r17,807dac <_realloc_r+0xcc>
  807d48:	013fff04 	movi	r4,-4
  807d4c:	4126703a 	and	r19,r8,r4
  807d50:	99c02616 	blt	r19,r7,807dec <_realloc_r+0x10c>
  807d54:	802b883a 	mov	r21,r16
  807d58:	9829883a 	mov	r20,r19
  807d5c:	84000204 	addi	r16,r16,8
  807d60:	a80f883a 	mov	r7,r21
  807d64:	a70dc83a 	sub	r6,r20,fp
  807d68:	008003c4 	movi	r2,15
  807d6c:	1180c136 	bltu	r2,r6,808074 <_realloc_r+0x394>
  807d70:	38800117 	ldw	r2,4(r7)
  807d74:	a549883a 	add	r4,r20,r21
  807d78:	1080004c 	andi	r2,r2,1
  807d7c:	a084b03a 	or	r2,r20,r2
  807d80:	38800115 	stw	r2,4(r7)
  807d84:	20c00117 	ldw	r3,4(r4)
  807d88:	18c00054 	ori	r3,r3,1
  807d8c:	20c00115 	stw	r3,4(r4)
  807d90:	b009883a 	mov	r4,r22
  807d94:	080b1900 	call	80b190 <__malloc_unlock>
  807d98:	8023883a 	mov	r17,r16
  807d9c:	00000606 	br	807db8 <_realloc_r+0xd8>
  807da0:	01c00404 	movi	r7,16
  807da4:	3839883a 	mov	fp,r7
  807da8:	e47fe72e 	bgeu	fp,r17,807d48 <_realloc_r+0x68>
  807dac:	00800304 	movi	r2,12
  807db0:	0023883a 	mov	r17,zero
  807db4:	b0800015 	stw	r2,0(r22)
  807db8:	8805883a 	mov	r2,r17
  807dbc:	dfc00b17 	ldw	ra,44(sp)
  807dc0:	df000a17 	ldw	fp,40(sp)
  807dc4:	ddc00917 	ldw	r23,36(sp)
  807dc8:	dd800817 	ldw	r22,32(sp)
  807dcc:	dd400717 	ldw	r21,28(sp)
  807dd0:	dd000617 	ldw	r20,24(sp)
  807dd4:	dcc00517 	ldw	r19,20(sp)
  807dd8:	dc800417 	ldw	r18,16(sp)
  807ddc:	dc400317 	ldw	r17,12(sp)
  807de0:	dc000217 	ldw	r16,8(sp)
  807de4:	dec00c04 	addi	sp,sp,48
  807de8:	f800283a 	ret
  807dec:	00802074 	movhi	r2,129
  807df0:	10811104 	addi	r2,r2,1092
  807df4:	12400217 	ldw	r9,8(r2)
  807df8:	84cd883a 	add	r6,r16,r19
  807dfc:	802b883a 	mov	r21,r16
  807e00:	3240b926 	beq	r6,r9,8080e8 <_realloc_r+0x408>
  807e04:	31400117 	ldw	r5,4(r6)
  807e08:	00bfff84 	movi	r2,-2
  807e0c:	2884703a 	and	r2,r5,r2
  807e10:	1185883a 	add	r2,r2,r6
  807e14:	10c00117 	ldw	r3,4(r2)
  807e18:	18c0004c 	andi	r3,r3,1
  807e1c:	1807003a 	cmpeq	r3,r3,zero
  807e20:	1800a326 	beq	r3,zero,8080b0 <_realloc_r+0x3d0>
  807e24:	2908703a 	and	r4,r5,r4
  807e28:	9929883a 	add	r20,r19,r4
  807e2c:	a1c0a30e 	bge	r20,r7,8080bc <_realloc_r+0x3dc>
  807e30:	4080004c 	andi	r2,r8,1
  807e34:	1000551e 	bne	r2,zero,807f8c <_realloc_r+0x2ac>
  807e38:	80800017 	ldw	r2,0(r16)
  807e3c:	80afc83a 	sub	r23,r16,r2
  807e40:	b8c00117 	ldw	r3,4(r23)
  807e44:	00bfff04 	movi	r2,-4
  807e48:	1884703a 	and	r2,r3,r2
  807e4c:	30002e26 	beq	r6,zero,807f08 <_realloc_r+0x228>
  807e50:	3240b926 	beq	r6,r9,808138 <_realloc_r+0x458>
  807e54:	98a9883a 	add	r20,r19,r2
  807e58:	2509883a 	add	r4,r4,r20
  807e5c:	d9000015 	stw	r4,0(sp)
  807e60:	21c02a16 	blt	r4,r7,807f0c <_realloc_r+0x22c>
  807e64:	30800317 	ldw	r2,12(r6)
  807e68:	30c00217 	ldw	r3,8(r6)
  807e6c:	01400904 	movi	r5,36
  807e70:	99bfff04 	addi	r6,r19,-4
  807e74:	18800315 	stw	r2,12(r3)
  807e78:	10c00215 	stw	r3,8(r2)
  807e7c:	b9000317 	ldw	r4,12(r23)
  807e80:	b8800217 	ldw	r2,8(r23)
  807e84:	b82b883a 	mov	r21,r23
  807e88:	bc000204 	addi	r16,r23,8
  807e8c:	20800215 	stw	r2,8(r4)
  807e90:	11000315 	stw	r4,12(r2)
  807e94:	2980e436 	bltu	r5,r6,808228 <_realloc_r+0x548>
  807e98:	008004c4 	movi	r2,19
  807e9c:	9009883a 	mov	r4,r18
  807ea0:	8011883a 	mov	r8,r16
  807ea4:	11800f2e 	bgeu	r2,r6,807ee4 <_realloc_r+0x204>
  807ea8:	90800017 	ldw	r2,0(r18)
  807eac:	ba000404 	addi	r8,r23,16
  807eb0:	91000204 	addi	r4,r18,8
  807eb4:	b8800215 	stw	r2,8(r23)
  807eb8:	90c00117 	ldw	r3,4(r18)
  807ebc:	008006c4 	movi	r2,27
  807ec0:	b8c00315 	stw	r3,12(r23)
  807ec4:	1180072e 	bgeu	r2,r6,807ee4 <_realloc_r+0x204>
  807ec8:	90c00217 	ldw	r3,8(r18)
  807ecc:	ba000604 	addi	r8,r23,24
  807ed0:	91000404 	addi	r4,r18,16
  807ed4:	b8c00415 	stw	r3,16(r23)
  807ed8:	90800317 	ldw	r2,12(r18)
  807edc:	b8800515 	stw	r2,20(r23)
  807ee0:	3140e726 	beq	r6,r5,808280 <_realloc_r+0x5a0>
  807ee4:	20800017 	ldw	r2,0(r4)
  807ee8:	dd000017 	ldw	r20,0(sp)
  807eec:	b80f883a 	mov	r7,r23
  807ef0:	40800015 	stw	r2,0(r8)
  807ef4:	20c00117 	ldw	r3,4(r4)
  807ef8:	40c00115 	stw	r3,4(r8)
  807efc:	20800217 	ldw	r2,8(r4)
  807f00:	40800215 	stw	r2,8(r8)
  807f04:	003f9706 	br	807d64 <_realloc_r+0x84>
  807f08:	98a9883a 	add	r20,r19,r2
  807f0c:	a1c01f16 	blt	r20,r7,807f8c <_realloc_r+0x2ac>
  807f10:	b8c00317 	ldw	r3,12(r23)
  807f14:	b8800217 	ldw	r2,8(r23)
  807f18:	99bfff04 	addi	r6,r19,-4
  807f1c:	01400904 	movi	r5,36
  807f20:	b82b883a 	mov	r21,r23
  807f24:	18800215 	stw	r2,8(r3)
  807f28:	10c00315 	stw	r3,12(r2)
  807f2c:	bc000204 	addi	r16,r23,8
  807f30:	2980c336 	bltu	r5,r6,808240 <_realloc_r+0x560>
  807f34:	008004c4 	movi	r2,19
  807f38:	9009883a 	mov	r4,r18
  807f3c:	8011883a 	mov	r8,r16
  807f40:	11800f2e 	bgeu	r2,r6,807f80 <_realloc_r+0x2a0>
  807f44:	90800017 	ldw	r2,0(r18)
  807f48:	ba000404 	addi	r8,r23,16
  807f4c:	91000204 	addi	r4,r18,8
  807f50:	b8800215 	stw	r2,8(r23)
  807f54:	90c00117 	ldw	r3,4(r18)
  807f58:	008006c4 	movi	r2,27
  807f5c:	b8c00315 	stw	r3,12(r23)
  807f60:	1180072e 	bgeu	r2,r6,807f80 <_realloc_r+0x2a0>
  807f64:	90c00217 	ldw	r3,8(r18)
  807f68:	ba000604 	addi	r8,r23,24
  807f6c:	91000404 	addi	r4,r18,16
  807f70:	b8c00415 	stw	r3,16(r23)
  807f74:	90800317 	ldw	r2,12(r18)
  807f78:	b8800515 	stw	r2,20(r23)
  807f7c:	3140c726 	beq	r6,r5,80829c <_realloc_r+0x5bc>
  807f80:	20800017 	ldw	r2,0(r4)
  807f84:	b80f883a 	mov	r7,r23
  807f88:	003fd906 	br	807ef0 <_realloc_r+0x210>
  807f8c:	880b883a 	mov	r5,r17
  807f90:	b009883a 	mov	r4,r22
  807f94:	08062b00 	call	8062b0 <_malloc_r>
  807f98:	1023883a 	mov	r17,r2
  807f9c:	10002526 	beq	r2,zero,808034 <_realloc_r+0x354>
  807fa0:	80800117 	ldw	r2,4(r16)
  807fa4:	00ffff84 	movi	r3,-2
  807fa8:	893ffe04 	addi	r4,r17,-8
  807fac:	10c4703a 	and	r2,r2,r3
  807fb0:	8085883a 	add	r2,r16,r2
  807fb4:	20809526 	beq	r4,r2,80820c <_realloc_r+0x52c>
  807fb8:	99bfff04 	addi	r6,r19,-4
  807fbc:	01c00904 	movi	r7,36
  807fc0:	39804536 	bltu	r7,r6,8080d8 <_realloc_r+0x3f8>
  807fc4:	008004c4 	movi	r2,19
  807fc8:	9009883a 	mov	r4,r18
  807fcc:	880b883a 	mov	r5,r17
  807fd0:	11800f2e 	bgeu	r2,r6,808010 <_realloc_r+0x330>
  807fd4:	90800017 	ldw	r2,0(r18)
  807fd8:	89400204 	addi	r5,r17,8
  807fdc:	91000204 	addi	r4,r18,8
  807fe0:	88800015 	stw	r2,0(r17)
  807fe4:	90c00117 	ldw	r3,4(r18)
  807fe8:	008006c4 	movi	r2,27
  807fec:	88c00115 	stw	r3,4(r17)
  807ff0:	1180072e 	bgeu	r2,r6,808010 <_realloc_r+0x330>
  807ff4:	90c00217 	ldw	r3,8(r18)
  807ff8:	89400404 	addi	r5,r17,16
  807ffc:	91000404 	addi	r4,r18,16
  808000:	88c00215 	stw	r3,8(r17)
  808004:	90800317 	ldw	r2,12(r18)
  808008:	88800315 	stw	r2,12(r17)
  80800c:	31c09126 	beq	r6,r7,808254 <_realloc_r+0x574>
  808010:	20800017 	ldw	r2,0(r4)
  808014:	28800015 	stw	r2,0(r5)
  808018:	20c00117 	ldw	r3,4(r4)
  80801c:	28c00115 	stw	r3,4(r5)
  808020:	20800217 	ldw	r2,8(r4)
  808024:	28800215 	stw	r2,8(r5)
  808028:	900b883a 	mov	r5,r18
  80802c:	b009883a 	mov	r4,r22
  808030:	08057280 	call	805728 <_free_r>
  808034:	b009883a 	mov	r4,r22
  808038:	080b1900 	call	80b190 <__malloc_unlock>
  80803c:	003f5e06 	br	807db8 <_realloc_r+0xd8>
  808040:	300b883a 	mov	r5,r6
  808044:	dfc00b17 	ldw	ra,44(sp)
  808048:	df000a17 	ldw	fp,40(sp)
  80804c:	ddc00917 	ldw	r23,36(sp)
  808050:	dd800817 	ldw	r22,32(sp)
  808054:	dd400717 	ldw	r21,28(sp)
  808058:	dd000617 	ldw	r20,24(sp)
  80805c:	dcc00517 	ldw	r19,20(sp)
  808060:	dc800417 	ldw	r18,16(sp)
  808064:	dc400317 	ldw	r17,12(sp)
  808068:	dc000217 	ldw	r16,8(sp)
  80806c:	dec00c04 	addi	sp,sp,48
  808070:	08062b01 	jmpi	8062b0 <_malloc_r>
  808074:	38800117 	ldw	r2,4(r7)
  808078:	e54b883a 	add	r5,fp,r21
  80807c:	31000054 	ori	r4,r6,1
  808080:	1080004c 	andi	r2,r2,1
  808084:	1704b03a 	or	r2,r2,fp
  808088:	38800115 	stw	r2,4(r7)
  80808c:	29000115 	stw	r4,4(r5)
  808090:	2987883a 	add	r3,r5,r6
  808094:	18800117 	ldw	r2,4(r3)
  808098:	29400204 	addi	r5,r5,8
  80809c:	b009883a 	mov	r4,r22
  8080a0:	10800054 	ori	r2,r2,1
  8080a4:	18800115 	stw	r2,4(r3)
  8080a8:	08057280 	call	805728 <_free_r>
  8080ac:	003f3806 	br	807d90 <_realloc_r+0xb0>
  8080b0:	000d883a 	mov	r6,zero
  8080b4:	0009883a 	mov	r4,zero
  8080b8:	003f5d06 	br	807e30 <_realloc_r+0x150>
  8080bc:	30c00217 	ldw	r3,8(r6)
  8080c0:	30800317 	ldw	r2,12(r6)
  8080c4:	800f883a 	mov	r7,r16
  8080c8:	84000204 	addi	r16,r16,8
  8080cc:	10c00215 	stw	r3,8(r2)
  8080d0:	18800315 	stw	r2,12(r3)
  8080d4:	003f2306 	br	807d64 <_realloc_r+0x84>
  8080d8:	8809883a 	mov	r4,r17
  8080dc:	900b883a 	mov	r5,r18
  8080e0:	0806b740 	call	806b74 <memmove>
  8080e4:	003fd006 	br	808028 <_realloc_r+0x348>
  8080e8:	30800117 	ldw	r2,4(r6)
  8080ec:	e0c00404 	addi	r3,fp,16
  8080f0:	1108703a 	and	r4,r2,r4
  8080f4:	9905883a 	add	r2,r19,r4
  8080f8:	10ff4d16 	blt	r2,r3,807e30 <_realloc_r+0x150>
  8080fc:	1705c83a 	sub	r2,r2,fp
  808100:	870b883a 	add	r5,r16,fp
  808104:	10800054 	ori	r2,r2,1
  808108:	28800115 	stw	r2,4(r5)
  80810c:	80c00117 	ldw	r3,4(r16)
  808110:	00802074 	movhi	r2,129
  808114:	10811104 	addi	r2,r2,1092
  808118:	b009883a 	mov	r4,r22
  80811c:	18c0004c 	andi	r3,r3,1
  808120:	e0c6b03a 	or	r3,fp,r3
  808124:	11400215 	stw	r5,8(r2)
  808128:	80c00115 	stw	r3,4(r16)
  80812c:	080b1900 	call	80b190 <__malloc_unlock>
  808130:	84400204 	addi	r17,r16,8
  808134:	003f2006 	br	807db8 <_realloc_r+0xd8>
  808138:	98a9883a 	add	r20,r19,r2
  80813c:	2509883a 	add	r4,r4,r20
  808140:	e0800404 	addi	r2,fp,16
  808144:	d9000115 	stw	r4,4(sp)
  808148:	20bf7016 	blt	r4,r2,807f0c <_realloc_r+0x22c>
  80814c:	b8c00317 	ldw	r3,12(r23)
  808150:	b8800217 	ldw	r2,8(r23)
  808154:	99bfff04 	addi	r6,r19,-4
  808158:	01400904 	movi	r5,36
  80815c:	18800215 	stw	r2,8(r3)
  808160:	10c00315 	stw	r3,12(r2)
  808164:	bc400204 	addi	r17,r23,8
  808168:	29804136 	bltu	r5,r6,808270 <_realloc_r+0x590>
  80816c:	008004c4 	movi	r2,19
  808170:	9009883a 	mov	r4,r18
  808174:	880f883a 	mov	r7,r17
  808178:	11800f2e 	bgeu	r2,r6,8081b8 <_realloc_r+0x4d8>
  80817c:	90800017 	ldw	r2,0(r18)
  808180:	b9c00404 	addi	r7,r23,16
  808184:	91000204 	addi	r4,r18,8
  808188:	b8800215 	stw	r2,8(r23)
  80818c:	90c00117 	ldw	r3,4(r18)
  808190:	008006c4 	movi	r2,27
  808194:	b8c00315 	stw	r3,12(r23)
  808198:	1180072e 	bgeu	r2,r6,8081b8 <_realloc_r+0x4d8>
  80819c:	90c00217 	ldw	r3,8(r18)
  8081a0:	b9c00604 	addi	r7,r23,24
  8081a4:	91000404 	addi	r4,r18,16
  8081a8:	b8c00415 	stw	r3,16(r23)
  8081ac:	90800317 	ldw	r2,12(r18)
  8081b0:	b8800515 	stw	r2,20(r23)
  8081b4:	31404026 	beq	r6,r5,8082b8 <_realloc_r+0x5d8>
  8081b8:	20800017 	ldw	r2,0(r4)
  8081bc:	38800015 	stw	r2,0(r7)
  8081c0:	20c00117 	ldw	r3,4(r4)
  8081c4:	38c00115 	stw	r3,4(r7)
  8081c8:	20800217 	ldw	r2,8(r4)
  8081cc:	38800215 	stw	r2,8(r7)
  8081d0:	d8c00117 	ldw	r3,4(sp)
  8081d4:	bf0b883a 	add	r5,r23,fp
  8081d8:	b009883a 	mov	r4,r22
  8081dc:	1f05c83a 	sub	r2,r3,fp
  8081e0:	10800054 	ori	r2,r2,1
  8081e4:	28800115 	stw	r2,4(r5)
  8081e8:	b8c00117 	ldw	r3,4(r23)
  8081ec:	00802074 	movhi	r2,129
  8081f0:	10811104 	addi	r2,r2,1092
  8081f4:	11400215 	stw	r5,8(r2)
  8081f8:	18c0004c 	andi	r3,r3,1
  8081fc:	e0c6b03a 	or	r3,fp,r3
  808200:	b8c00115 	stw	r3,4(r23)
  808204:	080b1900 	call	80b190 <__malloc_unlock>
  808208:	003eeb06 	br	807db8 <_realloc_r+0xd8>
  80820c:	20800117 	ldw	r2,4(r4)
  808210:	00ffff04 	movi	r3,-4
  808214:	800f883a 	mov	r7,r16
  808218:	10c4703a 	and	r2,r2,r3
  80821c:	98a9883a 	add	r20,r19,r2
  808220:	84000204 	addi	r16,r16,8
  808224:	003ecf06 	br	807d64 <_realloc_r+0x84>
  808228:	900b883a 	mov	r5,r18
  80822c:	8009883a 	mov	r4,r16
  808230:	0806b740 	call	806b74 <memmove>
  808234:	dd000017 	ldw	r20,0(sp)
  808238:	b80f883a 	mov	r7,r23
  80823c:	003ec906 	br	807d64 <_realloc_r+0x84>
  808240:	900b883a 	mov	r5,r18
  808244:	8009883a 	mov	r4,r16
  808248:	0806b740 	call	806b74 <memmove>
  80824c:	b80f883a 	mov	r7,r23
  808250:	003ec406 	br	807d64 <_realloc_r+0x84>
  808254:	90c00417 	ldw	r3,16(r18)
  808258:	89400604 	addi	r5,r17,24
  80825c:	91000604 	addi	r4,r18,24
  808260:	88c00415 	stw	r3,16(r17)
  808264:	90800517 	ldw	r2,20(r18)
  808268:	88800515 	stw	r2,20(r17)
  80826c:	003f6806 	br	808010 <_realloc_r+0x330>
  808270:	900b883a 	mov	r5,r18
  808274:	8809883a 	mov	r4,r17
  808278:	0806b740 	call	806b74 <memmove>
  80827c:	003fd406 	br	8081d0 <_realloc_r+0x4f0>
  808280:	90c00417 	ldw	r3,16(r18)
  808284:	91000604 	addi	r4,r18,24
  808288:	ba000804 	addi	r8,r23,32
  80828c:	b8c00615 	stw	r3,24(r23)
  808290:	90800517 	ldw	r2,20(r18)
  808294:	b8800715 	stw	r2,28(r23)
  808298:	003f1206 	br	807ee4 <_realloc_r+0x204>
  80829c:	90c00417 	ldw	r3,16(r18)
  8082a0:	91000604 	addi	r4,r18,24
  8082a4:	ba000804 	addi	r8,r23,32
  8082a8:	b8c00615 	stw	r3,24(r23)
  8082ac:	90800517 	ldw	r2,20(r18)
  8082b0:	b8800715 	stw	r2,28(r23)
  8082b4:	003f3206 	br	807f80 <_realloc_r+0x2a0>
  8082b8:	90c00417 	ldw	r3,16(r18)
  8082bc:	91000604 	addi	r4,r18,24
  8082c0:	b9c00804 	addi	r7,r23,32
  8082c4:	b8c00615 	stw	r3,24(r23)
  8082c8:	90800517 	ldw	r2,20(r18)
  8082cc:	b8800715 	stw	r2,28(r23)
  8082d0:	003fb906 	br	8081b8 <_realloc_r+0x4d8>

008082d4 <__isinfd>:
  8082d4:	200d883a 	mov	r6,r4
  8082d8:	0109c83a 	sub	r4,zero,r4
  8082dc:	2188b03a 	or	r4,r4,r6
  8082e0:	2008d7fa 	srli	r4,r4,31
  8082e4:	00a00034 	movhi	r2,32768
  8082e8:	10bfffc4 	addi	r2,r2,-1
  8082ec:	1144703a 	and	r2,r2,r5
  8082f0:	2088b03a 	or	r4,r4,r2
  8082f4:	009ffc34 	movhi	r2,32752
  8082f8:	1105c83a 	sub	r2,r2,r4
  8082fc:	0087c83a 	sub	r3,zero,r2
  808300:	10c4b03a 	or	r2,r2,r3
  808304:	1004d7fa 	srli	r2,r2,31
  808308:	00c00044 	movi	r3,1
  80830c:	1885c83a 	sub	r2,r3,r2
  808310:	f800283a 	ret

00808314 <__isnand>:
  808314:	200d883a 	mov	r6,r4
  808318:	0109c83a 	sub	r4,zero,r4
  80831c:	2188b03a 	or	r4,r4,r6
  808320:	2008d7fa 	srli	r4,r4,31
  808324:	00a00034 	movhi	r2,32768
  808328:	10bfffc4 	addi	r2,r2,-1
  80832c:	1144703a 	and	r2,r2,r5
  808330:	2088b03a 	or	r4,r4,r2
  808334:	009ffc34 	movhi	r2,32752
  808338:	1105c83a 	sub	r2,r2,r4
  80833c:	1004d7fa 	srli	r2,r2,31
  808340:	f800283a 	ret

00808344 <_sbrk_r>:
  808344:	defffd04 	addi	sp,sp,-12
  808348:	dc000015 	stw	r16,0(sp)
  80834c:	04002074 	movhi	r16,129
  808350:	840da604 	addi	r16,r16,13976
  808354:	dc400115 	stw	r17,4(sp)
  808358:	80000015 	stw	zero,0(r16)
  80835c:	2023883a 	mov	r17,r4
  808360:	2809883a 	mov	r4,r5
  808364:	dfc00215 	stw	ra,8(sp)
  808368:	080b3900 	call	80b390 <sbrk>
  80836c:	1007883a 	mov	r3,r2
  808370:	00bfffc4 	movi	r2,-1
  808374:	18800626 	beq	r3,r2,808390 <_sbrk_r+0x4c>
  808378:	1805883a 	mov	r2,r3
  80837c:	dfc00217 	ldw	ra,8(sp)
  808380:	dc400117 	ldw	r17,4(sp)
  808384:	dc000017 	ldw	r16,0(sp)
  808388:	dec00304 	addi	sp,sp,12
  80838c:	f800283a 	ret
  808390:	80800017 	ldw	r2,0(r16)
  808394:	103ff826 	beq	r2,zero,808378 <_sbrk_r+0x34>
  808398:	88800015 	stw	r2,0(r17)
  80839c:	1805883a 	mov	r2,r3
  8083a0:	dfc00217 	ldw	ra,8(sp)
  8083a4:	dc400117 	ldw	r17,4(sp)
  8083a8:	dc000017 	ldw	r16,0(sp)
  8083ac:	dec00304 	addi	sp,sp,12
  8083b0:	f800283a 	ret

008083b4 <__sclose>:
  8083b4:	2940038f 	ldh	r5,14(r5)
  8083b8:	08086e81 	jmpi	8086e8 <_close_r>

008083bc <__sseek>:
  8083bc:	defffe04 	addi	sp,sp,-8
  8083c0:	dc000015 	stw	r16,0(sp)
  8083c4:	2821883a 	mov	r16,r5
  8083c8:	2940038f 	ldh	r5,14(r5)
  8083cc:	dfc00115 	stw	ra,4(sp)
  8083d0:	08089600 	call	808960 <_lseek_r>
  8083d4:	1007883a 	mov	r3,r2
  8083d8:	00bfffc4 	movi	r2,-1
  8083dc:	18800926 	beq	r3,r2,808404 <__sseek+0x48>
  8083e0:	8080030b 	ldhu	r2,12(r16)
  8083e4:	80c01415 	stw	r3,80(r16)
  8083e8:	10840014 	ori	r2,r2,4096
  8083ec:	8080030d 	sth	r2,12(r16)
  8083f0:	1805883a 	mov	r2,r3
  8083f4:	dfc00117 	ldw	ra,4(sp)
  8083f8:	dc000017 	ldw	r16,0(sp)
  8083fc:	dec00204 	addi	sp,sp,8
  808400:	f800283a 	ret
  808404:	8080030b 	ldhu	r2,12(r16)
  808408:	10bbffcc 	andi	r2,r2,61439
  80840c:	8080030d 	sth	r2,12(r16)
  808410:	1805883a 	mov	r2,r3
  808414:	dfc00117 	ldw	ra,4(sp)
  808418:	dc000017 	ldw	r16,0(sp)
  80841c:	dec00204 	addi	sp,sp,8
  808420:	f800283a 	ret

00808424 <__swrite>:
  808424:	2880030b 	ldhu	r2,12(r5)
  808428:	defffb04 	addi	sp,sp,-20
  80842c:	dcc00315 	stw	r19,12(sp)
  808430:	1080400c 	andi	r2,r2,256
  808434:	dc800215 	stw	r18,8(sp)
  808438:	dc400115 	stw	r17,4(sp)
  80843c:	dc000015 	stw	r16,0(sp)
  808440:	3027883a 	mov	r19,r6
  808444:	3825883a 	mov	r18,r7
  808448:	dfc00415 	stw	ra,16(sp)
  80844c:	2821883a 	mov	r16,r5
  808450:	000d883a 	mov	r6,zero
  808454:	01c00084 	movi	r7,2
  808458:	2023883a 	mov	r17,r4
  80845c:	10000226 	beq	r2,zero,808468 <__swrite+0x44>
  808460:	2940038f 	ldh	r5,14(r5)
  808464:	08089600 	call	808960 <_lseek_r>
  808468:	8080030b 	ldhu	r2,12(r16)
  80846c:	8140038f 	ldh	r5,14(r16)
  808470:	8809883a 	mov	r4,r17
  808474:	10bbffcc 	andi	r2,r2,61439
  808478:	980d883a 	mov	r6,r19
  80847c:	900f883a 	mov	r7,r18
  808480:	8080030d 	sth	r2,12(r16)
  808484:	dfc00417 	ldw	ra,16(sp)
  808488:	dcc00317 	ldw	r19,12(sp)
  80848c:	dc800217 	ldw	r18,8(sp)
  808490:	dc400117 	ldw	r17,4(sp)
  808494:	dc000017 	ldw	r16,0(sp)
  808498:	dec00504 	addi	sp,sp,20
  80849c:	08085bc1 	jmpi	8085bc <_write_r>

008084a0 <__sread>:
  8084a0:	defffe04 	addi	sp,sp,-8
  8084a4:	dc000015 	stw	r16,0(sp)
  8084a8:	2821883a 	mov	r16,r5
  8084ac:	2940038f 	ldh	r5,14(r5)
  8084b0:	dfc00115 	stw	ra,4(sp)
  8084b4:	08089d80 	call	8089d8 <_read_r>
  8084b8:	1007883a 	mov	r3,r2
  8084bc:	10000816 	blt	r2,zero,8084e0 <__sread+0x40>
  8084c0:	80801417 	ldw	r2,80(r16)
  8084c4:	10c5883a 	add	r2,r2,r3
  8084c8:	80801415 	stw	r2,80(r16)
  8084cc:	1805883a 	mov	r2,r3
  8084d0:	dfc00117 	ldw	ra,4(sp)
  8084d4:	dc000017 	ldw	r16,0(sp)
  8084d8:	dec00204 	addi	sp,sp,8
  8084dc:	f800283a 	ret
  8084e0:	8080030b 	ldhu	r2,12(r16)
  8084e4:	10bbffcc 	andi	r2,r2,61439
  8084e8:	8080030d 	sth	r2,12(r16)
  8084ec:	1805883a 	mov	r2,r3
  8084f0:	dfc00117 	ldw	ra,4(sp)
  8084f4:	dc000017 	ldw	r16,0(sp)
  8084f8:	dec00204 	addi	sp,sp,8
  8084fc:	f800283a 	ret

00808500 <strcmp>:
  808500:	2144b03a 	or	r2,r4,r5
  808504:	108000cc 	andi	r2,r2,3
  808508:	10001d1e 	bne	r2,zero,808580 <strcmp+0x80>
  80850c:	200f883a 	mov	r7,r4
  808510:	28800017 	ldw	r2,0(r5)
  808514:	21000017 	ldw	r4,0(r4)
  808518:	280d883a 	mov	r6,r5
  80851c:	2080161e 	bne	r4,r2,808578 <strcmp+0x78>
  808520:	023fbff4 	movhi	r8,65279
  808524:	423fbfc4 	addi	r8,r8,-257
  808528:	2207883a 	add	r3,r4,r8
  80852c:	01602074 	movhi	r5,32897
  808530:	29602004 	addi	r5,r5,-32640
  808534:	1946703a 	and	r3,r3,r5
  808538:	0104303a 	nor	r2,zero,r4
  80853c:	10c4703a 	and	r2,r2,r3
  808540:	10001c1e 	bne	r2,zero,8085b4 <strcmp+0xb4>
  808544:	4013883a 	mov	r9,r8
  808548:	2811883a 	mov	r8,r5
  80854c:	00000106 	br	808554 <strcmp+0x54>
  808550:	1800181e 	bne	r3,zero,8085b4 <strcmp+0xb4>
  808554:	39c00104 	addi	r7,r7,4
  808558:	39000017 	ldw	r4,0(r7)
  80855c:	31800104 	addi	r6,r6,4
  808560:	31400017 	ldw	r5,0(r6)
  808564:	2245883a 	add	r2,r4,r9
  808568:	1204703a 	and	r2,r2,r8
  80856c:	0106303a 	nor	r3,zero,r4
  808570:	1886703a 	and	r3,r3,r2
  808574:	217ff626 	beq	r4,r5,808550 <strcmp+0x50>
  808578:	3809883a 	mov	r4,r7
  80857c:	300b883a 	mov	r5,r6
  808580:	20c00007 	ldb	r3,0(r4)
  808584:	1800051e 	bne	r3,zero,80859c <strcmp+0x9c>
  808588:	00000606 	br	8085a4 <strcmp+0xa4>
  80858c:	21000044 	addi	r4,r4,1
  808590:	20c00007 	ldb	r3,0(r4)
  808594:	29400044 	addi	r5,r5,1
  808598:	18000226 	beq	r3,zero,8085a4 <strcmp+0xa4>
  80859c:	28800007 	ldb	r2,0(r5)
  8085a0:	18bffa26 	beq	r3,r2,80858c <strcmp+0x8c>
  8085a4:	20c00003 	ldbu	r3,0(r4)
  8085a8:	28800003 	ldbu	r2,0(r5)
  8085ac:	1885c83a 	sub	r2,r3,r2
  8085b0:	f800283a 	ret
  8085b4:	0005883a 	mov	r2,zero
  8085b8:	f800283a 	ret

008085bc <_write_r>:
  8085bc:	defffd04 	addi	sp,sp,-12
  8085c0:	dc000015 	stw	r16,0(sp)
  8085c4:	04002074 	movhi	r16,129
  8085c8:	840da604 	addi	r16,r16,13976
  8085cc:	dc400115 	stw	r17,4(sp)
  8085d0:	80000015 	stw	zero,0(r16)
  8085d4:	2023883a 	mov	r17,r4
  8085d8:	2809883a 	mov	r4,r5
  8085dc:	300b883a 	mov	r5,r6
  8085e0:	380d883a 	mov	r6,r7
  8085e4:	dfc00215 	stw	ra,8(sp)
  8085e8:	080b6200 	call	80b620 <write>
  8085ec:	1007883a 	mov	r3,r2
  8085f0:	00bfffc4 	movi	r2,-1
  8085f4:	18800626 	beq	r3,r2,808610 <_write_r+0x54>
  8085f8:	1805883a 	mov	r2,r3
  8085fc:	dfc00217 	ldw	ra,8(sp)
  808600:	dc400117 	ldw	r17,4(sp)
  808604:	dc000017 	ldw	r16,0(sp)
  808608:	dec00304 	addi	sp,sp,12
  80860c:	f800283a 	ret
  808610:	80800017 	ldw	r2,0(r16)
  808614:	103ff826 	beq	r2,zero,8085f8 <_write_r+0x3c>
  808618:	88800015 	stw	r2,0(r17)
  80861c:	1805883a 	mov	r2,r3
  808620:	dfc00217 	ldw	ra,8(sp)
  808624:	dc400117 	ldw	r17,4(sp)
  808628:	dc000017 	ldw	r16,0(sp)
  80862c:	dec00304 	addi	sp,sp,12
  808630:	f800283a 	ret

00808634 <_calloc_r>:
  808634:	298b383a 	mul	r5,r5,r6
  808638:	defffe04 	addi	sp,sp,-8
  80863c:	dc000015 	stw	r16,0(sp)
  808640:	dfc00115 	stw	ra,4(sp)
  808644:	08062b00 	call	8062b0 <_malloc_r>
  808648:	1021883a 	mov	r16,r2
  80864c:	01c00904 	movi	r7,36
  808650:	10000d26 	beq	r2,zero,808688 <_calloc_r+0x54>
  808654:	10ffff17 	ldw	r3,-4(r2)
  808658:	1009883a 	mov	r4,r2
  80865c:	00bfff04 	movi	r2,-4
  808660:	1886703a 	and	r3,r3,r2
  808664:	1887883a 	add	r3,r3,r2
  808668:	180d883a 	mov	r6,r3
  80866c:	000b883a 	mov	r5,zero
  808670:	38c01736 	bltu	r7,r3,8086d0 <_calloc_r+0x9c>
  808674:	008004c4 	movi	r2,19
  808678:	10c00836 	bltu	r2,r3,80869c <_calloc_r+0x68>
  80867c:	20000215 	stw	zero,8(r4)
  808680:	20000015 	stw	zero,0(r4)
  808684:	20000115 	stw	zero,4(r4)
  808688:	8005883a 	mov	r2,r16
  80868c:	dfc00117 	ldw	ra,4(sp)
  808690:	dc000017 	ldw	r16,0(sp)
  808694:	dec00204 	addi	sp,sp,8
  808698:	f800283a 	ret
  80869c:	008006c4 	movi	r2,27
  8086a0:	80000015 	stw	zero,0(r16)
  8086a4:	80000115 	stw	zero,4(r16)
  8086a8:	81000204 	addi	r4,r16,8
  8086ac:	10fff32e 	bgeu	r2,r3,80867c <_calloc_r+0x48>
  8086b0:	80000215 	stw	zero,8(r16)
  8086b4:	80000315 	stw	zero,12(r16)
  8086b8:	81000404 	addi	r4,r16,16
  8086bc:	19ffef1e 	bne	r3,r7,80867c <_calloc_r+0x48>
  8086c0:	81000604 	addi	r4,r16,24
  8086c4:	80000415 	stw	zero,16(r16)
  8086c8:	80000515 	stw	zero,20(r16)
  8086cc:	003feb06 	br	80867c <_calloc_r+0x48>
  8086d0:	0806c540 	call	806c54 <memset>
  8086d4:	8005883a 	mov	r2,r16
  8086d8:	dfc00117 	ldw	ra,4(sp)
  8086dc:	dc000017 	ldw	r16,0(sp)
  8086e0:	dec00204 	addi	sp,sp,8
  8086e4:	f800283a 	ret

008086e8 <_close_r>:
  8086e8:	defffd04 	addi	sp,sp,-12
  8086ec:	dc000015 	stw	r16,0(sp)
  8086f0:	04002074 	movhi	r16,129
  8086f4:	840da604 	addi	r16,r16,13976
  8086f8:	dc400115 	stw	r17,4(sp)
  8086fc:	80000015 	stw	zero,0(r16)
  808700:	2023883a 	mov	r17,r4
  808704:	2809883a 	mov	r4,r5
  808708:	dfc00215 	stw	ra,8(sp)
  80870c:	080aaec0 	call	80aaec <close>
  808710:	1007883a 	mov	r3,r2
  808714:	00bfffc4 	movi	r2,-1
  808718:	18800626 	beq	r3,r2,808734 <_close_r+0x4c>
  80871c:	1805883a 	mov	r2,r3
  808720:	dfc00217 	ldw	ra,8(sp)
  808724:	dc400117 	ldw	r17,4(sp)
  808728:	dc000017 	ldw	r16,0(sp)
  80872c:	dec00304 	addi	sp,sp,12
  808730:	f800283a 	ret
  808734:	80800017 	ldw	r2,0(r16)
  808738:	103ff826 	beq	r2,zero,80871c <_close_r+0x34>
  80873c:	88800015 	stw	r2,0(r17)
  808740:	1805883a 	mov	r2,r3
  808744:	dfc00217 	ldw	ra,8(sp)
  808748:	dc400117 	ldw	r17,4(sp)
  80874c:	dc000017 	ldw	r16,0(sp)
  808750:	dec00304 	addi	sp,sp,12
  808754:	f800283a 	ret

00808758 <_fclose_r>:
  808758:	defffc04 	addi	sp,sp,-16
  80875c:	dc400115 	stw	r17,4(sp)
  808760:	dc000015 	stw	r16,0(sp)
  808764:	dfc00315 	stw	ra,12(sp)
  808768:	dc800215 	stw	r18,8(sp)
  80876c:	2821883a 	mov	r16,r5
  808770:	2023883a 	mov	r17,r4
  808774:	28002926 	beq	r5,zero,80881c <_fclose_r+0xc4>
  808778:	08053940 	call	805394 <__sfp_lock_acquire>
  80877c:	88000226 	beq	r17,zero,808788 <_fclose_r+0x30>
  808780:	88800e17 	ldw	r2,56(r17)
  808784:	10002d26 	beq	r2,zero,80883c <_fclose_r+0xe4>
  808788:	8080030f 	ldh	r2,12(r16)
  80878c:	10002226 	beq	r2,zero,808818 <_fclose_r+0xc0>
  808790:	8809883a 	mov	r4,r17
  808794:	800b883a 	mov	r5,r16
  808798:	080510c0 	call	80510c <_fflush_r>
  80879c:	1025883a 	mov	r18,r2
  8087a0:	80800b17 	ldw	r2,44(r16)
  8087a4:	10000426 	beq	r2,zero,8087b8 <_fclose_r+0x60>
  8087a8:	81400717 	ldw	r5,28(r16)
  8087ac:	8809883a 	mov	r4,r17
  8087b0:	103ee83a 	callr	r2
  8087b4:	10002a16 	blt	r2,zero,808860 <_fclose_r+0x108>
  8087b8:	8080030b 	ldhu	r2,12(r16)
  8087bc:	1080200c 	andi	r2,r2,128
  8087c0:	1000231e 	bne	r2,zero,808850 <_fclose_r+0xf8>
  8087c4:	81400c17 	ldw	r5,48(r16)
  8087c8:	28000526 	beq	r5,zero,8087e0 <_fclose_r+0x88>
  8087cc:	80801004 	addi	r2,r16,64
  8087d0:	28800226 	beq	r5,r2,8087dc <_fclose_r+0x84>
  8087d4:	8809883a 	mov	r4,r17
  8087d8:	08057280 	call	805728 <_free_r>
  8087dc:	80000c15 	stw	zero,48(r16)
  8087e0:	81401117 	ldw	r5,68(r16)
  8087e4:	28000326 	beq	r5,zero,8087f4 <_fclose_r+0x9c>
  8087e8:	8809883a 	mov	r4,r17
  8087ec:	08057280 	call	805728 <_free_r>
  8087f0:	80001115 	stw	zero,68(r16)
  8087f4:	8000030d 	sth	zero,12(r16)
  8087f8:	08053980 	call	805398 <__sfp_lock_release>
  8087fc:	9005883a 	mov	r2,r18
  808800:	dfc00317 	ldw	ra,12(sp)
  808804:	dc800217 	ldw	r18,8(sp)
  808808:	dc400117 	ldw	r17,4(sp)
  80880c:	dc000017 	ldw	r16,0(sp)
  808810:	dec00404 	addi	sp,sp,16
  808814:	f800283a 	ret
  808818:	08053980 	call	805398 <__sfp_lock_release>
  80881c:	0025883a 	mov	r18,zero
  808820:	9005883a 	mov	r2,r18
  808824:	dfc00317 	ldw	ra,12(sp)
  808828:	dc800217 	ldw	r18,8(sp)
  80882c:	dc400117 	ldw	r17,4(sp)
  808830:	dc000017 	ldw	r16,0(sp)
  808834:	dec00404 	addi	sp,sp,16
  808838:	f800283a 	ret
  80883c:	8809883a 	mov	r4,r17
  808840:	08053a40 	call	8053a4 <__sinit>
  808844:	8080030f 	ldh	r2,12(r16)
  808848:	103fd11e 	bne	r2,zero,808790 <_fclose_r+0x38>
  80884c:	003ff206 	br	808818 <_fclose_r+0xc0>
  808850:	81400417 	ldw	r5,16(r16)
  808854:	8809883a 	mov	r4,r17
  808858:	08057280 	call	805728 <_free_r>
  80885c:	003fd906 	br	8087c4 <_fclose_r+0x6c>
  808860:	04bfffc4 	movi	r18,-1
  808864:	003fd406 	br	8087b8 <_fclose_r+0x60>

00808868 <fclose>:
  808868:	00802074 	movhi	r2,129
  80886c:	1086c704 	addi	r2,r2,6940
  808870:	200b883a 	mov	r5,r4
  808874:	11000017 	ldw	r4,0(r2)
  808878:	08087581 	jmpi	808758 <_fclose_r>

0080887c <_fstat_r>:
  80887c:	defffd04 	addi	sp,sp,-12
  808880:	dc000015 	stw	r16,0(sp)
  808884:	04002074 	movhi	r16,129
  808888:	840da604 	addi	r16,r16,13976
  80888c:	dc400115 	stw	r17,4(sp)
  808890:	80000015 	stw	zero,0(r16)
  808894:	2023883a 	mov	r17,r4
  808898:	2809883a 	mov	r4,r5
  80889c:	300b883a 	mov	r5,r6
  8088a0:	dfc00215 	stw	ra,8(sp)
  8088a4:	080ac740 	call	80ac74 <fstat>
  8088a8:	1007883a 	mov	r3,r2
  8088ac:	00bfffc4 	movi	r2,-1
  8088b0:	18800626 	beq	r3,r2,8088cc <_fstat_r+0x50>
  8088b4:	1805883a 	mov	r2,r3
  8088b8:	dfc00217 	ldw	ra,8(sp)
  8088bc:	dc400117 	ldw	r17,4(sp)
  8088c0:	dc000017 	ldw	r16,0(sp)
  8088c4:	dec00304 	addi	sp,sp,12
  8088c8:	f800283a 	ret
  8088cc:	80800017 	ldw	r2,0(r16)
  8088d0:	103ff826 	beq	r2,zero,8088b4 <_fstat_r+0x38>
  8088d4:	88800015 	stw	r2,0(r17)
  8088d8:	1805883a 	mov	r2,r3
  8088dc:	dfc00217 	ldw	ra,8(sp)
  8088e0:	dc400117 	ldw	r17,4(sp)
  8088e4:	dc000017 	ldw	r16,0(sp)
  8088e8:	dec00304 	addi	sp,sp,12
  8088ec:	f800283a 	ret

008088f0 <_isatty_r>:
  8088f0:	defffd04 	addi	sp,sp,-12
  8088f4:	dc000015 	stw	r16,0(sp)
  8088f8:	04002074 	movhi	r16,129
  8088fc:	840da604 	addi	r16,r16,13976
  808900:	dc400115 	stw	r17,4(sp)
  808904:	80000015 	stw	zero,0(r16)
  808908:	2023883a 	mov	r17,r4
  80890c:	2809883a 	mov	r4,r5
  808910:	dfc00215 	stw	ra,8(sp)
  808914:	080ada80 	call	80ada8 <isatty>
  808918:	1007883a 	mov	r3,r2
  80891c:	00bfffc4 	movi	r2,-1
  808920:	18800626 	beq	r3,r2,80893c <_isatty_r+0x4c>
  808924:	1805883a 	mov	r2,r3
  808928:	dfc00217 	ldw	ra,8(sp)
  80892c:	dc400117 	ldw	r17,4(sp)
  808930:	dc000017 	ldw	r16,0(sp)
  808934:	dec00304 	addi	sp,sp,12
  808938:	f800283a 	ret
  80893c:	80800017 	ldw	r2,0(r16)
  808940:	103ff826 	beq	r2,zero,808924 <_isatty_r+0x34>
  808944:	88800015 	stw	r2,0(r17)
  808948:	1805883a 	mov	r2,r3
  80894c:	dfc00217 	ldw	ra,8(sp)
  808950:	dc400117 	ldw	r17,4(sp)
  808954:	dc000017 	ldw	r16,0(sp)
  808958:	dec00304 	addi	sp,sp,12
  80895c:	f800283a 	ret

00808960 <_lseek_r>:
  808960:	defffd04 	addi	sp,sp,-12
  808964:	dc000015 	stw	r16,0(sp)
  808968:	04002074 	movhi	r16,129
  80896c:	840da604 	addi	r16,r16,13976
  808970:	dc400115 	stw	r17,4(sp)
  808974:	80000015 	stw	zero,0(r16)
  808978:	2023883a 	mov	r17,r4
  80897c:	2809883a 	mov	r4,r5
  808980:	300b883a 	mov	r5,r6
  808984:	380d883a 	mov	r6,r7
  808988:	dfc00215 	stw	ra,8(sp)
  80898c:	080afb40 	call	80afb4 <lseek>
  808990:	1007883a 	mov	r3,r2
  808994:	00bfffc4 	movi	r2,-1
  808998:	18800626 	beq	r3,r2,8089b4 <_lseek_r+0x54>
  80899c:	1805883a 	mov	r2,r3
  8089a0:	dfc00217 	ldw	ra,8(sp)
  8089a4:	dc400117 	ldw	r17,4(sp)
  8089a8:	dc000017 	ldw	r16,0(sp)
  8089ac:	dec00304 	addi	sp,sp,12
  8089b0:	f800283a 	ret
  8089b4:	80800017 	ldw	r2,0(r16)
  8089b8:	103ff826 	beq	r2,zero,80899c <_lseek_r+0x3c>
  8089bc:	88800015 	stw	r2,0(r17)
  8089c0:	1805883a 	mov	r2,r3
  8089c4:	dfc00217 	ldw	ra,8(sp)
  8089c8:	dc400117 	ldw	r17,4(sp)
  8089cc:	dc000017 	ldw	r16,0(sp)
  8089d0:	dec00304 	addi	sp,sp,12
  8089d4:	f800283a 	ret

008089d8 <_read_r>:
  8089d8:	defffd04 	addi	sp,sp,-12
  8089dc:	dc000015 	stw	r16,0(sp)
  8089e0:	04002074 	movhi	r16,129
  8089e4:	840da604 	addi	r16,r16,13976
  8089e8:	dc400115 	stw	r17,4(sp)
  8089ec:	80000015 	stw	zero,0(r16)
  8089f0:	2023883a 	mov	r17,r4
  8089f4:	2809883a 	mov	r4,r5
  8089f8:	300b883a 	mov	r5,r6
  8089fc:	380d883a 	mov	r6,r7
  808a00:	dfc00215 	stw	ra,8(sp)
  808a04:	080b1b00 	call	80b1b0 <read>
  808a08:	1007883a 	mov	r3,r2
  808a0c:	00bfffc4 	movi	r2,-1
  808a10:	18800626 	beq	r3,r2,808a2c <_read_r+0x54>
  808a14:	1805883a 	mov	r2,r3
  808a18:	dfc00217 	ldw	ra,8(sp)
  808a1c:	dc400117 	ldw	r17,4(sp)
  808a20:	dc000017 	ldw	r16,0(sp)
  808a24:	dec00304 	addi	sp,sp,12
  808a28:	f800283a 	ret
  808a2c:	80800017 	ldw	r2,0(r16)
  808a30:	103ff826 	beq	r2,zero,808a14 <_read_r+0x3c>
  808a34:	88800015 	stw	r2,0(r17)
  808a38:	1805883a 	mov	r2,r3
  808a3c:	dfc00217 	ldw	ra,8(sp)
  808a40:	dc400117 	ldw	r17,4(sp)
  808a44:	dc000017 	ldw	r16,0(sp)
  808a48:	dec00304 	addi	sp,sp,12
  808a4c:	f800283a 	ret

00808a50 <__udivdi3>:
  808a50:	defff004 	addi	sp,sp,-64
  808a54:	2005883a 	mov	r2,r4
  808a58:	3011883a 	mov	r8,r6
  808a5c:	df000e15 	stw	fp,56(sp)
  808a60:	dd000a15 	stw	r20,40(sp)
  808a64:	dc000615 	stw	r16,24(sp)
  808a68:	dfc00f15 	stw	ra,60(sp)
  808a6c:	ddc00d15 	stw	r23,52(sp)
  808a70:	dd800c15 	stw	r22,48(sp)
  808a74:	dd400b15 	stw	r21,44(sp)
  808a78:	dcc00915 	stw	r19,36(sp)
  808a7c:	dc800815 	stw	r18,32(sp)
  808a80:	dc400715 	stw	r17,28(sp)
  808a84:	4021883a 	mov	r16,r8
  808a88:	1039883a 	mov	fp,r2
  808a8c:	2829883a 	mov	r20,r5
  808a90:	38003b1e 	bne	r7,zero,808b80 <__udivdi3+0x130>
  808a94:	2a005c36 	bltu	r5,r8,808c08 <__udivdi3+0x1b8>
  808a98:	4000a626 	beq	r8,zero,808d34 <__udivdi3+0x2e4>
  808a9c:	00bfffd4 	movui	r2,65535
  808aa0:	14009e36 	bltu	r2,r16,808d1c <__udivdi3+0x2cc>
  808aa4:	00803fc4 	movi	r2,255
  808aa8:	14013d36 	bltu	r2,r16,808fa0 <__udivdi3+0x550>
  808aac:	000b883a 	mov	r5,zero
  808ab0:	0005883a 	mov	r2,zero
  808ab4:	8084d83a 	srl	r2,r16,r2
  808ab8:	01002074 	movhi	r4,129
  808abc:	213f1f04 	addi	r4,r4,-900
  808ac0:	01800804 	movi	r6,32
  808ac4:	1105883a 	add	r2,r2,r4
  808ac8:	10c00003 	ldbu	r3,0(r2)
  808acc:	28c7883a 	add	r3,r5,r3
  808ad0:	30edc83a 	sub	r22,r6,r3
  808ad4:	b000ee1e 	bne	r22,zero,808e90 <__udivdi3+0x440>
  808ad8:	802ad43a 	srli	r21,r16,16
  808adc:	00800044 	movi	r2,1
  808ae0:	a423c83a 	sub	r17,r20,r16
  808ae4:	85ffffcc 	andi	r23,r16,65535
  808ae8:	d8800315 	stw	r2,12(sp)
  808aec:	8809883a 	mov	r4,r17
  808af0:	a80b883a 	mov	r5,r21
  808af4:	080a8440 	call	80a844 <__udivsi3>
  808af8:	8809883a 	mov	r4,r17
  808afc:	a80b883a 	mov	r5,r21
  808b00:	102d883a 	mov	r22,r2
  808b04:	080a84c0 	call	80a84c <__umodsi3>
  808b08:	1004943a 	slli	r2,r2,16
  808b0c:	e006d43a 	srli	r3,fp,16
  808b10:	bda3383a 	mul	r17,r23,r22
  808b14:	10c4b03a 	or	r2,r2,r3
  808b18:	1440042e 	bgeu	r2,r17,808b2c <__udivdi3+0xdc>
  808b1c:	1405883a 	add	r2,r2,r16
  808b20:	b5bfffc4 	addi	r22,r22,-1
  808b24:	14000136 	bltu	r2,r16,808b2c <__udivdi3+0xdc>
  808b28:	14413d36 	bltu	r2,r17,809020 <__udivdi3+0x5d0>
  808b2c:	1463c83a 	sub	r17,r2,r17
  808b30:	8809883a 	mov	r4,r17
  808b34:	a80b883a 	mov	r5,r21
  808b38:	080a8440 	call	80a844 <__udivsi3>
  808b3c:	8809883a 	mov	r4,r17
  808b40:	a80b883a 	mov	r5,r21
  808b44:	1029883a 	mov	r20,r2
  808b48:	080a84c0 	call	80a84c <__umodsi3>
  808b4c:	1004943a 	slli	r2,r2,16
  808b50:	bd09383a 	mul	r4,r23,r20
  808b54:	e0ffffcc 	andi	r3,fp,65535
  808b58:	10c4b03a 	or	r2,r2,r3
  808b5c:	1100042e 	bgeu	r2,r4,808b70 <__udivdi3+0x120>
  808b60:	8085883a 	add	r2,r16,r2
  808b64:	a53fffc4 	addi	r20,r20,-1
  808b68:	14000136 	bltu	r2,r16,808b70 <__udivdi3+0x120>
  808b6c:	11012036 	bltu	r2,r4,808ff0 <__udivdi3+0x5a0>
  808b70:	b004943a 	slli	r2,r22,16
  808b74:	d9000317 	ldw	r4,12(sp)
  808b78:	a084b03a 	or	r2,r20,r2
  808b7c:	00001506 	br	808bd4 <__udivdi3+0x184>
  808b80:	380d883a 	mov	r6,r7
  808b84:	29c06236 	bltu	r5,r7,808d10 <__udivdi3+0x2c0>
  808b88:	00bfffd4 	movui	r2,65535
  808b8c:	11c05a36 	bltu	r2,r7,808cf8 <__udivdi3+0x2a8>
  808b90:	00803fc4 	movi	r2,255
  808b94:	11c0fc36 	bltu	r2,r7,808f88 <__udivdi3+0x538>
  808b98:	000b883a 	mov	r5,zero
  808b9c:	0005883a 	mov	r2,zero
  808ba0:	3084d83a 	srl	r2,r6,r2
  808ba4:	01002074 	movhi	r4,129
  808ba8:	213f1f04 	addi	r4,r4,-900
  808bac:	01c00804 	movi	r7,32
  808bb0:	1105883a 	add	r2,r2,r4
  808bb4:	10c00003 	ldbu	r3,0(r2)
  808bb8:	28c7883a 	add	r3,r5,r3
  808bbc:	38efc83a 	sub	r23,r7,r3
  808bc0:	b800691e 	bne	r23,zero,808d68 <__udivdi3+0x318>
  808bc4:	35000136 	bltu	r6,r20,808bcc <__udivdi3+0x17c>
  808bc8:	e4005136 	bltu	fp,r16,808d10 <__udivdi3+0x2c0>
  808bcc:	00800044 	movi	r2,1
  808bd0:	0009883a 	mov	r4,zero
  808bd4:	2007883a 	mov	r3,r4
  808bd8:	dfc00f17 	ldw	ra,60(sp)
  808bdc:	df000e17 	ldw	fp,56(sp)
  808be0:	ddc00d17 	ldw	r23,52(sp)
  808be4:	dd800c17 	ldw	r22,48(sp)
  808be8:	dd400b17 	ldw	r21,44(sp)
  808bec:	dd000a17 	ldw	r20,40(sp)
  808bf0:	dcc00917 	ldw	r19,36(sp)
  808bf4:	dc800817 	ldw	r18,32(sp)
  808bf8:	dc400717 	ldw	r17,28(sp)
  808bfc:	dc000617 	ldw	r16,24(sp)
  808c00:	dec01004 	addi	sp,sp,64
  808c04:	f800283a 	ret
  808c08:	00bfffd4 	movui	r2,65535
  808c0c:	12005036 	bltu	r2,r8,808d50 <__udivdi3+0x300>
  808c10:	00803fc4 	movi	r2,255
  808c14:	1200e836 	bltu	r2,r8,808fb8 <__udivdi3+0x568>
  808c18:	000b883a 	mov	r5,zero
  808c1c:	0005883a 	mov	r2,zero
  808c20:	8084d83a 	srl	r2,r16,r2
  808c24:	01002074 	movhi	r4,129
  808c28:	213f1f04 	addi	r4,r4,-900
  808c2c:	01800804 	movi	r6,32
  808c30:	1105883a 	add	r2,r2,r4
  808c34:	10c00003 	ldbu	r3,0(r2)
  808c38:	28c7883a 	add	r3,r5,r3
  808c3c:	30cbc83a 	sub	r5,r6,r3
  808c40:	28000626 	beq	r5,zero,808c5c <__udivdi3+0x20c>
  808c44:	3145c83a 	sub	r2,r6,r5
  808c48:	e084d83a 	srl	r2,fp,r2
  808c4c:	a146983a 	sll	r3,r20,r5
  808c50:	e178983a 	sll	fp,fp,r5
  808c54:	8160983a 	sll	r16,r16,r5
  808c58:	18a8b03a 	or	r20,r3,r2
  808c5c:	802ad43a 	srli	r21,r16,16
  808c60:	a009883a 	mov	r4,r20
  808c64:	85ffffcc 	andi	r23,r16,65535
  808c68:	a80b883a 	mov	r5,r21
  808c6c:	080a8440 	call	80a844 <__udivsi3>
  808c70:	a009883a 	mov	r4,r20
  808c74:	a80b883a 	mov	r5,r21
  808c78:	102d883a 	mov	r22,r2
  808c7c:	080a84c0 	call	80a84c <__umodsi3>
  808c80:	1004943a 	slli	r2,r2,16
  808c84:	e006d43a 	srli	r3,fp,16
  808c88:	bda3383a 	mul	r17,r23,r22
  808c8c:	10c4b03a 	or	r2,r2,r3
  808c90:	1440042e 	bgeu	r2,r17,808ca4 <__udivdi3+0x254>
  808c94:	1405883a 	add	r2,r2,r16
  808c98:	b5bfffc4 	addi	r22,r22,-1
  808c9c:	14000136 	bltu	r2,r16,808ca4 <__udivdi3+0x254>
  808ca0:	1440d536 	bltu	r2,r17,808ff8 <__udivdi3+0x5a8>
  808ca4:	1463c83a 	sub	r17,r2,r17
  808ca8:	8809883a 	mov	r4,r17
  808cac:	a80b883a 	mov	r5,r21
  808cb0:	080a8440 	call	80a844 <__udivsi3>
  808cb4:	8809883a 	mov	r4,r17
  808cb8:	a80b883a 	mov	r5,r21
  808cbc:	1029883a 	mov	r20,r2
  808cc0:	080a84c0 	call	80a84c <__umodsi3>
  808cc4:	1004943a 	slli	r2,r2,16
  808cc8:	bd09383a 	mul	r4,r23,r20
  808ccc:	e0ffffcc 	andi	r3,fp,65535
  808cd0:	10c4b03a 	or	r2,r2,r3
  808cd4:	1100042e 	bgeu	r2,r4,808ce8 <__udivdi3+0x298>
  808cd8:	8085883a 	add	r2,r16,r2
  808cdc:	a53fffc4 	addi	r20,r20,-1
  808ce0:	14000136 	bltu	r2,r16,808ce8 <__udivdi3+0x298>
  808ce4:	1100c736 	bltu	r2,r4,809004 <__udivdi3+0x5b4>
  808ce8:	b004943a 	slli	r2,r22,16
  808cec:	0009883a 	mov	r4,zero
  808cf0:	a084b03a 	or	r2,r20,r2
  808cf4:	003fb706 	br	808bd4 <__udivdi3+0x184>
  808cf8:	00804034 	movhi	r2,256
  808cfc:	10bfffc4 	addi	r2,r2,-1
  808d00:	11c0a436 	bltu	r2,r7,808f94 <__udivdi3+0x544>
  808d04:	01400404 	movi	r5,16
  808d08:	2805883a 	mov	r2,r5
  808d0c:	003fa406 	br	808ba0 <__udivdi3+0x150>
  808d10:	0005883a 	mov	r2,zero
  808d14:	0009883a 	mov	r4,zero
  808d18:	003fae06 	br	808bd4 <__udivdi3+0x184>
  808d1c:	00804034 	movhi	r2,256
  808d20:	10bfffc4 	addi	r2,r2,-1
  808d24:	1400a136 	bltu	r2,r16,808fac <__udivdi3+0x55c>
  808d28:	01400404 	movi	r5,16
  808d2c:	2805883a 	mov	r2,r5
  808d30:	003f6006 	br	808ab4 <__udivdi3+0x64>
  808d34:	01000044 	movi	r4,1
  808d38:	000b883a 	mov	r5,zero
  808d3c:	080a8440 	call	80a844 <__udivsi3>
  808d40:	1021883a 	mov	r16,r2
  808d44:	00bfffd4 	movui	r2,65535
  808d48:	143ff436 	bltu	r2,r16,808d1c <__udivdi3+0x2cc>
  808d4c:	003f5506 	br	808aa4 <__udivdi3+0x54>
  808d50:	00804034 	movhi	r2,256
  808d54:	10bfffc4 	addi	r2,r2,-1
  808d58:	12009a36 	bltu	r2,r8,808fc4 <__udivdi3+0x574>
  808d5c:	01400404 	movi	r5,16
  808d60:	2805883a 	mov	r2,r5
  808d64:	003fae06 	br	808c20 <__udivdi3+0x1d0>
  808d68:	3dc5c83a 	sub	r2,r7,r23
  808d6c:	35c8983a 	sll	r4,r6,r23
  808d70:	8086d83a 	srl	r3,r16,r2
  808d74:	a0a2d83a 	srl	r17,r20,r2
  808d78:	e084d83a 	srl	r2,fp,r2
  808d7c:	20eab03a 	or	r21,r4,r3
  808d80:	a82cd43a 	srli	r22,r21,16
  808d84:	a5c6983a 	sll	r3,r20,r23
  808d88:	8809883a 	mov	r4,r17
  808d8c:	b00b883a 	mov	r5,r22
  808d90:	1886b03a 	or	r3,r3,r2
  808d94:	d8c00215 	stw	r3,8(sp)
  808d98:	080a8440 	call	80a844 <__udivsi3>
  808d9c:	8809883a 	mov	r4,r17
  808da0:	b00b883a 	mov	r5,r22
  808da4:	1029883a 	mov	r20,r2
  808da8:	080a84c0 	call	80a84c <__umodsi3>
  808dac:	a8ffffcc 	andi	r3,r21,65535
  808db0:	d8c00515 	stw	r3,20(sp)
  808db4:	d9000217 	ldw	r4,8(sp)
  808db8:	d9400517 	ldw	r5,20(sp)
  808dbc:	1004943a 	slli	r2,r2,16
  808dc0:	2006d43a 	srli	r3,r4,16
  808dc4:	85e0983a 	sll	r16,r16,r23
  808dc8:	2d23383a 	mul	r17,r5,r20
  808dcc:	10c4b03a 	or	r2,r2,r3
  808dd0:	dc000015 	stw	r16,0(sp)
  808dd4:	1440032e 	bgeu	r2,r17,808de4 <__udivdi3+0x394>
  808dd8:	1545883a 	add	r2,r2,r21
  808ddc:	a53fffc4 	addi	r20,r20,-1
  808de0:	15407f2e 	bgeu	r2,r21,808fe0 <__udivdi3+0x590>
  808de4:	1463c83a 	sub	r17,r2,r17
  808de8:	8809883a 	mov	r4,r17
  808dec:	b00b883a 	mov	r5,r22
  808df0:	080a8440 	call	80a844 <__udivsi3>
  808df4:	8809883a 	mov	r4,r17
  808df8:	b00b883a 	mov	r5,r22
  808dfc:	1021883a 	mov	r16,r2
  808e00:	080a84c0 	call	80a84c <__umodsi3>
  808e04:	d8c00517 	ldw	r3,20(sp)
  808e08:	d9000217 	ldw	r4,8(sp)
  808e0c:	1004943a 	slli	r2,r2,16
  808e10:	1c0f383a 	mul	r7,r3,r16
  808e14:	20ffffcc 	andi	r3,r4,65535
  808e18:	10e2b03a 	or	r17,r2,r3
  808e1c:	89c0032e 	bgeu	r17,r7,808e2c <__udivdi3+0x3dc>
  808e20:	8d63883a 	add	r17,r17,r21
  808e24:	843fffc4 	addi	r16,r16,-1
  808e28:	8d40692e 	bgeu	r17,r21,808fd0 <__udivdi3+0x580>
  808e2c:	a008943a 	slli	r4,r20,16
  808e30:	d9400017 	ldw	r5,0(sp)
  808e34:	89e3c83a 	sub	r17,r17,r7
  808e38:	8110b03a 	or	r8,r16,r4
  808e3c:	280cd43a 	srli	r6,r5,16
  808e40:	28ffffcc 	andi	r3,r5,65535
  808e44:	40bfffcc 	andi	r2,r8,65535
  808e48:	400ad43a 	srli	r5,r8,16
  808e4c:	10d3383a 	mul	r9,r2,r3
  808e50:	1185383a 	mul	r2,r2,r6
  808e54:	28c7383a 	mul	r3,r5,r3
  808e58:	4808d43a 	srli	r4,r9,16
  808e5c:	298b383a 	mul	r5,r5,r6
  808e60:	10c5883a 	add	r2,r2,r3
  808e64:	2089883a 	add	r4,r4,r2
  808e68:	20c0022e 	bgeu	r4,r3,808e74 <__udivdi3+0x424>
  808e6c:	00800074 	movhi	r2,1
  808e70:	288b883a 	add	r5,r5,r2
  808e74:	2004d43a 	srli	r2,r4,16
  808e78:	288b883a 	add	r5,r5,r2
  808e7c:	89403f36 	bltu	r17,r5,808f7c <__udivdi3+0x52c>
  808e80:	89403926 	beq	r17,r5,808f68 <__udivdi3+0x518>
  808e84:	4005883a 	mov	r2,r8
  808e88:	0009883a 	mov	r4,zero
  808e8c:	003f5106 	br	808bd4 <__udivdi3+0x184>
  808e90:	85a0983a 	sll	r16,r16,r22
  808e94:	3585c83a 	sub	r2,r6,r22
  808e98:	a0a2d83a 	srl	r17,r20,r2
  808e9c:	802ad43a 	srli	r21,r16,16
  808ea0:	e084d83a 	srl	r2,fp,r2
  808ea4:	a586983a 	sll	r3,r20,r22
  808ea8:	8809883a 	mov	r4,r17
  808eac:	a80b883a 	mov	r5,r21
  808eb0:	1886b03a 	or	r3,r3,r2
  808eb4:	d8c00115 	stw	r3,4(sp)
  808eb8:	080a8440 	call	80a844 <__udivsi3>
  808ebc:	8809883a 	mov	r4,r17
  808ec0:	a80b883a 	mov	r5,r21
  808ec4:	d8800415 	stw	r2,16(sp)
  808ec8:	080a84c0 	call	80a84c <__umodsi3>
  808ecc:	d9000117 	ldw	r4,4(sp)
  808ed0:	d9400417 	ldw	r5,16(sp)
  808ed4:	1004943a 	slli	r2,r2,16
  808ed8:	85ffffcc 	andi	r23,r16,65535
  808edc:	2006d43a 	srli	r3,r4,16
  808ee0:	b963383a 	mul	r17,r23,r5
  808ee4:	10c4b03a 	or	r2,r2,r3
  808ee8:	1440042e 	bgeu	r2,r17,808efc <__udivdi3+0x4ac>
  808eec:	297fffc4 	addi	r5,r5,-1
  808ef0:	1405883a 	add	r2,r2,r16
  808ef4:	d9400415 	stw	r5,16(sp)
  808ef8:	1400442e 	bgeu	r2,r16,80900c <__udivdi3+0x5bc>
  808efc:	1463c83a 	sub	r17,r2,r17
  808f00:	8809883a 	mov	r4,r17
  808f04:	a80b883a 	mov	r5,r21
  808f08:	080a8440 	call	80a844 <__udivsi3>
  808f0c:	8809883a 	mov	r4,r17
  808f10:	a80b883a 	mov	r5,r21
  808f14:	1029883a 	mov	r20,r2
  808f18:	080a84c0 	call	80a84c <__umodsi3>
  808f1c:	d9400117 	ldw	r5,4(sp)
  808f20:	1004943a 	slli	r2,r2,16
  808f24:	bd09383a 	mul	r4,r23,r20
  808f28:	28ffffcc 	andi	r3,r5,65535
  808f2c:	10c6b03a 	or	r3,r2,r3
  808f30:	1900062e 	bgeu	r3,r4,808f4c <__udivdi3+0x4fc>
  808f34:	1c07883a 	add	r3,r3,r16
  808f38:	a53fffc4 	addi	r20,r20,-1
  808f3c:	1c000336 	bltu	r3,r16,808f4c <__udivdi3+0x4fc>
  808f40:	1900022e 	bgeu	r3,r4,808f4c <__udivdi3+0x4fc>
  808f44:	a53fffc4 	addi	r20,r20,-1
  808f48:	1c07883a 	add	r3,r3,r16
  808f4c:	d9400417 	ldw	r5,16(sp)
  808f50:	e5b8983a 	sll	fp,fp,r22
  808f54:	1923c83a 	sub	r17,r3,r4
  808f58:	2804943a 	slli	r2,r5,16
  808f5c:	a0a8b03a 	or	r20,r20,r2
  808f60:	dd000315 	stw	r20,12(sp)
  808f64:	003ee106 	br	808aec <__udivdi3+0x9c>
  808f68:	2004943a 	slli	r2,r4,16
  808f6c:	e5c8983a 	sll	r4,fp,r23
  808f70:	48ffffcc 	andi	r3,r9,65535
  808f74:	10c5883a 	add	r2,r2,r3
  808f78:	20bfc22e 	bgeu	r4,r2,808e84 <__udivdi3+0x434>
  808f7c:	40bfffc4 	addi	r2,r8,-1
  808f80:	0009883a 	mov	r4,zero
  808f84:	003f1306 	br	808bd4 <__udivdi3+0x184>
  808f88:	01400204 	movi	r5,8
  808f8c:	2805883a 	mov	r2,r5
  808f90:	003f0306 	br	808ba0 <__udivdi3+0x150>
  808f94:	01400604 	movi	r5,24
  808f98:	2805883a 	mov	r2,r5
  808f9c:	003f0006 	br	808ba0 <__udivdi3+0x150>
  808fa0:	01400204 	movi	r5,8
  808fa4:	2805883a 	mov	r2,r5
  808fa8:	003ec206 	br	808ab4 <__udivdi3+0x64>
  808fac:	01400604 	movi	r5,24
  808fb0:	2805883a 	mov	r2,r5
  808fb4:	003ebf06 	br	808ab4 <__udivdi3+0x64>
  808fb8:	01400204 	movi	r5,8
  808fbc:	2805883a 	mov	r2,r5
  808fc0:	003f1706 	br	808c20 <__udivdi3+0x1d0>
  808fc4:	01400604 	movi	r5,24
  808fc8:	2805883a 	mov	r2,r5
  808fcc:	003f1406 	br	808c20 <__udivdi3+0x1d0>
  808fd0:	89ff962e 	bgeu	r17,r7,808e2c <__udivdi3+0x3dc>
  808fd4:	8d63883a 	add	r17,r17,r21
  808fd8:	843fffc4 	addi	r16,r16,-1
  808fdc:	003f9306 	br	808e2c <__udivdi3+0x3dc>
  808fe0:	147f802e 	bgeu	r2,r17,808de4 <__udivdi3+0x394>
  808fe4:	a53fffc4 	addi	r20,r20,-1
  808fe8:	1545883a 	add	r2,r2,r21
  808fec:	003f7d06 	br	808de4 <__udivdi3+0x394>
  808ff0:	a53fffc4 	addi	r20,r20,-1
  808ff4:	003ede06 	br	808b70 <__udivdi3+0x120>
  808ff8:	b5bfffc4 	addi	r22,r22,-1
  808ffc:	1405883a 	add	r2,r2,r16
  809000:	003f2806 	br	808ca4 <__udivdi3+0x254>
  809004:	a53fffc4 	addi	r20,r20,-1
  809008:	003f3706 	br	808ce8 <__udivdi3+0x298>
  80900c:	147fbb2e 	bgeu	r2,r17,808efc <__udivdi3+0x4ac>
  809010:	297fffc4 	addi	r5,r5,-1
  809014:	1405883a 	add	r2,r2,r16
  809018:	d9400415 	stw	r5,16(sp)
  80901c:	003fb706 	br	808efc <__udivdi3+0x4ac>
  809020:	b5bfffc4 	addi	r22,r22,-1
  809024:	1405883a 	add	r2,r2,r16
  809028:	003ec006 	br	808b2c <__udivdi3+0xdc>

0080902c <__umoddi3>:
  80902c:	defff104 	addi	sp,sp,-60
  809030:	dd800b15 	stw	r22,44(sp)
  809034:	dd000915 	stw	r20,36(sp)
  809038:	dc000515 	stw	r16,20(sp)
  80903c:	dfc00e15 	stw	ra,56(sp)
  809040:	df000d15 	stw	fp,52(sp)
  809044:	ddc00c15 	stw	r23,48(sp)
  809048:	dd400a15 	stw	r21,40(sp)
  80904c:	dcc00815 	stw	r19,32(sp)
  809050:	dc800715 	stw	r18,28(sp)
  809054:	dc400615 	stw	r17,24(sp)
  809058:	3021883a 	mov	r16,r6
  80905c:	202d883a 	mov	r22,r4
  809060:	2829883a 	mov	r20,r5
  809064:	38002b1e 	bne	r7,zero,809114 <__umoddi3+0xe8>
  809068:	29805036 	bltu	r5,r6,8091ac <__umoddi3+0x180>
  80906c:	30008a26 	beq	r6,zero,809298 <__umoddi3+0x26c>
  809070:	00bfffd4 	movui	r2,65535
  809074:	14008236 	bltu	r2,r16,809280 <__umoddi3+0x254>
  809078:	00803fc4 	movi	r2,255
  80907c:	14013636 	bltu	r2,r16,809558 <__umoddi3+0x52c>
  809080:	000b883a 	mov	r5,zero
  809084:	0005883a 	mov	r2,zero
  809088:	8084d83a 	srl	r2,r16,r2
  80908c:	01002074 	movhi	r4,129
  809090:	213f1f04 	addi	r4,r4,-900
  809094:	01800804 	movi	r6,32
  809098:	1105883a 	add	r2,r2,r4
  80909c:	10c00003 	ldbu	r3,0(r2)
  8090a0:	28c7883a 	add	r3,r5,r3
  8090a4:	30efc83a 	sub	r23,r6,r3
  8090a8:	b800941e 	bne	r23,zero,8092fc <__umoddi3+0x2d0>
  8090ac:	802ad43a 	srli	r21,r16,16
  8090b0:	a423c83a 	sub	r17,r20,r16
  8090b4:	0039883a 	mov	fp,zero
  8090b8:	853fffcc 	andi	r20,r16,65535
  8090bc:	8809883a 	mov	r4,r17
  8090c0:	a80b883a 	mov	r5,r21
  8090c4:	080a8440 	call	80a844 <__udivsi3>
  8090c8:	8809883a 	mov	r4,r17
  8090cc:	a80b883a 	mov	r5,r21
  8090d0:	a0a3383a 	mul	r17,r20,r2
  8090d4:	080a84c0 	call	80a84c <__umodsi3>
  8090d8:	1004943a 	slli	r2,r2,16
  8090dc:	b006d43a 	srli	r3,r22,16
  8090e0:	10c4b03a 	or	r2,r2,r3
  8090e4:	1440032e 	bgeu	r2,r17,8090f4 <__umoddi3+0xc8>
  8090e8:	1405883a 	add	r2,r2,r16
  8090ec:	14000136 	bltu	r2,r16,8090f4 <__umoddi3+0xc8>
  8090f0:	14413536 	bltu	r2,r17,8095c8 <__umoddi3+0x59c>
  8090f4:	1463c83a 	sub	r17,r2,r17
  8090f8:	8809883a 	mov	r4,r17
  8090fc:	a80b883a 	mov	r5,r21
  809100:	080a8440 	call	80a844 <__udivsi3>
  809104:	8809883a 	mov	r4,r17
  809108:	a0a3383a 	mul	r17,r20,r2
  80910c:	a80b883a 	mov	r5,r21
  809110:	00004d06 	br	809248 <__umoddi3+0x21c>
  809114:	380d883a 	mov	r6,r7
  809118:	29c0102e 	bgeu	r5,r7,80915c <__umoddi3+0x130>
  80911c:	2011883a 	mov	r8,r4
  809120:	2813883a 	mov	r9,r5
  809124:	4005883a 	mov	r2,r8
  809128:	4807883a 	mov	r3,r9
  80912c:	dfc00e17 	ldw	ra,56(sp)
  809130:	df000d17 	ldw	fp,52(sp)
  809134:	ddc00c17 	ldw	r23,48(sp)
  809138:	dd800b17 	ldw	r22,44(sp)
  80913c:	dd400a17 	ldw	r21,40(sp)
  809140:	dd000917 	ldw	r20,36(sp)
  809144:	dcc00817 	ldw	r19,32(sp)
  809148:	dc800717 	ldw	r18,28(sp)
  80914c:	dc400617 	ldw	r17,24(sp)
  809150:	dc000517 	ldw	r16,20(sp)
  809154:	dec00f04 	addi	sp,sp,60
  809158:	f800283a 	ret
  80915c:	00bfffd4 	movui	r2,65535
  809160:	11c05a36 	bltu	r2,r7,8092cc <__umoddi3+0x2a0>
  809164:	00803fc4 	movi	r2,255
  809168:	11c0fe36 	bltu	r2,r7,809564 <__umoddi3+0x538>
  80916c:	000b883a 	mov	r5,zero
  809170:	0005883a 	mov	r2,zero
  809174:	3084d83a 	srl	r2,r6,r2
  809178:	01002074 	movhi	r4,129
  80917c:	213f1f04 	addi	r4,r4,-900
  809180:	01c00804 	movi	r7,32
  809184:	1105883a 	add	r2,r2,r4
  809188:	10c00003 	ldbu	r3,0(r2)
  80918c:	28c7883a 	add	r3,r5,r3
  809190:	38ebc83a 	sub	r21,r7,r3
  809194:	a800851e 	bne	r21,zero,8093ac <__umoddi3+0x380>
  809198:	35005236 	bltu	r6,r20,8092e4 <__umoddi3+0x2b8>
  80919c:	b400512e 	bgeu	r22,r16,8092e4 <__umoddi3+0x2b8>
  8091a0:	b011883a 	mov	r8,r22
  8091a4:	a013883a 	mov	r9,r20
  8091a8:	003fde06 	br	809124 <__umoddi3+0xf8>
  8091ac:	00bfffd4 	movui	r2,65535
  8091b0:	11804036 	bltu	r2,r6,8092b4 <__umoddi3+0x288>
  8091b4:	00803fc4 	movi	r2,255
  8091b8:	1180ed36 	bltu	r2,r6,809570 <__umoddi3+0x544>
  8091bc:	000b883a 	mov	r5,zero
  8091c0:	0005883a 	mov	r2,zero
  8091c4:	8084d83a 	srl	r2,r16,r2
  8091c8:	01002074 	movhi	r4,129
  8091cc:	213f1f04 	addi	r4,r4,-900
  8091d0:	01800804 	movi	r6,32
  8091d4:	1105883a 	add	r2,r2,r4
  8091d8:	10c00003 	ldbu	r3,0(r2)
  8091dc:	28c7883a 	add	r3,r5,r3
  8091e0:	30c7c83a 	sub	r3,r6,r3
  8091e4:	1800bf1e 	bne	r3,zero,8094e4 <__umoddi3+0x4b8>
  8091e8:	0039883a 	mov	fp,zero
  8091ec:	802ad43a 	srli	r21,r16,16
  8091f0:	a009883a 	mov	r4,r20
  8091f4:	85ffffcc 	andi	r23,r16,65535
  8091f8:	a80b883a 	mov	r5,r21
  8091fc:	080a8440 	call	80a844 <__udivsi3>
  809200:	a009883a 	mov	r4,r20
  809204:	a80b883a 	mov	r5,r21
  809208:	b8a3383a 	mul	r17,r23,r2
  80920c:	080a84c0 	call	80a84c <__umodsi3>
  809210:	1004943a 	slli	r2,r2,16
  809214:	b006d43a 	srli	r3,r22,16
  809218:	10c4b03a 	or	r2,r2,r3
  80921c:	1440032e 	bgeu	r2,r17,80922c <__umoddi3+0x200>
  809220:	1405883a 	add	r2,r2,r16
  809224:	14000136 	bltu	r2,r16,80922c <__umoddi3+0x200>
  809228:	1440e536 	bltu	r2,r17,8095c0 <__umoddi3+0x594>
  80922c:	1463c83a 	sub	r17,r2,r17
  809230:	8809883a 	mov	r4,r17
  809234:	a80b883a 	mov	r5,r21
  809238:	080a8440 	call	80a844 <__udivsi3>
  80923c:	8809883a 	mov	r4,r17
  809240:	b8a3383a 	mul	r17,r23,r2
  809244:	a80b883a 	mov	r5,r21
  809248:	080a84c0 	call	80a84c <__umodsi3>
  80924c:	1004943a 	slli	r2,r2,16
  809250:	b0ffffcc 	andi	r3,r22,65535
  809254:	10c4b03a 	or	r2,r2,r3
  809258:	1440042e 	bgeu	r2,r17,80926c <__umoddi3+0x240>
  80925c:	1405883a 	add	r2,r2,r16
  809260:	14000236 	bltu	r2,r16,80926c <__umoddi3+0x240>
  809264:	1440012e 	bgeu	r2,r17,80926c <__umoddi3+0x240>
  809268:	1405883a 	add	r2,r2,r16
  80926c:	1445c83a 	sub	r2,r2,r17
  809270:	1724d83a 	srl	r18,r2,fp
  809274:	0013883a 	mov	r9,zero
  809278:	9011883a 	mov	r8,r18
  80927c:	003fa906 	br	809124 <__umoddi3+0xf8>
  809280:	00804034 	movhi	r2,256
  809284:	10bfffc4 	addi	r2,r2,-1
  809288:	1400b036 	bltu	r2,r16,80954c <__umoddi3+0x520>
  80928c:	01400404 	movi	r5,16
  809290:	2805883a 	mov	r2,r5
  809294:	003f7c06 	br	809088 <__umoddi3+0x5c>
  809298:	01000044 	movi	r4,1
  80929c:	000b883a 	mov	r5,zero
  8092a0:	080a8440 	call	80a844 <__udivsi3>
  8092a4:	1021883a 	mov	r16,r2
  8092a8:	00bfffd4 	movui	r2,65535
  8092ac:	143ff436 	bltu	r2,r16,809280 <__umoddi3+0x254>
  8092b0:	003f7106 	br	809078 <__umoddi3+0x4c>
  8092b4:	00804034 	movhi	r2,256
  8092b8:	10bfffc4 	addi	r2,r2,-1
  8092bc:	1180af36 	bltu	r2,r6,80957c <__umoddi3+0x550>
  8092c0:	01400404 	movi	r5,16
  8092c4:	2805883a 	mov	r2,r5
  8092c8:	003fbe06 	br	8091c4 <__umoddi3+0x198>
  8092cc:	00804034 	movhi	r2,256
  8092d0:	10bfffc4 	addi	r2,r2,-1
  8092d4:	11c0ac36 	bltu	r2,r7,809588 <__umoddi3+0x55c>
  8092d8:	01400404 	movi	r5,16
  8092dc:	2805883a 	mov	r2,r5
  8092e0:	003fa406 	br	809174 <__umoddi3+0x148>
  8092e4:	b409c83a 	sub	r4,r22,r16
  8092e8:	b105803a 	cmpltu	r2,r22,r4
  8092ec:	a187c83a 	sub	r3,r20,r6
  8092f0:	18a9c83a 	sub	r20,r3,r2
  8092f4:	202d883a 	mov	r22,r4
  8092f8:	003fa906 	br	8091a0 <__umoddi3+0x174>
  8092fc:	85e0983a 	sll	r16,r16,r23
  809300:	35c5c83a 	sub	r2,r6,r23
  809304:	a0a2d83a 	srl	r17,r20,r2
  809308:	802ad43a 	srli	r21,r16,16
  80930c:	b084d83a 	srl	r2,r22,r2
  809310:	a5c6983a 	sll	r3,r20,r23
  809314:	8809883a 	mov	r4,r17
  809318:	a80b883a 	mov	r5,r21
  80931c:	1886b03a 	or	r3,r3,r2
  809320:	d8c00115 	stw	r3,4(sp)
  809324:	853fffcc 	andi	r20,r16,65535
  809328:	080a8440 	call	80a844 <__udivsi3>
  80932c:	8809883a 	mov	r4,r17
  809330:	a80b883a 	mov	r5,r21
  809334:	a0a3383a 	mul	r17,r20,r2
  809338:	080a84c0 	call	80a84c <__umodsi3>
  80933c:	d9000117 	ldw	r4,4(sp)
  809340:	1004943a 	slli	r2,r2,16
  809344:	b839883a 	mov	fp,r23
  809348:	2006d43a 	srli	r3,r4,16
  80934c:	10c4b03a 	or	r2,r2,r3
  809350:	1440022e 	bgeu	r2,r17,80935c <__umoddi3+0x330>
  809354:	1405883a 	add	r2,r2,r16
  809358:	1400962e 	bgeu	r2,r16,8095b4 <__umoddi3+0x588>
  80935c:	1463c83a 	sub	r17,r2,r17
  809360:	8809883a 	mov	r4,r17
  809364:	a80b883a 	mov	r5,r21
  809368:	080a8440 	call	80a844 <__udivsi3>
  80936c:	8809883a 	mov	r4,r17
  809370:	a80b883a 	mov	r5,r21
  809374:	a0a3383a 	mul	r17,r20,r2
  809378:	080a84c0 	call	80a84c <__umodsi3>
  80937c:	d9400117 	ldw	r5,4(sp)
  809380:	1004943a 	slli	r2,r2,16
  809384:	28ffffcc 	andi	r3,r5,65535
  809388:	10c4b03a 	or	r2,r2,r3
  80938c:	1440042e 	bgeu	r2,r17,8093a0 <__umoddi3+0x374>
  809390:	1405883a 	add	r2,r2,r16
  809394:	14000236 	bltu	r2,r16,8093a0 <__umoddi3+0x374>
  809398:	1440012e 	bgeu	r2,r17,8093a0 <__umoddi3+0x374>
  80939c:	1405883a 	add	r2,r2,r16
  8093a0:	b5ec983a 	sll	r22,r22,r23
  8093a4:	1463c83a 	sub	r17,r2,r17
  8093a8:	003f4406 	br	8090bc <__umoddi3+0x90>
  8093ac:	3d4fc83a 	sub	r7,r7,r21
  8093b0:	3546983a 	sll	r3,r6,r21
  8093b4:	81c4d83a 	srl	r2,r16,r7
  8093b8:	a1e2d83a 	srl	r17,r20,r7
  8093bc:	a54c983a 	sll	r6,r20,r21
  8093c0:	18aeb03a 	or	r23,r3,r2
  8093c4:	b828d43a 	srli	r20,r23,16
  8093c8:	b1c4d83a 	srl	r2,r22,r7
  8093cc:	8809883a 	mov	r4,r17
  8093d0:	a00b883a 	mov	r5,r20
  8093d4:	308cb03a 	or	r6,r6,r2
  8093d8:	d9c00315 	stw	r7,12(sp)
  8093dc:	d9800215 	stw	r6,8(sp)
  8093e0:	080a8440 	call	80a844 <__udivsi3>
  8093e4:	8809883a 	mov	r4,r17
  8093e8:	a00b883a 	mov	r5,r20
  8093ec:	1039883a 	mov	fp,r2
  8093f0:	080a84c0 	call	80a84c <__umodsi3>
  8093f4:	b8ffffcc 	andi	r3,r23,65535
  8093f8:	d8c00415 	stw	r3,16(sp)
  8093fc:	d9000217 	ldw	r4,8(sp)
  809400:	d9400417 	ldw	r5,16(sp)
  809404:	1004943a 	slli	r2,r2,16
  809408:	2006d43a 	srli	r3,r4,16
  80940c:	8560983a 	sll	r16,r16,r21
  809410:	2f23383a 	mul	r17,r5,fp
  809414:	10c4b03a 	or	r2,r2,r3
  809418:	dc000015 	stw	r16,0(sp)
  80941c:	b56c983a 	sll	r22,r22,r21
  809420:	1440032e 	bgeu	r2,r17,809430 <__umoddi3+0x404>
  809424:	15c5883a 	add	r2,r2,r23
  809428:	e73fffc4 	addi	fp,fp,-1
  80942c:	15c05d2e 	bgeu	r2,r23,8095a4 <__umoddi3+0x578>
  809430:	1463c83a 	sub	r17,r2,r17
  809434:	8809883a 	mov	r4,r17
  809438:	a00b883a 	mov	r5,r20
  80943c:	080a8440 	call	80a844 <__udivsi3>
  809440:	8809883a 	mov	r4,r17
  809444:	a00b883a 	mov	r5,r20
  809448:	1021883a 	mov	r16,r2
  80944c:	080a84c0 	call	80a84c <__umodsi3>
  809450:	d8c00417 	ldw	r3,16(sp)
  809454:	d9000217 	ldw	r4,8(sp)
  809458:	1004943a 	slli	r2,r2,16
  80945c:	1c23383a 	mul	r17,r3,r16
  809460:	20ffffcc 	andi	r3,r4,65535
  809464:	10ceb03a 	or	r7,r2,r3
  809468:	3c40032e 	bgeu	r7,r17,809478 <__umoddi3+0x44c>
  80946c:	3dcf883a 	add	r7,r7,r23
  809470:	843fffc4 	addi	r16,r16,-1
  809474:	3dc0472e 	bgeu	r7,r23,809594 <__umoddi3+0x568>
  809478:	e004943a 	slli	r2,fp,16
  80947c:	d9400017 	ldw	r5,0(sp)
  809480:	3c4fc83a 	sub	r7,r7,r17
  809484:	8084b03a 	or	r2,r16,r2
  809488:	28ffffcc 	andi	r3,r5,65535
  80948c:	280cd43a 	srli	r6,r5,16
  809490:	100ad43a 	srli	r5,r2,16
  809494:	10bfffcc 	andi	r2,r2,65535
  809498:	10d1383a 	mul	r8,r2,r3
  80949c:	28c7383a 	mul	r3,r5,r3
  8094a0:	1185383a 	mul	r2,r2,r6
  8094a4:	4008d43a 	srli	r4,r8,16
  8094a8:	298b383a 	mul	r5,r5,r6
  8094ac:	10c5883a 	add	r2,r2,r3
  8094b0:	2089883a 	add	r4,r4,r2
  8094b4:	20c0022e 	bgeu	r4,r3,8094c0 <__umoddi3+0x494>
  8094b8:	00800074 	movhi	r2,1
  8094bc:	288b883a 	add	r5,r5,r2
  8094c0:	2004d43a 	srli	r2,r4,16
  8094c4:	2008943a 	slli	r4,r4,16
  8094c8:	40ffffcc 	andi	r3,r8,65535
  8094cc:	288b883a 	add	r5,r5,r2
  8094d0:	20c9883a 	add	r4,r4,r3
  8094d4:	39400b36 	bltu	r7,r5,809504 <__umoddi3+0x4d8>
  8094d8:	39403d26 	beq	r7,r5,8095d0 <__umoddi3+0x5a4>
  8094dc:	394bc83a 	sub	r5,r7,r5
  8094e0:	00000f06 	br	809520 <__umoddi3+0x4f4>
  8094e4:	30c5c83a 	sub	r2,r6,r3
  8094e8:	1839883a 	mov	fp,r3
  8094ec:	b084d83a 	srl	r2,r22,r2
  8094f0:	a0c6983a 	sll	r3,r20,r3
  8094f4:	8720983a 	sll	r16,r16,fp
  8094f8:	b72c983a 	sll	r22,r22,fp
  8094fc:	18a8b03a 	or	r20,r3,r2
  809500:	003f3a06 	br	8091ec <__umoddi3+0x1c0>
  809504:	d8c00017 	ldw	r3,0(sp)
  809508:	20c5c83a 	sub	r2,r4,r3
  80950c:	2089803a 	cmpltu	r4,r4,r2
  809510:	2dc7c83a 	sub	r3,r5,r23
  809514:	1907c83a 	sub	r3,r3,r4
  809518:	38cbc83a 	sub	r5,r7,r3
  80951c:	1009883a 	mov	r4,r2
  809520:	b105c83a 	sub	r2,r22,r4
  809524:	b087803a 	cmpltu	r3,r22,r2
  809528:	28c7c83a 	sub	r3,r5,r3
  80952c:	d9400317 	ldw	r5,12(sp)
  809530:	1544d83a 	srl	r2,r2,r21
  809534:	1948983a 	sll	r4,r3,r5
  809538:	1d46d83a 	srl	r3,r3,r21
  80953c:	20a4b03a 	or	r18,r4,r2
  809540:	9011883a 	mov	r8,r18
  809544:	1813883a 	mov	r9,r3
  809548:	003ef606 	br	809124 <__umoddi3+0xf8>
  80954c:	01400604 	movi	r5,24
  809550:	2805883a 	mov	r2,r5
  809554:	003ecc06 	br	809088 <__umoddi3+0x5c>
  809558:	01400204 	movi	r5,8
  80955c:	2805883a 	mov	r2,r5
  809560:	003ec906 	br	809088 <__umoddi3+0x5c>
  809564:	01400204 	movi	r5,8
  809568:	2805883a 	mov	r2,r5
  80956c:	003f0106 	br	809174 <__umoddi3+0x148>
  809570:	01400204 	movi	r5,8
  809574:	2805883a 	mov	r2,r5
  809578:	003f1206 	br	8091c4 <__umoddi3+0x198>
  80957c:	01400604 	movi	r5,24
  809580:	2805883a 	mov	r2,r5
  809584:	003f0f06 	br	8091c4 <__umoddi3+0x198>
  809588:	01400604 	movi	r5,24
  80958c:	2805883a 	mov	r2,r5
  809590:	003ef806 	br	809174 <__umoddi3+0x148>
  809594:	3c7fb82e 	bgeu	r7,r17,809478 <__umoddi3+0x44c>
  809598:	843fffc4 	addi	r16,r16,-1
  80959c:	3dcf883a 	add	r7,r7,r23
  8095a0:	003fb506 	br	809478 <__umoddi3+0x44c>
  8095a4:	147fa22e 	bgeu	r2,r17,809430 <__umoddi3+0x404>
  8095a8:	e73fffc4 	addi	fp,fp,-1
  8095ac:	15c5883a 	add	r2,r2,r23
  8095b0:	003f9f06 	br	809430 <__umoddi3+0x404>
  8095b4:	147f692e 	bgeu	r2,r17,80935c <__umoddi3+0x330>
  8095b8:	1405883a 	add	r2,r2,r16
  8095bc:	003f6706 	br	80935c <__umoddi3+0x330>
  8095c0:	1405883a 	add	r2,r2,r16
  8095c4:	003f1906 	br	80922c <__umoddi3+0x200>
  8095c8:	1405883a 	add	r2,r2,r16
  8095cc:	003ec906 	br	8090f4 <__umoddi3+0xc8>
  8095d0:	b13fcc36 	bltu	r22,r4,809504 <__umoddi3+0x4d8>
  8095d4:	000b883a 	mov	r5,zero
  8095d8:	003fd106 	br	809520 <__umoddi3+0x4f4>

008095dc <_fpadd_parts>:
  8095dc:	defff804 	addi	sp,sp,-32
  8095e0:	dcc00315 	stw	r19,12(sp)
  8095e4:	2027883a 	mov	r19,r4
  8095e8:	21000017 	ldw	r4,0(r4)
  8095ec:	00c00044 	movi	r3,1
  8095f0:	dd400515 	stw	r21,20(sp)
  8095f4:	dd000415 	stw	r20,16(sp)
  8095f8:	ddc00715 	stw	r23,28(sp)
  8095fc:	dd800615 	stw	r22,24(sp)
  809600:	dc800215 	stw	r18,8(sp)
  809604:	dc400115 	stw	r17,4(sp)
  809608:	dc000015 	stw	r16,0(sp)
  80960c:	282b883a 	mov	r21,r5
  809610:	3029883a 	mov	r20,r6
  809614:	1900632e 	bgeu	r3,r4,8097a4 <_fpadd_parts+0x1c8>
  809618:	28800017 	ldw	r2,0(r5)
  80961c:	1880812e 	bgeu	r3,r2,809824 <_fpadd_parts+0x248>
  809620:	00c00104 	movi	r3,4
  809624:	20c0dc26 	beq	r4,r3,809998 <_fpadd_parts+0x3bc>
  809628:	10c07e26 	beq	r2,r3,809824 <_fpadd_parts+0x248>
  80962c:	00c00084 	movi	r3,2
  809630:	10c06726 	beq	r2,r3,8097d0 <_fpadd_parts+0x1f4>
  809634:	20c07b26 	beq	r4,r3,809824 <_fpadd_parts+0x248>
  809638:	9dc00217 	ldw	r23,8(r19)
  80963c:	28c00217 	ldw	r3,8(r5)
  809640:	9c400317 	ldw	r17,12(r19)
  809644:	2bc00317 	ldw	r15,12(r5)
  809648:	b8cdc83a 	sub	r6,r23,r3
  80964c:	9c800417 	ldw	r18,16(r19)
  809650:	2c000417 	ldw	r16,16(r5)
  809654:	3009883a 	mov	r4,r6
  809658:	30009716 	blt	r6,zero,8098b8 <_fpadd_parts+0x2dc>
  80965c:	00800fc4 	movi	r2,63
  809660:	11806b16 	blt	r2,r6,809810 <_fpadd_parts+0x234>
  809664:	0100a40e 	bge	zero,r4,8098f8 <_fpadd_parts+0x31c>
  809668:	35bff804 	addi	r22,r6,-32
  80966c:	b000bc16 	blt	r22,zero,809960 <_fpadd_parts+0x384>
  809670:	8596d83a 	srl	r11,r16,r22
  809674:	0019883a 	mov	r12,zero
  809678:	0013883a 	mov	r9,zero
  80967c:	01000044 	movi	r4,1
  809680:	0015883a 	mov	r10,zero
  809684:	b000be16 	blt	r22,zero,809980 <_fpadd_parts+0x3a4>
  809688:	2590983a 	sll	r8,r4,r22
  80968c:	000f883a 	mov	r7,zero
  809690:	00bfffc4 	movi	r2,-1
  809694:	3889883a 	add	r4,r7,r2
  809698:	408b883a 	add	r5,r8,r2
  80969c:	21cd803a 	cmpltu	r6,r4,r7
  8096a0:	314b883a 	add	r5,r6,r5
  8096a4:	7904703a 	and	r2,r15,r4
  8096a8:	8146703a 	and	r3,r16,r5
  8096ac:	10c4b03a 	or	r2,r2,r3
  8096b0:	10000226 	beq	r2,zero,8096bc <_fpadd_parts+0xe0>
  8096b4:	02400044 	movi	r9,1
  8096b8:	0015883a 	mov	r10,zero
  8096bc:	5a5eb03a 	or	r15,r11,r9
  8096c0:	62a0b03a 	or	r16,r12,r10
  8096c4:	99400117 	ldw	r5,4(r19)
  8096c8:	a8800117 	ldw	r2,4(r21)
  8096cc:	28806e26 	beq	r5,r2,809888 <_fpadd_parts+0x2ac>
  8096d0:	28006626 	beq	r5,zero,80986c <_fpadd_parts+0x290>
  8096d4:	7c45c83a 	sub	r2,r15,r17
  8096d8:	7889803a 	cmpltu	r4,r15,r2
  8096dc:	8487c83a 	sub	r3,r16,r18
  8096e0:	1909c83a 	sub	r4,r3,r4
  8096e4:	100d883a 	mov	r6,r2
  8096e8:	200f883a 	mov	r7,r4
  8096ec:	38007716 	blt	r7,zero,8098cc <_fpadd_parts+0x2f0>
  8096f0:	a5c00215 	stw	r23,8(r20)
  8096f4:	a1c00415 	stw	r7,16(r20)
  8096f8:	a0000115 	stw	zero,4(r20)
  8096fc:	a1800315 	stw	r6,12(r20)
  809700:	a2000317 	ldw	r8,12(r20)
  809704:	a2400417 	ldw	r9,16(r20)
  809708:	00bfffc4 	movi	r2,-1
  80970c:	408b883a 	add	r5,r8,r2
  809710:	2a09803a 	cmpltu	r4,r5,r8
  809714:	488d883a 	add	r6,r9,r2
  809718:	01c40034 	movhi	r7,4096
  80971c:	39ffffc4 	addi	r7,r7,-1
  809720:	218d883a 	add	r6,r4,r6
  809724:	39801736 	bltu	r7,r6,809784 <_fpadd_parts+0x1a8>
  809728:	31c06526 	beq	r6,r7,8098c0 <_fpadd_parts+0x2e4>
  80972c:	a3000217 	ldw	r12,8(r20)
  809730:	4209883a 	add	r4,r8,r8
  809734:	00bfffc4 	movi	r2,-1
  809738:	220f803a 	cmpltu	r7,r4,r8
  80973c:	4a4b883a 	add	r5,r9,r9
  809740:	394f883a 	add	r7,r7,r5
  809744:	2095883a 	add	r10,r4,r2
  809748:	3897883a 	add	r11,r7,r2
  80974c:	510d803a 	cmpltu	r6,r10,r4
  809750:	6099883a 	add	r12,r12,r2
  809754:	32d7883a 	add	r11,r6,r11
  809758:	00840034 	movhi	r2,4096
  80975c:	10bfffc4 	addi	r2,r2,-1
  809760:	2011883a 	mov	r8,r4
  809764:	3813883a 	mov	r9,r7
  809768:	a1000315 	stw	r4,12(r20)
  80976c:	a1c00415 	stw	r7,16(r20)
  809770:	a3000215 	stw	r12,8(r20)
  809774:	12c00336 	bltu	r2,r11,809784 <_fpadd_parts+0x1a8>
  809778:	58bfed1e 	bne	r11,r2,809730 <_fpadd_parts+0x154>
  80977c:	00bfff84 	movi	r2,-2
  809780:	12bfeb2e 	bgeu	r2,r10,809730 <_fpadd_parts+0x154>
  809784:	a2800417 	ldw	r10,16(r20)
  809788:	008000c4 	movi	r2,3
  80978c:	00c80034 	movhi	r3,8192
  809790:	18ffffc4 	addi	r3,r3,-1
  809794:	a2400317 	ldw	r9,12(r20)
  809798:	a0800015 	stw	r2,0(r20)
  80979c:	1a802336 	bltu	r3,r10,80982c <_fpadd_parts+0x250>
  8097a0:	a027883a 	mov	r19,r20
  8097a4:	9805883a 	mov	r2,r19
  8097a8:	ddc00717 	ldw	r23,28(sp)
  8097ac:	dd800617 	ldw	r22,24(sp)
  8097b0:	dd400517 	ldw	r21,20(sp)
  8097b4:	dd000417 	ldw	r20,16(sp)
  8097b8:	dcc00317 	ldw	r19,12(sp)
  8097bc:	dc800217 	ldw	r18,8(sp)
  8097c0:	dc400117 	ldw	r17,4(sp)
  8097c4:	dc000017 	ldw	r16,0(sp)
  8097c8:	dec00804 	addi	sp,sp,32
  8097cc:	f800283a 	ret
  8097d0:	20fff41e 	bne	r4,r3,8097a4 <_fpadd_parts+0x1c8>
  8097d4:	31000015 	stw	r4,0(r6)
  8097d8:	98800117 	ldw	r2,4(r19)
  8097dc:	30800115 	stw	r2,4(r6)
  8097e0:	98c00217 	ldw	r3,8(r19)
  8097e4:	30c00215 	stw	r3,8(r6)
  8097e8:	98800317 	ldw	r2,12(r19)
  8097ec:	30800315 	stw	r2,12(r6)
  8097f0:	98c00417 	ldw	r3,16(r19)
  8097f4:	30c00415 	stw	r3,16(r6)
  8097f8:	98800117 	ldw	r2,4(r19)
  8097fc:	28c00117 	ldw	r3,4(r5)
  809800:	3027883a 	mov	r19,r6
  809804:	10c4703a 	and	r2,r2,r3
  809808:	30800115 	stw	r2,4(r6)
  80980c:	003fe506 	br	8097a4 <_fpadd_parts+0x1c8>
  809810:	1dc02616 	blt	r3,r23,8098ac <_fpadd_parts+0x2d0>
  809814:	0023883a 	mov	r17,zero
  809818:	182f883a 	mov	r23,r3
  80981c:	0025883a 	mov	r18,zero
  809820:	003fa806 	br	8096c4 <_fpadd_parts+0xe8>
  809824:	a827883a 	mov	r19,r21
  809828:	003fde06 	br	8097a4 <_fpadd_parts+0x1c8>
  80982c:	01800044 	movi	r6,1
  809830:	500497fa 	slli	r2,r10,31
  809834:	4808d07a 	srli	r4,r9,1
  809838:	518ad83a 	srl	r5,r10,r6
  80983c:	a2000217 	ldw	r8,8(r20)
  809840:	1108b03a 	or	r4,r2,r4
  809844:	0007883a 	mov	r3,zero
  809848:	4984703a 	and	r2,r9,r6
  80984c:	208cb03a 	or	r6,r4,r2
  809850:	28ceb03a 	or	r7,r5,r3
  809854:	42000044 	addi	r8,r8,1
  809858:	a027883a 	mov	r19,r20
  80985c:	a1c00415 	stw	r7,16(r20)
  809860:	a2000215 	stw	r8,8(r20)
  809864:	a1800315 	stw	r6,12(r20)
  809868:	003fce06 	br	8097a4 <_fpadd_parts+0x1c8>
  80986c:	8bc5c83a 	sub	r2,r17,r15
  809870:	8889803a 	cmpltu	r4,r17,r2
  809874:	9407c83a 	sub	r3,r18,r16
  809878:	1909c83a 	sub	r4,r3,r4
  80987c:	100d883a 	mov	r6,r2
  809880:	200f883a 	mov	r7,r4
  809884:	003f9906 	br	8096ec <_fpadd_parts+0x110>
  809888:	7c45883a 	add	r2,r15,r17
  80988c:	13c9803a 	cmpltu	r4,r2,r15
  809890:	8487883a 	add	r3,r16,r18
  809894:	20c9883a 	add	r4,r4,r3
  809898:	a1400115 	stw	r5,4(r20)
  80989c:	a5c00215 	stw	r23,8(r20)
  8098a0:	a0800315 	stw	r2,12(r20)
  8098a4:	a1000415 	stw	r4,16(r20)
  8098a8:	003fb606 	br	809784 <_fpadd_parts+0x1a8>
  8098ac:	001f883a 	mov	r15,zero
  8098b0:	0021883a 	mov	r16,zero
  8098b4:	003f8306 	br	8096c4 <_fpadd_parts+0xe8>
  8098b8:	018dc83a 	sub	r6,zero,r6
  8098bc:	003f6706 	br	80965c <_fpadd_parts+0x80>
  8098c0:	00bfff84 	movi	r2,-2
  8098c4:	117faf36 	bltu	r2,r5,809784 <_fpadd_parts+0x1a8>
  8098c8:	003f9806 	br	80972c <_fpadd_parts+0x150>
  8098cc:	0005883a 	mov	r2,zero
  8098d0:	1189c83a 	sub	r4,r2,r6
  8098d4:	1105803a 	cmpltu	r2,r2,r4
  8098d8:	01cbc83a 	sub	r5,zero,r7
  8098dc:	2885c83a 	sub	r2,r5,r2
  8098e0:	01800044 	movi	r6,1
  8098e4:	a1800115 	stw	r6,4(r20)
  8098e8:	a5c00215 	stw	r23,8(r20)
  8098ec:	a1000315 	stw	r4,12(r20)
  8098f0:	a0800415 	stw	r2,16(r20)
  8098f4:	003f8206 	br	809700 <_fpadd_parts+0x124>
  8098f8:	203f7226 	beq	r4,zero,8096c4 <_fpadd_parts+0xe8>
  8098fc:	35bff804 	addi	r22,r6,-32
  809900:	b9af883a 	add	r23,r23,r6
  809904:	b0003116 	blt	r22,zero,8099cc <_fpadd_parts+0x3f0>
  809908:	959ad83a 	srl	r13,r18,r22
  80990c:	001d883a 	mov	r14,zero
  809910:	000f883a 	mov	r7,zero
  809914:	01000044 	movi	r4,1
  809918:	0011883a 	mov	r8,zero
  80991c:	b0002516 	blt	r22,zero,8099b4 <_fpadd_parts+0x3d8>
  809920:	2594983a 	sll	r10,r4,r22
  809924:	0013883a 	mov	r9,zero
  809928:	00bfffc4 	movi	r2,-1
  80992c:	4889883a 	add	r4,r9,r2
  809930:	508b883a 	add	r5,r10,r2
  809934:	224d803a 	cmpltu	r6,r4,r9
  809938:	314b883a 	add	r5,r6,r5
  80993c:	8904703a 	and	r2,r17,r4
  809940:	9146703a 	and	r3,r18,r5
  809944:	10c4b03a 	or	r2,r2,r3
  809948:	10000226 	beq	r2,zero,809954 <_fpadd_parts+0x378>
  80994c:	01c00044 	movi	r7,1
  809950:	0011883a 	mov	r8,zero
  809954:	69e2b03a 	or	r17,r13,r7
  809958:	7224b03a 	or	r18,r14,r8
  80995c:	003f5906 	br	8096c4 <_fpadd_parts+0xe8>
  809960:	8407883a 	add	r3,r16,r16
  809964:	008007c4 	movi	r2,31
  809968:	1185c83a 	sub	r2,r2,r6
  80996c:	1886983a 	sll	r3,r3,r2
  809970:	7996d83a 	srl	r11,r15,r6
  809974:	8198d83a 	srl	r12,r16,r6
  809978:	1ad6b03a 	or	r11,r3,r11
  80997c:	003f3e06 	br	809678 <_fpadd_parts+0x9c>
  809980:	2006d07a 	srli	r3,r4,1
  809984:	008007c4 	movi	r2,31
  809988:	1185c83a 	sub	r2,r2,r6
  80998c:	1890d83a 	srl	r8,r3,r2
  809990:	218e983a 	sll	r7,r4,r6
  809994:	003f3e06 	br	809690 <_fpadd_parts+0xb4>
  809998:	113f821e 	bne	r2,r4,8097a4 <_fpadd_parts+0x1c8>
  80999c:	28c00117 	ldw	r3,4(r5)
  8099a0:	98800117 	ldw	r2,4(r19)
  8099a4:	10ff7f26 	beq	r2,r3,8097a4 <_fpadd_parts+0x1c8>
  8099a8:	04c02074 	movhi	r19,129
  8099ac:	9cffde04 	addi	r19,r19,-136
  8099b0:	003f7c06 	br	8097a4 <_fpadd_parts+0x1c8>
  8099b4:	2006d07a 	srli	r3,r4,1
  8099b8:	008007c4 	movi	r2,31
  8099bc:	1185c83a 	sub	r2,r2,r6
  8099c0:	1894d83a 	srl	r10,r3,r2
  8099c4:	2192983a 	sll	r9,r4,r6
  8099c8:	003fd706 	br	809928 <_fpadd_parts+0x34c>
  8099cc:	9487883a 	add	r3,r18,r18
  8099d0:	008007c4 	movi	r2,31
  8099d4:	1185c83a 	sub	r2,r2,r6
  8099d8:	1886983a 	sll	r3,r3,r2
  8099dc:	899ad83a 	srl	r13,r17,r6
  8099e0:	919cd83a 	srl	r14,r18,r6
  8099e4:	1b5ab03a 	or	r13,r3,r13
  8099e8:	003fc906 	br	809910 <_fpadd_parts+0x334>

008099ec <__subdf3>:
  8099ec:	deffea04 	addi	sp,sp,-88
  8099f0:	dcc01415 	stw	r19,80(sp)
  8099f4:	dcc00404 	addi	r19,sp,16
  8099f8:	2011883a 	mov	r8,r4
  8099fc:	2813883a 	mov	r9,r5
  809a00:	dc401315 	stw	r17,76(sp)
  809a04:	d809883a 	mov	r4,sp
  809a08:	980b883a 	mov	r5,r19
  809a0c:	dc400904 	addi	r17,sp,36
  809a10:	dfc01515 	stw	ra,84(sp)
  809a14:	da400115 	stw	r9,4(sp)
  809a18:	d9c00315 	stw	r7,12(sp)
  809a1c:	da000015 	stw	r8,0(sp)
  809a20:	d9800215 	stw	r6,8(sp)
  809a24:	080a8ec0 	call	80a8ec <__unpack_d>
  809a28:	d9000204 	addi	r4,sp,8
  809a2c:	880b883a 	mov	r5,r17
  809a30:	080a8ec0 	call	80a8ec <__unpack_d>
  809a34:	d8800a17 	ldw	r2,40(sp)
  809a38:	880b883a 	mov	r5,r17
  809a3c:	9809883a 	mov	r4,r19
  809a40:	d9800e04 	addi	r6,sp,56
  809a44:	1080005c 	xori	r2,r2,1
  809a48:	d8800a15 	stw	r2,40(sp)
  809a4c:	08095dc0 	call	8095dc <_fpadd_parts>
  809a50:	1009883a 	mov	r4,r2
  809a54:	08014280 	call	801428 <__pack_d>
  809a58:	dfc01517 	ldw	ra,84(sp)
  809a5c:	dcc01417 	ldw	r19,80(sp)
  809a60:	dc401317 	ldw	r17,76(sp)
  809a64:	dec01604 	addi	sp,sp,88
  809a68:	f800283a 	ret

00809a6c <__adddf3>:
  809a6c:	deffea04 	addi	sp,sp,-88
  809a70:	dcc01415 	stw	r19,80(sp)
  809a74:	dcc00404 	addi	r19,sp,16
  809a78:	2011883a 	mov	r8,r4
  809a7c:	2813883a 	mov	r9,r5
  809a80:	dc401315 	stw	r17,76(sp)
  809a84:	d809883a 	mov	r4,sp
  809a88:	980b883a 	mov	r5,r19
  809a8c:	dc400904 	addi	r17,sp,36
  809a90:	dfc01515 	stw	ra,84(sp)
  809a94:	da400115 	stw	r9,4(sp)
  809a98:	d9c00315 	stw	r7,12(sp)
  809a9c:	da000015 	stw	r8,0(sp)
  809aa0:	d9800215 	stw	r6,8(sp)
  809aa4:	080a8ec0 	call	80a8ec <__unpack_d>
  809aa8:	d9000204 	addi	r4,sp,8
  809aac:	880b883a 	mov	r5,r17
  809ab0:	080a8ec0 	call	80a8ec <__unpack_d>
  809ab4:	d9800e04 	addi	r6,sp,56
  809ab8:	9809883a 	mov	r4,r19
  809abc:	880b883a 	mov	r5,r17
  809ac0:	08095dc0 	call	8095dc <_fpadd_parts>
  809ac4:	1009883a 	mov	r4,r2
  809ac8:	08014280 	call	801428 <__pack_d>
  809acc:	dfc01517 	ldw	ra,84(sp)
  809ad0:	dcc01417 	ldw	r19,80(sp)
  809ad4:	dc401317 	ldw	r17,76(sp)
  809ad8:	dec01604 	addi	sp,sp,88
  809adc:	f800283a 	ret

00809ae0 <__muldf3>:
  809ae0:	deffe004 	addi	sp,sp,-128
  809ae4:	dc401815 	stw	r17,96(sp)
  809ae8:	dc400404 	addi	r17,sp,16
  809aec:	2011883a 	mov	r8,r4
  809af0:	2813883a 	mov	r9,r5
  809af4:	dc001715 	stw	r16,92(sp)
  809af8:	d809883a 	mov	r4,sp
  809afc:	880b883a 	mov	r5,r17
  809b00:	dc000904 	addi	r16,sp,36
  809b04:	dfc01f15 	stw	ra,124(sp)
  809b08:	da400115 	stw	r9,4(sp)
  809b0c:	d9c00315 	stw	r7,12(sp)
  809b10:	da000015 	stw	r8,0(sp)
  809b14:	d9800215 	stw	r6,8(sp)
  809b18:	ddc01e15 	stw	r23,120(sp)
  809b1c:	dd801d15 	stw	r22,116(sp)
  809b20:	dd401c15 	stw	r21,112(sp)
  809b24:	dd001b15 	stw	r20,108(sp)
  809b28:	dcc01a15 	stw	r19,104(sp)
  809b2c:	dc801915 	stw	r18,100(sp)
  809b30:	080a8ec0 	call	80a8ec <__unpack_d>
  809b34:	d9000204 	addi	r4,sp,8
  809b38:	800b883a 	mov	r5,r16
  809b3c:	080a8ec0 	call	80a8ec <__unpack_d>
  809b40:	d9000417 	ldw	r4,16(sp)
  809b44:	00800044 	movi	r2,1
  809b48:	1100102e 	bgeu	r2,r4,809b8c <__muldf3+0xac>
  809b4c:	d8c00917 	ldw	r3,36(sp)
  809b50:	10c0062e 	bgeu	r2,r3,809b6c <__muldf3+0x8c>
  809b54:	00800104 	movi	r2,4
  809b58:	20800a26 	beq	r4,r2,809b84 <__muldf3+0xa4>
  809b5c:	1880cc26 	beq	r3,r2,809e90 <__muldf3+0x3b0>
  809b60:	00800084 	movi	r2,2
  809b64:	20800926 	beq	r4,r2,809b8c <__muldf3+0xac>
  809b68:	1880191e 	bne	r3,r2,809bd0 <__muldf3+0xf0>
  809b6c:	d8c00a17 	ldw	r3,40(sp)
  809b70:	d8800517 	ldw	r2,20(sp)
  809b74:	8009883a 	mov	r4,r16
  809b78:	10c4c03a 	cmpne	r2,r2,r3
  809b7c:	d8800a15 	stw	r2,40(sp)
  809b80:	00000706 	br	809ba0 <__muldf3+0xc0>
  809b84:	00800084 	movi	r2,2
  809b88:	1880c326 	beq	r3,r2,809e98 <__muldf3+0x3b8>
  809b8c:	d8800517 	ldw	r2,20(sp)
  809b90:	d8c00a17 	ldw	r3,40(sp)
  809b94:	8809883a 	mov	r4,r17
  809b98:	10c4c03a 	cmpne	r2,r2,r3
  809b9c:	d8800515 	stw	r2,20(sp)
  809ba0:	08014280 	call	801428 <__pack_d>
  809ba4:	dfc01f17 	ldw	ra,124(sp)
  809ba8:	ddc01e17 	ldw	r23,120(sp)
  809bac:	dd801d17 	ldw	r22,116(sp)
  809bb0:	dd401c17 	ldw	r21,112(sp)
  809bb4:	dd001b17 	ldw	r20,108(sp)
  809bb8:	dcc01a17 	ldw	r19,104(sp)
  809bbc:	dc801917 	ldw	r18,100(sp)
  809bc0:	dc401817 	ldw	r17,96(sp)
  809bc4:	dc001717 	ldw	r16,92(sp)
  809bc8:	dec02004 	addi	sp,sp,128
  809bcc:	f800283a 	ret
  809bd0:	dd800717 	ldw	r22,28(sp)
  809bd4:	dc800c17 	ldw	r18,48(sp)
  809bd8:	002b883a 	mov	r21,zero
  809bdc:	0023883a 	mov	r17,zero
  809be0:	a80b883a 	mov	r5,r21
  809be4:	b00d883a 	mov	r6,r22
  809be8:	880f883a 	mov	r7,r17
  809bec:	ddc00817 	ldw	r23,32(sp)
  809bf0:	dcc00d17 	ldw	r19,52(sp)
  809bf4:	9009883a 	mov	r4,r18
  809bf8:	080a8540 	call	80a854 <__muldi3>
  809bfc:	001b883a 	mov	r13,zero
  809c00:	680f883a 	mov	r7,r13
  809c04:	b009883a 	mov	r4,r22
  809c08:	000b883a 	mov	r5,zero
  809c0c:	980d883a 	mov	r6,r19
  809c10:	b82d883a 	mov	r22,r23
  809c14:	002f883a 	mov	r23,zero
  809c18:	db401615 	stw	r13,88(sp)
  809c1c:	d8801315 	stw	r2,76(sp)
  809c20:	d8c01415 	stw	r3,80(sp)
  809c24:	dcc01515 	stw	r19,84(sp)
  809c28:	080a8540 	call	80a854 <__muldi3>
  809c2c:	b00d883a 	mov	r6,r22
  809c30:	000b883a 	mov	r5,zero
  809c34:	9009883a 	mov	r4,r18
  809c38:	b80f883a 	mov	r7,r23
  809c3c:	1021883a 	mov	r16,r2
  809c40:	1823883a 	mov	r17,r3
  809c44:	080a8540 	call	80a854 <__muldi3>
  809c48:	8085883a 	add	r2,r16,r2
  809c4c:	140d803a 	cmpltu	r6,r2,r16
  809c50:	88c7883a 	add	r3,r17,r3
  809c54:	30cd883a 	add	r6,r6,r3
  809c58:	1029883a 	mov	r20,r2
  809c5c:	302b883a 	mov	r21,r6
  809c60:	da801317 	ldw	r10,76(sp)
  809c64:	dac01417 	ldw	r11,80(sp)
  809c68:	db001517 	ldw	r12,84(sp)
  809c6c:	db401617 	ldw	r13,88(sp)
  809c70:	3440612e 	bgeu	r6,r17,809df8 <__muldf3+0x318>
  809c74:	0009883a 	mov	r4,zero
  809c78:	5105883a 	add	r2,r10,r4
  809c7c:	128d803a 	cmpltu	r6,r2,r10
  809c80:	5d07883a 	add	r3,r11,r20
  809c84:	30cd883a 	add	r6,r6,r3
  809c88:	0021883a 	mov	r16,zero
  809c8c:	04400044 	movi	r17,1
  809c90:	1025883a 	mov	r18,r2
  809c94:	3027883a 	mov	r19,r6
  809c98:	32c06236 	bltu	r6,r11,809e24 <__muldf3+0x344>
  809c9c:	59807a26 	beq	r11,r6,809e88 <__muldf3+0x3a8>
  809ca0:	680b883a 	mov	r5,r13
  809ca4:	b80f883a 	mov	r7,r23
  809ca8:	6009883a 	mov	r4,r12
  809cac:	b00d883a 	mov	r6,r22
  809cb0:	080a8540 	call	80a854 <__muldi3>
  809cb4:	1009883a 	mov	r4,r2
  809cb8:	000f883a 	mov	r7,zero
  809cbc:	1545883a 	add	r2,r2,r21
  809cc0:	1111803a 	cmpltu	r8,r2,r4
  809cc4:	19c7883a 	add	r3,r3,r7
  809cc8:	40c7883a 	add	r3,r8,r3
  809ccc:	88cb883a 	add	r5,r17,r3
  809cd0:	d8c00617 	ldw	r3,24(sp)
  809cd4:	8089883a 	add	r4,r16,r2
  809cd8:	d8800b17 	ldw	r2,44(sp)
  809cdc:	18c00104 	addi	r3,r3,4
  809ce0:	240d803a 	cmpltu	r6,r4,r16
  809ce4:	10c7883a 	add	r3,r2,r3
  809ce8:	2013883a 	mov	r9,r4
  809cec:	d8800a17 	ldw	r2,40(sp)
  809cf0:	d9000517 	ldw	r4,20(sp)
  809cf4:	314d883a 	add	r6,r6,r5
  809cf8:	3015883a 	mov	r10,r6
  809cfc:	2088c03a 	cmpne	r4,r4,r2
  809d00:	00880034 	movhi	r2,8192
  809d04:	10bfffc4 	addi	r2,r2,-1
  809d08:	d9000f15 	stw	r4,60(sp)
  809d0c:	d8c01015 	stw	r3,64(sp)
  809d10:	1180162e 	bgeu	r2,r6,809d6c <__muldf3+0x28c>
  809d14:	1811883a 	mov	r8,r3
  809d18:	101f883a 	mov	r15,r2
  809d1c:	980497fa 	slli	r2,r19,31
  809d20:	9016d07a 	srli	r11,r18,1
  809d24:	500697fa 	slli	r3,r10,31
  809d28:	480cd07a 	srli	r6,r9,1
  809d2c:	500ed07a 	srli	r7,r10,1
  809d30:	12d6b03a 	or	r11,r2,r11
  809d34:	00800044 	movi	r2,1
  809d38:	198cb03a 	or	r6,r3,r6
  809d3c:	4888703a 	and	r4,r9,r2
  809d40:	9818d07a 	srli	r12,r19,1
  809d44:	001b883a 	mov	r13,zero
  809d48:	03a00034 	movhi	r14,32768
  809d4c:	3013883a 	mov	r9,r6
  809d50:	3815883a 	mov	r10,r7
  809d54:	4091883a 	add	r8,r8,r2
  809d58:	20000226 	beq	r4,zero,809d64 <__muldf3+0x284>
  809d5c:	5b64b03a 	or	r18,r11,r13
  809d60:	63a6b03a 	or	r19,r12,r14
  809d64:	7abfed36 	bltu	r15,r10,809d1c <__muldf3+0x23c>
  809d68:	da001015 	stw	r8,64(sp)
  809d6c:	00840034 	movhi	r2,4096
  809d70:	10bfffc4 	addi	r2,r2,-1
  809d74:	12801436 	bltu	r2,r10,809dc8 <__muldf3+0x2e8>
  809d78:	da001017 	ldw	r8,64(sp)
  809d7c:	101f883a 	mov	r15,r2
  809d80:	4a45883a 	add	r2,r9,r9
  809d84:	124d803a 	cmpltu	r6,r2,r9
  809d88:	5287883a 	add	r3,r10,r10
  809d8c:	9497883a 	add	r11,r18,r18
  809d90:	5c8f803a 	cmpltu	r7,r11,r18
  809d94:	9cd9883a 	add	r12,r19,r19
  809d98:	01000044 	movi	r4,1
  809d9c:	30cd883a 	add	r6,r6,r3
  809da0:	3b0f883a 	add	r7,r7,r12
  809da4:	423fffc4 	addi	r8,r8,-1
  809da8:	1013883a 	mov	r9,r2
  809dac:	3015883a 	mov	r10,r6
  809db0:	111ab03a 	or	r13,r2,r4
  809db4:	98003016 	blt	r19,zero,809e78 <__muldf3+0x398>
  809db8:	5825883a 	mov	r18,r11
  809dbc:	3827883a 	mov	r19,r7
  809dc0:	7abfef2e 	bgeu	r15,r10,809d80 <__muldf3+0x2a0>
  809dc4:	da001015 	stw	r8,64(sp)
  809dc8:	00803fc4 	movi	r2,255
  809dcc:	488e703a 	and	r7,r9,r2
  809dd0:	00802004 	movi	r2,128
  809dd4:	0007883a 	mov	r3,zero
  809dd8:	0011883a 	mov	r8,zero
  809ddc:	38801826 	beq	r7,r2,809e40 <__muldf3+0x360>
  809de0:	008000c4 	movi	r2,3
  809de4:	d9000e04 	addi	r4,sp,56
  809de8:	da801215 	stw	r10,72(sp)
  809dec:	d8800e15 	stw	r2,56(sp)
  809df0:	da401115 	stw	r9,68(sp)
  809df4:	003f6a06 	br	809ba0 <__muldf3+0xc0>
  809df8:	89802126 	beq	r17,r6,809e80 <__muldf3+0x3a0>
  809dfc:	0009883a 	mov	r4,zero
  809e00:	5105883a 	add	r2,r10,r4
  809e04:	128d803a 	cmpltu	r6,r2,r10
  809e08:	5d07883a 	add	r3,r11,r20
  809e0c:	30cd883a 	add	r6,r6,r3
  809e10:	0021883a 	mov	r16,zero
  809e14:	0023883a 	mov	r17,zero
  809e18:	1025883a 	mov	r18,r2
  809e1c:	3027883a 	mov	r19,r6
  809e20:	32ff9e2e 	bgeu	r6,r11,809c9c <__muldf3+0x1bc>
  809e24:	00800044 	movi	r2,1
  809e28:	8089883a 	add	r4,r16,r2
  809e2c:	240d803a 	cmpltu	r6,r4,r16
  809e30:	344d883a 	add	r6,r6,r17
  809e34:	2021883a 	mov	r16,r4
  809e38:	3023883a 	mov	r17,r6
  809e3c:	003f9806 	br	809ca0 <__muldf3+0x1c0>
  809e40:	403fe71e 	bne	r8,zero,809de0 <__muldf3+0x300>
  809e44:	01004004 	movi	r4,256
  809e48:	4904703a 	and	r2,r9,r4
  809e4c:	10c4b03a 	or	r2,r2,r3
  809e50:	103fe31e 	bne	r2,zero,809de0 <__muldf3+0x300>
  809e54:	94c4b03a 	or	r2,r18,r19
  809e58:	103fe126 	beq	r2,zero,809de0 <__muldf3+0x300>
  809e5c:	49c5883a 	add	r2,r9,r7
  809e60:	1251803a 	cmpltu	r8,r2,r9
  809e64:	4291883a 	add	r8,r8,r10
  809e68:	013fc004 	movi	r4,-256
  809e6c:	1112703a 	and	r9,r2,r4
  809e70:	4015883a 	mov	r10,r8
  809e74:	003fda06 	br	809de0 <__muldf3+0x300>
  809e78:	6813883a 	mov	r9,r13
  809e7c:	003fce06 	br	809db8 <__muldf3+0x2d8>
  809e80:	143f7c36 	bltu	r2,r16,809c74 <__muldf3+0x194>
  809e84:	003fdd06 	br	809dfc <__muldf3+0x31c>
  809e88:	12bf852e 	bgeu	r2,r10,809ca0 <__muldf3+0x1c0>
  809e8c:	003fe506 	br	809e24 <__muldf3+0x344>
  809e90:	00800084 	movi	r2,2
  809e94:	20bf351e 	bne	r4,r2,809b6c <__muldf3+0x8c>
  809e98:	01002074 	movhi	r4,129
  809e9c:	213fde04 	addi	r4,r4,-136
  809ea0:	003f3f06 	br	809ba0 <__muldf3+0xc0>

00809ea4 <__divdf3>:
  809ea4:	deffed04 	addi	sp,sp,-76
  809ea8:	dcc01115 	stw	r19,68(sp)
  809eac:	dcc00404 	addi	r19,sp,16
  809eb0:	2011883a 	mov	r8,r4
  809eb4:	2813883a 	mov	r9,r5
  809eb8:	dc000e15 	stw	r16,56(sp)
  809ebc:	d809883a 	mov	r4,sp
  809ec0:	980b883a 	mov	r5,r19
  809ec4:	dc000904 	addi	r16,sp,36
  809ec8:	dfc01215 	stw	ra,72(sp)
  809ecc:	da400115 	stw	r9,4(sp)
  809ed0:	d9c00315 	stw	r7,12(sp)
  809ed4:	da000015 	stw	r8,0(sp)
  809ed8:	d9800215 	stw	r6,8(sp)
  809edc:	dc801015 	stw	r18,64(sp)
  809ee0:	dc400f15 	stw	r17,60(sp)
  809ee4:	080a8ec0 	call	80a8ec <__unpack_d>
  809ee8:	d9000204 	addi	r4,sp,8
  809eec:	800b883a 	mov	r5,r16
  809ef0:	080a8ec0 	call	80a8ec <__unpack_d>
  809ef4:	d9000417 	ldw	r4,16(sp)
  809ef8:	00800044 	movi	r2,1
  809efc:	11000b2e 	bgeu	r2,r4,809f2c <__divdf3+0x88>
  809f00:	d9400917 	ldw	r5,36(sp)
  809f04:	1140762e 	bgeu	r2,r5,80a0e0 <__divdf3+0x23c>
  809f08:	d8800517 	ldw	r2,20(sp)
  809f0c:	d8c00a17 	ldw	r3,40(sp)
  809f10:	01800104 	movi	r6,4
  809f14:	10c4f03a 	xor	r2,r2,r3
  809f18:	d8800515 	stw	r2,20(sp)
  809f1c:	21800226 	beq	r4,r6,809f28 <__divdf3+0x84>
  809f20:	00800084 	movi	r2,2
  809f24:	2080141e 	bne	r4,r2,809f78 <__divdf3+0xd4>
  809f28:	29000926 	beq	r5,r4,809f50 <__divdf3+0xac>
  809f2c:	9809883a 	mov	r4,r19
  809f30:	08014280 	call	801428 <__pack_d>
  809f34:	dfc01217 	ldw	ra,72(sp)
  809f38:	dcc01117 	ldw	r19,68(sp)
  809f3c:	dc801017 	ldw	r18,64(sp)
  809f40:	dc400f17 	ldw	r17,60(sp)
  809f44:	dc000e17 	ldw	r16,56(sp)
  809f48:	dec01304 	addi	sp,sp,76
  809f4c:	f800283a 	ret
  809f50:	01002074 	movhi	r4,129
  809f54:	213fde04 	addi	r4,r4,-136
  809f58:	08014280 	call	801428 <__pack_d>
  809f5c:	dfc01217 	ldw	ra,72(sp)
  809f60:	dcc01117 	ldw	r19,68(sp)
  809f64:	dc801017 	ldw	r18,64(sp)
  809f68:	dc400f17 	ldw	r17,60(sp)
  809f6c:	dc000e17 	ldw	r16,56(sp)
  809f70:	dec01304 	addi	sp,sp,76
  809f74:	f800283a 	ret
  809f78:	29805b26 	beq	r5,r6,80a0e8 <__divdf3+0x244>
  809f7c:	28802d26 	beq	r5,r2,80a034 <__divdf3+0x190>
  809f80:	d8c00617 	ldw	r3,24(sp)
  809f84:	d8800b17 	ldw	r2,44(sp)
  809f88:	d9c00817 	ldw	r7,32(sp)
  809f8c:	dc400d17 	ldw	r17,52(sp)
  809f90:	188bc83a 	sub	r5,r3,r2
  809f94:	d9800717 	ldw	r6,28(sp)
  809f98:	dc000c17 	ldw	r16,48(sp)
  809f9c:	d9400615 	stw	r5,24(sp)
  809fa0:	3c403836 	bltu	r7,r17,80a084 <__divdf3+0x1e0>
  809fa4:	89c03626 	beq	r17,r7,80a080 <__divdf3+0x1dc>
  809fa8:	0015883a 	mov	r10,zero
  809fac:	001d883a 	mov	r14,zero
  809fb0:	02c40034 	movhi	r11,4096
  809fb4:	001f883a 	mov	r15,zero
  809fb8:	003f883a 	mov	ra,zero
  809fbc:	04800f44 	movi	r18,61
  809fc0:	00000f06 	br	80a000 <__divdf3+0x15c>
  809fc4:	601d883a 	mov	r14,r12
  809fc8:	681f883a 	mov	r15,r13
  809fcc:	400d883a 	mov	r6,r8
  809fd0:	100f883a 	mov	r7,r2
  809fd4:	3191883a 	add	r8,r6,r6
  809fd8:	5808d07a 	srli	r4,r11,1
  809fdc:	4185803a 	cmpltu	r2,r8,r6
  809fe0:	39d3883a 	add	r9,r7,r7
  809fe4:	28c6b03a 	or	r3,r5,r3
  809fe8:	1245883a 	add	r2,r2,r9
  809fec:	1815883a 	mov	r10,r3
  809ff0:	2017883a 	mov	r11,r4
  809ff4:	400d883a 	mov	r6,r8
  809ff8:	100f883a 	mov	r7,r2
  809ffc:	fc801726 	beq	ra,r18,80a05c <__divdf3+0x1b8>
  80a000:	580a97fa 	slli	r5,r11,31
  80a004:	5006d07a 	srli	r3,r10,1
  80a008:	ffc00044 	addi	ra,ra,1
  80a00c:	3c7ff136 	bltu	r7,r17,809fd4 <__divdf3+0x130>
  80a010:	3411c83a 	sub	r8,r6,r16
  80a014:	3205803a 	cmpltu	r2,r6,r8
  80a018:	3c53c83a 	sub	r9,r7,r17
  80a01c:	7298b03a 	or	r12,r14,r10
  80a020:	7adab03a 	or	r13,r15,r11
  80a024:	4885c83a 	sub	r2,r9,r2
  80a028:	89ffe61e 	bne	r17,r7,809fc4 <__divdf3+0x120>
  80a02c:	343fe936 	bltu	r6,r16,809fd4 <__divdf3+0x130>
  80a030:	003fe406 	br	809fc4 <__divdf3+0x120>
  80a034:	9809883a 	mov	r4,r19
  80a038:	d9800415 	stw	r6,16(sp)
  80a03c:	08014280 	call	801428 <__pack_d>
  80a040:	dfc01217 	ldw	ra,72(sp)
  80a044:	dcc01117 	ldw	r19,68(sp)
  80a048:	dc801017 	ldw	r18,64(sp)
  80a04c:	dc400f17 	ldw	r17,60(sp)
  80a050:	dc000e17 	ldw	r16,56(sp)
  80a054:	dec01304 	addi	sp,sp,76
  80a058:	f800283a 	ret
  80a05c:	00803fc4 	movi	r2,255
  80a060:	7090703a 	and	r8,r14,r2
  80a064:	00802004 	movi	r2,128
  80a068:	0007883a 	mov	r3,zero
  80a06c:	0013883a 	mov	r9,zero
  80a070:	40800d26 	beq	r8,r2,80a0a8 <__divdf3+0x204>
  80a074:	dbc00815 	stw	r15,32(sp)
  80a078:	db800715 	stw	r14,28(sp)
  80a07c:	003fab06 	br	809f2c <__divdf3+0x88>
  80a080:	343fc92e 	bgeu	r6,r16,809fa8 <__divdf3+0x104>
  80a084:	3185883a 	add	r2,r6,r6
  80a088:	1189803a 	cmpltu	r4,r2,r6
  80a08c:	39c7883a 	add	r3,r7,r7
  80a090:	20c9883a 	add	r4,r4,r3
  80a094:	297fffc4 	addi	r5,r5,-1
  80a098:	100d883a 	mov	r6,r2
  80a09c:	200f883a 	mov	r7,r4
  80a0a0:	d9400615 	stw	r5,24(sp)
  80a0a4:	003fc006 	br	809fa8 <__divdf3+0x104>
  80a0a8:	483ff21e 	bne	r9,zero,80a074 <__divdf3+0x1d0>
  80a0ac:	01004004 	movi	r4,256
  80a0b0:	7104703a 	and	r2,r14,r4
  80a0b4:	10c4b03a 	or	r2,r2,r3
  80a0b8:	103fee1e 	bne	r2,zero,80a074 <__divdf3+0x1d0>
  80a0bc:	31c4b03a 	or	r2,r6,r7
  80a0c0:	103fec26 	beq	r2,zero,80a074 <__divdf3+0x1d0>
  80a0c4:	7205883a 	add	r2,r14,r8
  80a0c8:	1391803a 	cmpltu	r8,r2,r14
  80a0cc:	43d1883a 	add	r8,r8,r15
  80a0d0:	013fc004 	movi	r4,-256
  80a0d4:	111c703a 	and	r14,r2,r4
  80a0d8:	401f883a 	mov	r15,r8
  80a0dc:	003fe506 	br	80a074 <__divdf3+0x1d0>
  80a0e0:	8009883a 	mov	r4,r16
  80a0e4:	003f9206 	br	809f30 <__divdf3+0x8c>
  80a0e8:	9809883a 	mov	r4,r19
  80a0ec:	d8000715 	stw	zero,28(sp)
  80a0f0:	d8000815 	stw	zero,32(sp)
  80a0f4:	d8000615 	stw	zero,24(sp)
  80a0f8:	003f8d06 	br	809f30 <__divdf3+0x8c>

0080a0fc <__eqdf2>:
  80a0fc:	deffef04 	addi	sp,sp,-68
  80a100:	dc400f15 	stw	r17,60(sp)
  80a104:	dc400404 	addi	r17,sp,16
  80a108:	2005883a 	mov	r2,r4
  80a10c:	2807883a 	mov	r3,r5
  80a110:	dc000e15 	stw	r16,56(sp)
  80a114:	d809883a 	mov	r4,sp
  80a118:	880b883a 	mov	r5,r17
  80a11c:	dc000904 	addi	r16,sp,36
  80a120:	d8c00115 	stw	r3,4(sp)
  80a124:	d8800015 	stw	r2,0(sp)
  80a128:	d9800215 	stw	r6,8(sp)
  80a12c:	dfc01015 	stw	ra,64(sp)
  80a130:	d9c00315 	stw	r7,12(sp)
  80a134:	080a8ec0 	call	80a8ec <__unpack_d>
  80a138:	d9000204 	addi	r4,sp,8
  80a13c:	800b883a 	mov	r5,r16
  80a140:	080a8ec0 	call	80a8ec <__unpack_d>
  80a144:	d8800417 	ldw	r2,16(sp)
  80a148:	00c00044 	movi	r3,1
  80a14c:	180d883a 	mov	r6,r3
  80a150:	1880062e 	bgeu	r3,r2,80a16c <__eqdf2+0x70>
  80a154:	d8800917 	ldw	r2,36(sp)
  80a158:	8809883a 	mov	r4,r17
  80a15c:	800b883a 	mov	r5,r16
  80a160:	1880022e 	bgeu	r3,r2,80a16c <__eqdf2+0x70>
  80a164:	080aa240 	call	80aa24 <__fpcmp_parts_d>
  80a168:	100d883a 	mov	r6,r2
  80a16c:	3005883a 	mov	r2,r6
  80a170:	dfc01017 	ldw	ra,64(sp)
  80a174:	dc400f17 	ldw	r17,60(sp)
  80a178:	dc000e17 	ldw	r16,56(sp)
  80a17c:	dec01104 	addi	sp,sp,68
  80a180:	f800283a 	ret

0080a184 <__nedf2>:
  80a184:	deffef04 	addi	sp,sp,-68
  80a188:	dc400f15 	stw	r17,60(sp)
  80a18c:	dc400404 	addi	r17,sp,16
  80a190:	2005883a 	mov	r2,r4
  80a194:	2807883a 	mov	r3,r5
  80a198:	dc000e15 	stw	r16,56(sp)
  80a19c:	d809883a 	mov	r4,sp
  80a1a0:	880b883a 	mov	r5,r17
  80a1a4:	dc000904 	addi	r16,sp,36
  80a1a8:	d8c00115 	stw	r3,4(sp)
  80a1ac:	d8800015 	stw	r2,0(sp)
  80a1b0:	d9800215 	stw	r6,8(sp)
  80a1b4:	dfc01015 	stw	ra,64(sp)
  80a1b8:	d9c00315 	stw	r7,12(sp)
  80a1bc:	080a8ec0 	call	80a8ec <__unpack_d>
  80a1c0:	d9000204 	addi	r4,sp,8
  80a1c4:	800b883a 	mov	r5,r16
  80a1c8:	080a8ec0 	call	80a8ec <__unpack_d>
  80a1cc:	d8800417 	ldw	r2,16(sp)
  80a1d0:	00c00044 	movi	r3,1
  80a1d4:	180d883a 	mov	r6,r3
  80a1d8:	1880062e 	bgeu	r3,r2,80a1f4 <__nedf2+0x70>
  80a1dc:	d8800917 	ldw	r2,36(sp)
  80a1e0:	8809883a 	mov	r4,r17
  80a1e4:	800b883a 	mov	r5,r16
  80a1e8:	1880022e 	bgeu	r3,r2,80a1f4 <__nedf2+0x70>
  80a1ec:	080aa240 	call	80aa24 <__fpcmp_parts_d>
  80a1f0:	100d883a 	mov	r6,r2
  80a1f4:	3005883a 	mov	r2,r6
  80a1f8:	dfc01017 	ldw	ra,64(sp)
  80a1fc:	dc400f17 	ldw	r17,60(sp)
  80a200:	dc000e17 	ldw	r16,56(sp)
  80a204:	dec01104 	addi	sp,sp,68
  80a208:	f800283a 	ret

0080a20c <__gtdf2>:
  80a20c:	deffef04 	addi	sp,sp,-68
  80a210:	dc400f15 	stw	r17,60(sp)
  80a214:	dc400404 	addi	r17,sp,16
  80a218:	2005883a 	mov	r2,r4
  80a21c:	2807883a 	mov	r3,r5
  80a220:	dc000e15 	stw	r16,56(sp)
  80a224:	d809883a 	mov	r4,sp
  80a228:	880b883a 	mov	r5,r17
  80a22c:	dc000904 	addi	r16,sp,36
  80a230:	d8c00115 	stw	r3,4(sp)
  80a234:	d8800015 	stw	r2,0(sp)
  80a238:	d9800215 	stw	r6,8(sp)
  80a23c:	dfc01015 	stw	ra,64(sp)
  80a240:	d9c00315 	stw	r7,12(sp)
  80a244:	080a8ec0 	call	80a8ec <__unpack_d>
  80a248:	d9000204 	addi	r4,sp,8
  80a24c:	800b883a 	mov	r5,r16
  80a250:	080a8ec0 	call	80a8ec <__unpack_d>
  80a254:	d8800417 	ldw	r2,16(sp)
  80a258:	00c00044 	movi	r3,1
  80a25c:	01bfffc4 	movi	r6,-1
  80a260:	1880062e 	bgeu	r3,r2,80a27c <__gtdf2+0x70>
  80a264:	d8800917 	ldw	r2,36(sp)
  80a268:	8809883a 	mov	r4,r17
  80a26c:	800b883a 	mov	r5,r16
  80a270:	1880022e 	bgeu	r3,r2,80a27c <__gtdf2+0x70>
  80a274:	080aa240 	call	80aa24 <__fpcmp_parts_d>
  80a278:	100d883a 	mov	r6,r2
  80a27c:	3005883a 	mov	r2,r6
  80a280:	dfc01017 	ldw	ra,64(sp)
  80a284:	dc400f17 	ldw	r17,60(sp)
  80a288:	dc000e17 	ldw	r16,56(sp)
  80a28c:	dec01104 	addi	sp,sp,68
  80a290:	f800283a 	ret

0080a294 <__gedf2>:
  80a294:	deffef04 	addi	sp,sp,-68
  80a298:	dc400f15 	stw	r17,60(sp)
  80a29c:	dc400404 	addi	r17,sp,16
  80a2a0:	2005883a 	mov	r2,r4
  80a2a4:	2807883a 	mov	r3,r5
  80a2a8:	dc000e15 	stw	r16,56(sp)
  80a2ac:	d809883a 	mov	r4,sp
  80a2b0:	880b883a 	mov	r5,r17
  80a2b4:	dc000904 	addi	r16,sp,36
  80a2b8:	d8c00115 	stw	r3,4(sp)
  80a2bc:	d8800015 	stw	r2,0(sp)
  80a2c0:	d9800215 	stw	r6,8(sp)
  80a2c4:	dfc01015 	stw	ra,64(sp)
  80a2c8:	d9c00315 	stw	r7,12(sp)
  80a2cc:	080a8ec0 	call	80a8ec <__unpack_d>
  80a2d0:	d9000204 	addi	r4,sp,8
  80a2d4:	800b883a 	mov	r5,r16
  80a2d8:	080a8ec0 	call	80a8ec <__unpack_d>
  80a2dc:	d8800417 	ldw	r2,16(sp)
  80a2e0:	00c00044 	movi	r3,1
  80a2e4:	01bfffc4 	movi	r6,-1
  80a2e8:	1880062e 	bgeu	r3,r2,80a304 <__gedf2+0x70>
  80a2ec:	d8800917 	ldw	r2,36(sp)
  80a2f0:	8809883a 	mov	r4,r17
  80a2f4:	800b883a 	mov	r5,r16
  80a2f8:	1880022e 	bgeu	r3,r2,80a304 <__gedf2+0x70>
  80a2fc:	080aa240 	call	80aa24 <__fpcmp_parts_d>
  80a300:	100d883a 	mov	r6,r2
  80a304:	3005883a 	mov	r2,r6
  80a308:	dfc01017 	ldw	ra,64(sp)
  80a30c:	dc400f17 	ldw	r17,60(sp)
  80a310:	dc000e17 	ldw	r16,56(sp)
  80a314:	dec01104 	addi	sp,sp,68
  80a318:	f800283a 	ret

0080a31c <__ltdf2>:
  80a31c:	deffef04 	addi	sp,sp,-68
  80a320:	dc400f15 	stw	r17,60(sp)
  80a324:	dc400404 	addi	r17,sp,16
  80a328:	2005883a 	mov	r2,r4
  80a32c:	2807883a 	mov	r3,r5
  80a330:	dc000e15 	stw	r16,56(sp)
  80a334:	d809883a 	mov	r4,sp
  80a338:	880b883a 	mov	r5,r17
  80a33c:	dc000904 	addi	r16,sp,36
  80a340:	d8c00115 	stw	r3,4(sp)
  80a344:	d8800015 	stw	r2,0(sp)
  80a348:	d9800215 	stw	r6,8(sp)
  80a34c:	dfc01015 	stw	ra,64(sp)
  80a350:	d9c00315 	stw	r7,12(sp)
  80a354:	080a8ec0 	call	80a8ec <__unpack_d>
  80a358:	d9000204 	addi	r4,sp,8
  80a35c:	800b883a 	mov	r5,r16
  80a360:	080a8ec0 	call	80a8ec <__unpack_d>
  80a364:	d8800417 	ldw	r2,16(sp)
  80a368:	00c00044 	movi	r3,1
  80a36c:	180d883a 	mov	r6,r3
  80a370:	1880062e 	bgeu	r3,r2,80a38c <__ltdf2+0x70>
  80a374:	d8800917 	ldw	r2,36(sp)
  80a378:	8809883a 	mov	r4,r17
  80a37c:	800b883a 	mov	r5,r16
  80a380:	1880022e 	bgeu	r3,r2,80a38c <__ltdf2+0x70>
  80a384:	080aa240 	call	80aa24 <__fpcmp_parts_d>
  80a388:	100d883a 	mov	r6,r2
  80a38c:	3005883a 	mov	r2,r6
  80a390:	dfc01017 	ldw	ra,64(sp)
  80a394:	dc400f17 	ldw	r17,60(sp)
  80a398:	dc000e17 	ldw	r16,56(sp)
  80a39c:	dec01104 	addi	sp,sp,68
  80a3a0:	f800283a 	ret

0080a3a4 <__floatsidf>:
  80a3a4:	2006d7fa 	srli	r3,r4,31
  80a3a8:	defff604 	addi	sp,sp,-40
  80a3ac:	008000c4 	movi	r2,3
  80a3b0:	dfc00915 	stw	ra,36(sp)
  80a3b4:	dcc00815 	stw	r19,32(sp)
  80a3b8:	dc800715 	stw	r18,28(sp)
  80a3bc:	dc400615 	stw	r17,24(sp)
  80a3c0:	dc000515 	stw	r16,20(sp)
  80a3c4:	d8800015 	stw	r2,0(sp)
  80a3c8:	d8c00115 	stw	r3,4(sp)
  80a3cc:	20000f1e 	bne	r4,zero,80a40c <__floatsidf+0x68>
  80a3d0:	00800084 	movi	r2,2
  80a3d4:	d8800015 	stw	r2,0(sp)
  80a3d8:	d809883a 	mov	r4,sp
  80a3dc:	08014280 	call	801428 <__pack_d>
  80a3e0:	1009883a 	mov	r4,r2
  80a3e4:	180b883a 	mov	r5,r3
  80a3e8:	2005883a 	mov	r2,r4
  80a3ec:	2807883a 	mov	r3,r5
  80a3f0:	dfc00917 	ldw	ra,36(sp)
  80a3f4:	dcc00817 	ldw	r19,32(sp)
  80a3f8:	dc800717 	ldw	r18,28(sp)
  80a3fc:	dc400617 	ldw	r17,24(sp)
  80a400:	dc000517 	ldw	r16,20(sp)
  80a404:	dec00a04 	addi	sp,sp,40
  80a408:	f800283a 	ret
  80a40c:	00800f04 	movi	r2,60
  80a410:	1807003a 	cmpeq	r3,r3,zero
  80a414:	d8800215 	stw	r2,8(sp)
  80a418:	18001126 	beq	r3,zero,80a460 <__floatsidf+0xbc>
  80a41c:	0027883a 	mov	r19,zero
  80a420:	2025883a 	mov	r18,r4
  80a424:	d9000315 	stw	r4,12(sp)
  80a428:	dcc00415 	stw	r19,16(sp)
  80a42c:	08011800 	call	801180 <__clzsi2>
  80a430:	11000744 	addi	r4,r2,29
  80a434:	013fe80e 	bge	zero,r4,80a3d8 <__floatsidf+0x34>
  80a438:	10bfff44 	addi	r2,r2,-3
  80a43c:	10000c16 	blt	r2,zero,80a470 <__floatsidf+0xcc>
  80a440:	90a2983a 	sll	r17,r18,r2
  80a444:	0021883a 	mov	r16,zero
  80a448:	d8800217 	ldw	r2,8(sp)
  80a44c:	dc400415 	stw	r17,16(sp)
  80a450:	dc000315 	stw	r16,12(sp)
  80a454:	1105c83a 	sub	r2,r2,r4
  80a458:	d8800215 	stw	r2,8(sp)
  80a45c:	003fde06 	br	80a3d8 <__floatsidf+0x34>
  80a460:	00a00034 	movhi	r2,32768
  80a464:	20800a26 	beq	r4,r2,80a490 <__floatsidf+0xec>
  80a468:	0109c83a 	sub	r4,zero,r4
  80a46c:	003feb06 	br	80a41c <__floatsidf+0x78>
  80a470:	9006d07a 	srli	r3,r18,1
  80a474:	008007c4 	movi	r2,31
  80a478:	1105c83a 	sub	r2,r2,r4
  80a47c:	1886d83a 	srl	r3,r3,r2
  80a480:	9922983a 	sll	r17,r19,r4
  80a484:	9120983a 	sll	r16,r18,r4
  80a488:	1c62b03a 	or	r17,r3,r17
  80a48c:	003fee06 	br	80a448 <__floatsidf+0xa4>
  80a490:	0009883a 	mov	r4,zero
  80a494:	01707834 	movhi	r5,49632
  80a498:	003fd306 	br	80a3e8 <__floatsidf+0x44>

0080a49c <__fixdfsi>:
  80a49c:	defff804 	addi	sp,sp,-32
  80a4a0:	2005883a 	mov	r2,r4
  80a4a4:	2807883a 	mov	r3,r5
  80a4a8:	d809883a 	mov	r4,sp
  80a4ac:	d9400204 	addi	r5,sp,8
  80a4b0:	d8c00115 	stw	r3,4(sp)
  80a4b4:	d8800015 	stw	r2,0(sp)
  80a4b8:	dfc00715 	stw	ra,28(sp)
  80a4bc:	080a8ec0 	call	80a8ec <__unpack_d>
  80a4c0:	d8c00217 	ldw	r3,8(sp)
  80a4c4:	00800084 	movi	r2,2
  80a4c8:	1880051e 	bne	r3,r2,80a4e0 <__fixdfsi+0x44>
  80a4cc:	0007883a 	mov	r3,zero
  80a4d0:	1805883a 	mov	r2,r3
  80a4d4:	dfc00717 	ldw	ra,28(sp)
  80a4d8:	dec00804 	addi	sp,sp,32
  80a4dc:	f800283a 	ret
  80a4e0:	00800044 	movi	r2,1
  80a4e4:	10fff92e 	bgeu	r2,r3,80a4cc <__fixdfsi+0x30>
  80a4e8:	00800104 	movi	r2,4
  80a4ec:	18800426 	beq	r3,r2,80a500 <__fixdfsi+0x64>
  80a4f0:	d8c00417 	ldw	r3,16(sp)
  80a4f4:	183ff516 	blt	r3,zero,80a4cc <__fixdfsi+0x30>
  80a4f8:	00800784 	movi	r2,30
  80a4fc:	10c0080e 	bge	r2,r3,80a520 <__fixdfsi+0x84>
  80a500:	d8800317 	ldw	r2,12(sp)
  80a504:	1000121e 	bne	r2,zero,80a550 <__fixdfsi+0xb4>
  80a508:	00e00034 	movhi	r3,32768
  80a50c:	18ffffc4 	addi	r3,r3,-1
  80a510:	1805883a 	mov	r2,r3
  80a514:	dfc00717 	ldw	ra,28(sp)
  80a518:	dec00804 	addi	sp,sp,32
  80a51c:	f800283a 	ret
  80a520:	00800f04 	movi	r2,60
  80a524:	10d1c83a 	sub	r8,r2,r3
  80a528:	40bff804 	addi	r2,r8,-32
  80a52c:	d9800517 	ldw	r6,20(sp)
  80a530:	d9c00617 	ldw	r7,24(sp)
  80a534:	10000816 	blt	r2,zero,80a558 <__fixdfsi+0xbc>
  80a538:	3888d83a 	srl	r4,r7,r2
  80a53c:	d8800317 	ldw	r2,12(sp)
  80a540:	2007883a 	mov	r3,r4
  80a544:	103fe226 	beq	r2,zero,80a4d0 <__fixdfsi+0x34>
  80a548:	0107c83a 	sub	r3,zero,r4
  80a54c:	003fe006 	br	80a4d0 <__fixdfsi+0x34>
  80a550:	00e00034 	movhi	r3,32768
  80a554:	003fde06 	br	80a4d0 <__fixdfsi+0x34>
  80a558:	39c7883a 	add	r3,r7,r7
  80a55c:	008007c4 	movi	r2,31
  80a560:	1205c83a 	sub	r2,r2,r8
  80a564:	1886983a 	sll	r3,r3,r2
  80a568:	3208d83a 	srl	r4,r6,r8
  80a56c:	1908b03a 	or	r4,r3,r4
  80a570:	003ff206 	br	80a53c <__fixdfsi+0xa0>

0080a574 <__floatunsidf>:
  80a574:	defff204 	addi	sp,sp,-56
  80a578:	dfc00d15 	stw	ra,52(sp)
  80a57c:	ddc00c15 	stw	r23,48(sp)
  80a580:	dd800b15 	stw	r22,44(sp)
  80a584:	dd400a15 	stw	r21,40(sp)
  80a588:	dd000915 	stw	r20,36(sp)
  80a58c:	dcc00815 	stw	r19,32(sp)
  80a590:	dc800715 	stw	r18,28(sp)
  80a594:	dc400615 	stw	r17,24(sp)
  80a598:	dc000515 	stw	r16,20(sp)
  80a59c:	d8000115 	stw	zero,4(sp)
  80a5a0:	20000f1e 	bne	r4,zero,80a5e0 <__floatunsidf+0x6c>
  80a5a4:	00800084 	movi	r2,2
  80a5a8:	d8800015 	stw	r2,0(sp)
  80a5ac:	d809883a 	mov	r4,sp
  80a5b0:	08014280 	call	801428 <__pack_d>
  80a5b4:	dfc00d17 	ldw	ra,52(sp)
  80a5b8:	ddc00c17 	ldw	r23,48(sp)
  80a5bc:	dd800b17 	ldw	r22,44(sp)
  80a5c0:	dd400a17 	ldw	r21,40(sp)
  80a5c4:	dd000917 	ldw	r20,36(sp)
  80a5c8:	dcc00817 	ldw	r19,32(sp)
  80a5cc:	dc800717 	ldw	r18,28(sp)
  80a5d0:	dc400617 	ldw	r17,24(sp)
  80a5d4:	dc000517 	ldw	r16,20(sp)
  80a5d8:	dec00e04 	addi	sp,sp,56
  80a5dc:	f800283a 	ret
  80a5e0:	008000c4 	movi	r2,3
  80a5e4:	00c00f04 	movi	r3,60
  80a5e8:	002f883a 	mov	r23,zero
  80a5ec:	202d883a 	mov	r22,r4
  80a5f0:	d8800015 	stw	r2,0(sp)
  80a5f4:	d8c00215 	stw	r3,8(sp)
  80a5f8:	d9000315 	stw	r4,12(sp)
  80a5fc:	ddc00415 	stw	r23,16(sp)
  80a600:	08011800 	call	801180 <__clzsi2>
  80a604:	12400744 	addi	r9,r2,29
  80a608:	48000b16 	blt	r9,zero,80a638 <__floatunsidf+0xc4>
  80a60c:	483fe726 	beq	r9,zero,80a5ac <__floatunsidf+0x38>
  80a610:	10bfff44 	addi	r2,r2,-3
  80a614:	10002e16 	blt	r2,zero,80a6d0 <__floatunsidf+0x15c>
  80a618:	b0a2983a 	sll	r17,r22,r2
  80a61c:	0021883a 	mov	r16,zero
  80a620:	d8800217 	ldw	r2,8(sp)
  80a624:	dc400415 	stw	r17,16(sp)
  80a628:	dc000315 	stw	r16,12(sp)
  80a62c:	1245c83a 	sub	r2,r2,r9
  80a630:	d8800215 	stw	r2,8(sp)
  80a634:	003fdd06 	br	80a5ac <__floatunsidf+0x38>
  80a638:	0255c83a 	sub	r10,zero,r9
  80a63c:	51bff804 	addi	r6,r10,-32
  80a640:	30001b16 	blt	r6,zero,80a6b0 <__floatunsidf+0x13c>
  80a644:	b9a8d83a 	srl	r20,r23,r6
  80a648:	002b883a 	mov	r21,zero
  80a64c:	000f883a 	mov	r7,zero
  80a650:	01000044 	movi	r4,1
  80a654:	0011883a 	mov	r8,zero
  80a658:	30002516 	blt	r6,zero,80a6f0 <__floatunsidf+0x17c>
  80a65c:	21a6983a 	sll	r19,r4,r6
  80a660:	0025883a 	mov	r18,zero
  80a664:	00bfffc4 	movi	r2,-1
  80a668:	9089883a 	add	r4,r18,r2
  80a66c:	988b883a 	add	r5,r19,r2
  80a670:	248d803a 	cmpltu	r6,r4,r18
  80a674:	314b883a 	add	r5,r6,r5
  80a678:	b104703a 	and	r2,r22,r4
  80a67c:	b946703a 	and	r3,r23,r5
  80a680:	10c4b03a 	or	r2,r2,r3
  80a684:	10000226 	beq	r2,zero,80a690 <__floatunsidf+0x11c>
  80a688:	01c00044 	movi	r7,1
  80a68c:	0011883a 	mov	r8,zero
  80a690:	d9000217 	ldw	r4,8(sp)
  80a694:	a1c4b03a 	or	r2,r20,r7
  80a698:	aa06b03a 	or	r3,r21,r8
  80a69c:	2249c83a 	sub	r4,r4,r9
  80a6a0:	d8c00415 	stw	r3,16(sp)
  80a6a4:	d9000215 	stw	r4,8(sp)
  80a6a8:	d8800315 	stw	r2,12(sp)
  80a6ac:	003fbf06 	br	80a5ac <__floatunsidf+0x38>
  80a6b0:	bdc7883a 	add	r3,r23,r23
  80a6b4:	008007c4 	movi	r2,31
  80a6b8:	1285c83a 	sub	r2,r2,r10
  80a6bc:	1886983a 	sll	r3,r3,r2
  80a6c0:	b2a8d83a 	srl	r20,r22,r10
  80a6c4:	baaad83a 	srl	r21,r23,r10
  80a6c8:	1d28b03a 	or	r20,r3,r20
  80a6cc:	003fdf06 	br	80a64c <__floatunsidf+0xd8>
  80a6d0:	b006d07a 	srli	r3,r22,1
  80a6d4:	008007c4 	movi	r2,31
  80a6d8:	1245c83a 	sub	r2,r2,r9
  80a6dc:	1886d83a 	srl	r3,r3,r2
  80a6e0:	ba62983a 	sll	r17,r23,r9
  80a6e4:	b260983a 	sll	r16,r22,r9
  80a6e8:	1c62b03a 	or	r17,r3,r17
  80a6ec:	003fcc06 	br	80a620 <__floatunsidf+0xac>
  80a6f0:	2006d07a 	srli	r3,r4,1
  80a6f4:	008007c4 	movi	r2,31
  80a6f8:	1285c83a 	sub	r2,r2,r10
  80a6fc:	18a6d83a 	srl	r19,r3,r2
  80a700:	22a4983a 	sll	r18,r4,r10
  80a704:	003fd706 	br	80a664 <__floatunsidf+0xf0>

0080a708 <udivmodsi4>:
  80a708:	29001b2e 	bgeu	r5,r4,80a778 <udivmodsi4+0x70>
  80a70c:	28001a16 	blt	r5,zero,80a778 <udivmodsi4+0x70>
  80a710:	00800044 	movi	r2,1
  80a714:	0007883a 	mov	r3,zero
  80a718:	01c007c4 	movi	r7,31
  80a71c:	00000306 	br	80a72c <udivmodsi4+0x24>
  80a720:	19c01326 	beq	r3,r7,80a770 <udivmodsi4+0x68>
  80a724:	18c00044 	addi	r3,r3,1
  80a728:	28000416 	blt	r5,zero,80a73c <udivmodsi4+0x34>
  80a72c:	294b883a 	add	r5,r5,r5
  80a730:	1085883a 	add	r2,r2,r2
  80a734:	293ffa36 	bltu	r5,r4,80a720 <udivmodsi4+0x18>
  80a738:	10000d26 	beq	r2,zero,80a770 <udivmodsi4+0x68>
  80a73c:	0007883a 	mov	r3,zero
  80a740:	21400236 	bltu	r4,r5,80a74c <udivmodsi4+0x44>
  80a744:	2149c83a 	sub	r4,r4,r5
  80a748:	1886b03a 	or	r3,r3,r2
  80a74c:	1004d07a 	srli	r2,r2,1
  80a750:	280ad07a 	srli	r5,r5,1
  80a754:	103ffa1e 	bne	r2,zero,80a740 <udivmodsi4+0x38>
  80a758:	30000226 	beq	r6,zero,80a764 <udivmodsi4+0x5c>
  80a75c:	2005883a 	mov	r2,r4
  80a760:	f800283a 	ret
  80a764:	1809883a 	mov	r4,r3
  80a768:	2005883a 	mov	r2,r4
  80a76c:	f800283a 	ret
  80a770:	0007883a 	mov	r3,zero
  80a774:	003ff806 	br	80a758 <udivmodsi4+0x50>
  80a778:	00800044 	movi	r2,1
  80a77c:	0007883a 	mov	r3,zero
  80a780:	003fef06 	br	80a740 <udivmodsi4+0x38>

0080a784 <__divsi3>:
  80a784:	defffe04 	addi	sp,sp,-8
  80a788:	dc000015 	stw	r16,0(sp)
  80a78c:	dfc00115 	stw	ra,4(sp)
  80a790:	0021883a 	mov	r16,zero
  80a794:	20000c16 	blt	r4,zero,80a7c8 <__divsi3+0x44>
  80a798:	000d883a 	mov	r6,zero
  80a79c:	28000e16 	blt	r5,zero,80a7d8 <__divsi3+0x54>
  80a7a0:	080a7080 	call	80a708 <udivmodsi4>
  80a7a4:	1007883a 	mov	r3,r2
  80a7a8:	8005003a 	cmpeq	r2,r16,zero
  80a7ac:	1000011e 	bne	r2,zero,80a7b4 <__divsi3+0x30>
  80a7b0:	00c7c83a 	sub	r3,zero,r3
  80a7b4:	1805883a 	mov	r2,r3
  80a7b8:	dfc00117 	ldw	ra,4(sp)
  80a7bc:	dc000017 	ldw	r16,0(sp)
  80a7c0:	dec00204 	addi	sp,sp,8
  80a7c4:	f800283a 	ret
  80a7c8:	0109c83a 	sub	r4,zero,r4
  80a7cc:	04000044 	movi	r16,1
  80a7d0:	000d883a 	mov	r6,zero
  80a7d4:	283ff20e 	bge	r5,zero,80a7a0 <__divsi3+0x1c>
  80a7d8:	014bc83a 	sub	r5,zero,r5
  80a7dc:	8021003a 	cmpeq	r16,r16,zero
  80a7e0:	003fef06 	br	80a7a0 <__divsi3+0x1c>

0080a7e4 <__modsi3>:
  80a7e4:	deffff04 	addi	sp,sp,-4
  80a7e8:	dfc00015 	stw	ra,0(sp)
  80a7ec:	01800044 	movi	r6,1
  80a7f0:	2807883a 	mov	r3,r5
  80a7f4:	20000416 	blt	r4,zero,80a808 <__modsi3+0x24>
  80a7f8:	28000c16 	blt	r5,zero,80a82c <__modsi3+0x48>
  80a7fc:	dfc00017 	ldw	ra,0(sp)
  80a800:	dec00104 	addi	sp,sp,4
  80a804:	080a7081 	jmpi	80a708 <udivmodsi4>
  80a808:	0109c83a 	sub	r4,zero,r4
  80a80c:	28000b16 	blt	r5,zero,80a83c <__modsi3+0x58>
  80a810:	180b883a 	mov	r5,r3
  80a814:	01800044 	movi	r6,1
  80a818:	080a7080 	call	80a708 <udivmodsi4>
  80a81c:	0085c83a 	sub	r2,zero,r2
  80a820:	dfc00017 	ldw	ra,0(sp)
  80a824:	dec00104 	addi	sp,sp,4
  80a828:	f800283a 	ret
  80a82c:	014bc83a 	sub	r5,zero,r5
  80a830:	dfc00017 	ldw	ra,0(sp)
  80a834:	dec00104 	addi	sp,sp,4
  80a838:	080a7081 	jmpi	80a708 <udivmodsi4>
  80a83c:	0147c83a 	sub	r3,zero,r5
  80a840:	003ff306 	br	80a810 <__modsi3+0x2c>

0080a844 <__udivsi3>:
  80a844:	000d883a 	mov	r6,zero
  80a848:	080a7081 	jmpi	80a708 <udivmodsi4>

0080a84c <__umodsi3>:
  80a84c:	01800044 	movi	r6,1
  80a850:	080a7081 	jmpi	80a708 <udivmodsi4>

0080a854 <__muldi3>:
  80a854:	2011883a 	mov	r8,r4
  80a858:	427fffcc 	andi	r9,r8,65535
  80a85c:	4018d43a 	srli	r12,r8,16
  80a860:	32bfffcc 	andi	r10,r6,65535
  80a864:	3016d43a 	srli	r11,r6,16
  80a868:	4a85383a 	mul	r2,r9,r10
  80a86c:	6295383a 	mul	r10,r12,r10
  80a870:	4ad3383a 	mul	r9,r9,r11
  80a874:	113fffcc 	andi	r4,r2,65535
  80a878:	1004d43a 	srli	r2,r2,16
  80a87c:	4a93883a 	add	r9,r9,r10
  80a880:	3807883a 	mov	r3,r7
  80a884:	1245883a 	add	r2,r2,r9
  80a888:	280f883a 	mov	r7,r5
  80a88c:	180b883a 	mov	r5,r3
  80a890:	1006943a 	slli	r3,r2,16
  80a894:	defffd04 	addi	sp,sp,-12
  80a898:	dc800215 	stw	r18,8(sp)
  80a89c:	1907883a 	add	r3,r3,r4
  80a8a0:	dc400115 	stw	r17,4(sp)
  80a8a4:	dc000015 	stw	r16,0(sp)
  80a8a8:	4165383a 	mul	r18,r8,r5
  80a8ac:	31e3383a 	mul	r17,r6,r7
  80a8b0:	1012d43a 	srli	r9,r2,16
  80a8b4:	62d9383a 	mul	r12,r12,r11
  80a8b8:	181f883a 	mov	r15,r3
  80a8bc:	1280022e 	bgeu	r2,r10,80a8c8 <__muldi3+0x74>
  80a8c0:	00800074 	movhi	r2,1
  80a8c4:	6099883a 	add	r12,r12,r2
  80a8c8:	624d883a 	add	r6,r12,r9
  80a8cc:	9187883a 	add	r3,r18,r6
  80a8d0:	88c7883a 	add	r3,r17,r3
  80a8d4:	7805883a 	mov	r2,r15
  80a8d8:	dc800217 	ldw	r18,8(sp)
  80a8dc:	dc400117 	ldw	r17,4(sp)
  80a8e0:	dc000017 	ldw	r16,0(sp)
  80a8e4:	dec00304 	addi	sp,sp,12
  80a8e8:	f800283a 	ret

0080a8ec <__unpack_d>:
  80a8ec:	20c00117 	ldw	r3,4(r4)
  80a8f0:	22400017 	ldw	r9,0(r4)
  80a8f4:	00800434 	movhi	r2,16
  80a8f8:	10bfffc4 	addi	r2,r2,-1
  80a8fc:	1808d53a 	srli	r4,r3,20
  80a900:	180cd7fa 	srli	r6,r3,31
  80a904:	1894703a 	and	r10,r3,r2
  80a908:	2201ffcc 	andi	r8,r4,2047
  80a90c:	281b883a 	mov	r13,r5
  80a910:	4817883a 	mov	r11,r9
  80a914:	29800115 	stw	r6,4(r5)
  80a918:	5019883a 	mov	r12,r10
  80a91c:	40001e1e 	bne	r8,zero,80a998 <__unpack_d+0xac>
  80a920:	4a84b03a 	or	r2,r9,r10
  80a924:	10001926 	beq	r2,zero,80a98c <__unpack_d+0xa0>
  80a928:	4804d63a 	srli	r2,r9,24
  80a92c:	500c923a 	slli	r6,r10,8
  80a930:	013f0084 	movi	r4,-1022
  80a934:	00c40034 	movhi	r3,4096
  80a938:	18ffffc4 	addi	r3,r3,-1
  80a93c:	118cb03a 	or	r6,r2,r6
  80a940:	008000c4 	movi	r2,3
  80a944:	480a923a 	slli	r5,r9,8
  80a948:	68800015 	stw	r2,0(r13)
  80a94c:	69000215 	stw	r4,8(r13)
  80a950:	19800b36 	bltu	r3,r6,80a980 <__unpack_d+0x94>
  80a954:	200f883a 	mov	r7,r4
  80a958:	1811883a 	mov	r8,r3
  80a95c:	2945883a 	add	r2,r5,r5
  80a960:	1149803a 	cmpltu	r4,r2,r5
  80a964:	3187883a 	add	r3,r6,r6
  80a968:	20c9883a 	add	r4,r4,r3
  80a96c:	100b883a 	mov	r5,r2
  80a970:	200d883a 	mov	r6,r4
  80a974:	39ffffc4 	addi	r7,r7,-1
  80a978:	413ff82e 	bgeu	r8,r4,80a95c <__unpack_d+0x70>
  80a97c:	69c00215 	stw	r7,8(r13)
  80a980:	69800415 	stw	r6,16(r13)
  80a984:	69400315 	stw	r5,12(r13)
  80a988:	f800283a 	ret
  80a98c:	00800084 	movi	r2,2
  80a990:	28800015 	stw	r2,0(r5)
  80a994:	f800283a 	ret
  80a998:	0081ffc4 	movi	r2,2047
  80a99c:	40800f26 	beq	r8,r2,80a9dc <__unpack_d+0xf0>
  80a9a0:	480cd63a 	srli	r6,r9,24
  80a9a4:	5006923a 	slli	r3,r10,8
  80a9a8:	4804923a 	slli	r2,r9,8
  80a9ac:	0009883a 	mov	r4,zero
  80a9b0:	30c6b03a 	or	r3,r6,r3
  80a9b4:	01440034 	movhi	r5,4096
  80a9b8:	110cb03a 	or	r6,r2,r4
  80a9bc:	423f0044 	addi	r8,r8,-1023
  80a9c0:	194eb03a 	or	r7,r3,r5
  80a9c4:	008000c4 	movi	r2,3
  80a9c8:	69c00415 	stw	r7,16(r13)
  80a9cc:	6a000215 	stw	r8,8(r13)
  80a9d0:	68800015 	stw	r2,0(r13)
  80a9d4:	69800315 	stw	r6,12(r13)
  80a9d8:	f800283a 	ret
  80a9dc:	4a84b03a 	or	r2,r9,r10
  80a9e0:	1000031e 	bne	r2,zero,80a9f0 <__unpack_d+0x104>
  80a9e4:	00800104 	movi	r2,4
  80a9e8:	28800015 	stw	r2,0(r5)
  80a9ec:	f800283a 	ret
  80a9f0:	0009883a 	mov	r4,zero
  80a9f4:	01400234 	movhi	r5,8
  80a9f8:	4904703a 	and	r2,r9,r4
  80a9fc:	5146703a 	and	r3,r10,r5
  80aa00:	10c4b03a 	or	r2,r2,r3
  80aa04:	10000526 	beq	r2,zero,80aa1c <__unpack_d+0x130>
  80aa08:	00800044 	movi	r2,1
  80aa0c:	68800015 	stw	r2,0(r13)
  80aa10:	6b000415 	stw	r12,16(r13)
  80aa14:	6ac00315 	stw	r11,12(r13)
  80aa18:	f800283a 	ret
  80aa1c:	68000015 	stw	zero,0(r13)
  80aa20:	003ffb06 	br	80aa10 <__unpack_d+0x124>

0080aa24 <__fpcmp_parts_d>:
  80aa24:	21800017 	ldw	r6,0(r4)
  80aa28:	00c00044 	movi	r3,1
  80aa2c:	19800a2e 	bgeu	r3,r6,80aa58 <__fpcmp_parts_d+0x34>
  80aa30:	28800017 	ldw	r2,0(r5)
  80aa34:	1880082e 	bgeu	r3,r2,80aa58 <__fpcmp_parts_d+0x34>
  80aa38:	00c00104 	movi	r3,4
  80aa3c:	30c02626 	beq	r6,r3,80aad8 <__fpcmp_parts_d+0xb4>
  80aa40:	10c02226 	beq	r2,r3,80aacc <__fpcmp_parts_d+0xa8>
  80aa44:	00c00084 	movi	r3,2
  80aa48:	30c00526 	beq	r6,r3,80aa60 <__fpcmp_parts_d+0x3c>
  80aa4c:	10c0071e 	bne	r2,r3,80aa6c <__fpcmp_parts_d+0x48>
  80aa50:	20800117 	ldw	r2,4(r4)
  80aa54:	1000091e 	bne	r2,zero,80aa7c <__fpcmp_parts_d+0x58>
  80aa58:	00800044 	movi	r2,1
  80aa5c:	f800283a 	ret
  80aa60:	10c01a1e 	bne	r2,r3,80aacc <__fpcmp_parts_d+0xa8>
  80aa64:	0005883a 	mov	r2,zero
  80aa68:	f800283a 	ret
  80aa6c:	22000117 	ldw	r8,4(r4)
  80aa70:	28800117 	ldw	r2,4(r5)
  80aa74:	40800326 	beq	r8,r2,80aa84 <__fpcmp_parts_d+0x60>
  80aa78:	403ff726 	beq	r8,zero,80aa58 <__fpcmp_parts_d+0x34>
  80aa7c:	00bfffc4 	movi	r2,-1
  80aa80:	f800283a 	ret
  80aa84:	20c00217 	ldw	r3,8(r4)
  80aa88:	28800217 	ldw	r2,8(r5)
  80aa8c:	10fffa16 	blt	r2,r3,80aa78 <__fpcmp_parts_d+0x54>
  80aa90:	18800916 	blt	r3,r2,80aab8 <__fpcmp_parts_d+0x94>
  80aa94:	21c00417 	ldw	r7,16(r4)
  80aa98:	28c00417 	ldw	r3,16(r5)
  80aa9c:	21800317 	ldw	r6,12(r4)
  80aaa0:	28800317 	ldw	r2,12(r5)
  80aaa4:	19fff436 	bltu	r3,r7,80aa78 <__fpcmp_parts_d+0x54>
  80aaa8:	38c00526 	beq	r7,r3,80aac0 <__fpcmp_parts_d+0x9c>
  80aaac:	38c00236 	bltu	r7,r3,80aab8 <__fpcmp_parts_d+0x94>
  80aab0:	19ffec1e 	bne	r3,r7,80aa64 <__fpcmp_parts_d+0x40>
  80aab4:	30bfeb2e 	bgeu	r6,r2,80aa64 <__fpcmp_parts_d+0x40>
  80aab8:	403fe71e 	bne	r8,zero,80aa58 <__fpcmp_parts_d+0x34>
  80aabc:	003fef06 	br	80aa7c <__fpcmp_parts_d+0x58>
  80aac0:	11bffa2e 	bgeu	r2,r6,80aaac <__fpcmp_parts_d+0x88>
  80aac4:	403fe426 	beq	r8,zero,80aa58 <__fpcmp_parts_d+0x34>
  80aac8:	003fec06 	br	80aa7c <__fpcmp_parts_d+0x58>
  80aacc:	28800117 	ldw	r2,4(r5)
  80aad0:	103fe11e 	bne	r2,zero,80aa58 <__fpcmp_parts_d+0x34>
  80aad4:	003fe906 	br	80aa7c <__fpcmp_parts_d+0x58>
  80aad8:	11bfdd1e 	bne	r2,r6,80aa50 <__fpcmp_parts_d+0x2c>
  80aadc:	28c00117 	ldw	r3,4(r5)
  80aae0:	20800117 	ldw	r2,4(r4)
  80aae4:	1885c83a 	sub	r2,r3,r2
  80aae8:	f800283a 	ret

0080aaec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80aaec:	defff804 	addi	sp,sp,-32
  80aaf0:	dfc00715 	stw	ra,28(sp)
  80aaf4:	df000615 	stw	fp,24(sp)
  80aaf8:	df000604 	addi	fp,sp,24
  80aafc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80ab00:	e0bffc17 	ldw	r2,-16(fp)
  80ab04:	1004803a 	cmplt	r2,r2,zero
  80ab08:	1000081e 	bne	r2,zero,80ab2c <close+0x40>
  80ab0c:	e0bffc17 	ldw	r2,-16(fp)
  80ab10:	10800324 	muli	r2,r2,12
  80ab14:	1007883a 	mov	r3,r2
  80ab18:	00802074 	movhi	r2,129
  80ab1c:	10821d04 	addi	r2,r2,2164
  80ab20:	1887883a 	add	r3,r3,r2
  80ab24:	e0ffff15 	stw	r3,-4(fp)
  80ab28:	00000106 	br	80ab30 <close+0x44>
  80ab2c:	e03fff15 	stw	zero,-4(fp)
  80ab30:	e0bfff17 	ldw	r2,-4(fp)
  80ab34:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80ab38:	e0bffb17 	ldw	r2,-20(fp)
  80ab3c:	1005003a 	cmpeq	r2,r2,zero
  80ab40:	10001d1e 	bne	r2,zero,80abb8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80ab44:	e0bffb17 	ldw	r2,-20(fp)
  80ab48:	10800017 	ldw	r2,0(r2)
  80ab4c:	10800417 	ldw	r2,16(r2)
  80ab50:	1005003a 	cmpeq	r2,r2,zero
  80ab54:	1000071e 	bne	r2,zero,80ab74 <close+0x88>
  80ab58:	e0bffb17 	ldw	r2,-20(fp)
  80ab5c:	10800017 	ldw	r2,0(r2)
  80ab60:	10800417 	ldw	r2,16(r2)
  80ab64:	e13ffb17 	ldw	r4,-20(fp)
  80ab68:	103ee83a 	callr	r2
  80ab6c:	e0bffe15 	stw	r2,-8(fp)
  80ab70:	00000106 	br	80ab78 <close+0x8c>
  80ab74:	e03ffe15 	stw	zero,-8(fp)
  80ab78:	e0bffe17 	ldw	r2,-8(fp)
  80ab7c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80ab80:	e13ffc17 	ldw	r4,-16(fp)
  80ab84:	080b3300 	call	80b330 <alt_release_fd>
    if (rval < 0)
  80ab88:	e0bffa17 	ldw	r2,-24(fp)
  80ab8c:	1004403a 	cmpge	r2,r2,zero
  80ab90:	1000071e 	bne	r2,zero,80abb0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80ab94:	080abe80 	call	80abe8 <alt_get_errno>
  80ab98:	e0fffa17 	ldw	r3,-24(fp)
  80ab9c:	00c7c83a 	sub	r3,zero,r3
  80aba0:	10c00015 	stw	r3,0(r2)
      return -1;
  80aba4:	00bfffc4 	movi	r2,-1
  80aba8:	e0bffd15 	stw	r2,-12(fp)
  80abac:	00000806 	br	80abd0 <close+0xe4>
    }
    return 0;
  80abb0:	e03ffd15 	stw	zero,-12(fp)
  80abb4:	00000606 	br	80abd0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80abb8:	080abe80 	call	80abe8 <alt_get_errno>
  80abbc:	1007883a 	mov	r3,r2
  80abc0:	00801444 	movi	r2,81
  80abc4:	18800015 	stw	r2,0(r3)
    return -1;
  80abc8:	00bfffc4 	movi	r2,-1
  80abcc:	e0bffd15 	stw	r2,-12(fp)
  80abd0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80abd4:	e037883a 	mov	sp,fp
  80abd8:	dfc00117 	ldw	ra,4(sp)
  80abdc:	df000017 	ldw	fp,0(sp)
  80abe0:	dec00204 	addi	sp,sp,8
  80abe4:	f800283a 	ret

0080abe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80abe8:	defffd04 	addi	sp,sp,-12
  80abec:	dfc00215 	stw	ra,8(sp)
  80abf0:	df000115 	stw	fp,4(sp)
  80abf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80abf8:	00802074 	movhi	r2,129
  80abfc:	1086d204 	addi	r2,r2,6984
  80ac00:	10800017 	ldw	r2,0(r2)
  80ac04:	1005003a 	cmpeq	r2,r2,zero
  80ac08:	1000061e 	bne	r2,zero,80ac24 <alt_get_errno+0x3c>
  80ac0c:	00802074 	movhi	r2,129
  80ac10:	1086d204 	addi	r2,r2,6984
  80ac14:	10800017 	ldw	r2,0(r2)
  80ac18:	103ee83a 	callr	r2
  80ac1c:	e0bfff15 	stw	r2,-4(fp)
  80ac20:	00000306 	br	80ac30 <alt_get_errno+0x48>
  80ac24:	00802074 	movhi	r2,129
  80ac28:	108da604 	addi	r2,r2,13976
  80ac2c:	e0bfff15 	stw	r2,-4(fp)
  80ac30:	e0bfff17 	ldw	r2,-4(fp)
}
  80ac34:	e037883a 	mov	sp,fp
  80ac38:	dfc00117 	ldw	ra,4(sp)
  80ac3c:	df000017 	ldw	fp,0(sp)
  80ac40:	dec00204 	addi	sp,sp,8
  80ac44:	f800283a 	ret

0080ac48 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ac48:	defffc04 	addi	sp,sp,-16
  80ac4c:	df000315 	stw	fp,12(sp)
  80ac50:	df000304 	addi	fp,sp,12
  80ac54:	e13ffd15 	stw	r4,-12(fp)
  80ac58:	e17ffe15 	stw	r5,-8(fp)
  80ac5c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ac60:	e0bfff17 	ldw	r2,-4(fp)
}
  80ac64:	e037883a 	mov	sp,fp
  80ac68:	df000017 	ldw	fp,0(sp)
  80ac6c:	dec00104 	addi	sp,sp,4
  80ac70:	f800283a 	ret

0080ac74 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ac74:	defff904 	addi	sp,sp,-28
  80ac78:	dfc00615 	stw	ra,24(sp)
  80ac7c:	df000515 	stw	fp,20(sp)
  80ac80:	df000504 	addi	fp,sp,20
  80ac84:	e13ffc15 	stw	r4,-16(fp)
  80ac88:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ac8c:	e0bffc17 	ldw	r2,-16(fp)
  80ac90:	1004803a 	cmplt	r2,r2,zero
  80ac94:	1000081e 	bne	r2,zero,80acb8 <fstat+0x44>
  80ac98:	e0bffc17 	ldw	r2,-16(fp)
  80ac9c:	10800324 	muli	r2,r2,12
  80aca0:	1007883a 	mov	r3,r2
  80aca4:	00802074 	movhi	r2,129
  80aca8:	10821d04 	addi	r2,r2,2164
  80acac:	1887883a 	add	r3,r3,r2
  80acb0:	e0ffff15 	stw	r3,-4(fp)
  80acb4:	00000106 	br	80acbc <fstat+0x48>
  80acb8:	e03fff15 	stw	zero,-4(fp)
  80acbc:	e0bfff17 	ldw	r2,-4(fp)
  80acc0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80acc4:	e0bffb17 	ldw	r2,-20(fp)
  80acc8:	1005003a 	cmpeq	r2,r2,zero
  80accc:	1000121e 	bne	r2,zero,80ad18 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80acd0:	e0bffb17 	ldw	r2,-20(fp)
  80acd4:	10800017 	ldw	r2,0(r2)
  80acd8:	10800817 	ldw	r2,32(r2)
  80acdc:	1005003a 	cmpeq	r2,r2,zero
  80ace0:	1000081e 	bne	r2,zero,80ad04 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80ace4:	e0bffb17 	ldw	r2,-20(fp)
  80ace8:	10800017 	ldw	r2,0(r2)
  80acec:	10800817 	ldw	r2,32(r2)
  80acf0:	e13ffb17 	ldw	r4,-20(fp)
  80acf4:	e17ffd17 	ldw	r5,-12(fp)
  80acf8:	103ee83a 	callr	r2
  80acfc:	e0bffe15 	stw	r2,-8(fp)
  80ad00:	00000b06 	br	80ad30 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ad04:	e0fffd17 	ldw	r3,-12(fp)
  80ad08:	00880004 	movi	r2,8192
  80ad0c:	18800115 	stw	r2,4(r3)
      return 0;
  80ad10:	e03ffe15 	stw	zero,-8(fp)
  80ad14:	00000606 	br	80ad30 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ad18:	080ad480 	call	80ad48 <alt_get_errno>
  80ad1c:	1007883a 	mov	r3,r2
  80ad20:	00801444 	movi	r2,81
  80ad24:	18800015 	stw	r2,0(r3)
    return -1;
  80ad28:	00bfffc4 	movi	r2,-1
  80ad2c:	e0bffe15 	stw	r2,-8(fp)
  80ad30:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80ad34:	e037883a 	mov	sp,fp
  80ad38:	dfc00117 	ldw	ra,4(sp)
  80ad3c:	df000017 	ldw	fp,0(sp)
  80ad40:	dec00204 	addi	sp,sp,8
  80ad44:	f800283a 	ret

0080ad48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ad48:	defffd04 	addi	sp,sp,-12
  80ad4c:	dfc00215 	stw	ra,8(sp)
  80ad50:	df000115 	stw	fp,4(sp)
  80ad54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ad58:	00802074 	movhi	r2,129
  80ad5c:	1086d204 	addi	r2,r2,6984
  80ad60:	10800017 	ldw	r2,0(r2)
  80ad64:	1005003a 	cmpeq	r2,r2,zero
  80ad68:	1000061e 	bne	r2,zero,80ad84 <alt_get_errno+0x3c>
  80ad6c:	00802074 	movhi	r2,129
  80ad70:	1086d204 	addi	r2,r2,6984
  80ad74:	10800017 	ldw	r2,0(r2)
  80ad78:	103ee83a 	callr	r2
  80ad7c:	e0bfff15 	stw	r2,-4(fp)
  80ad80:	00000306 	br	80ad90 <alt_get_errno+0x48>
  80ad84:	00802074 	movhi	r2,129
  80ad88:	108da604 	addi	r2,r2,13976
  80ad8c:	e0bfff15 	stw	r2,-4(fp)
  80ad90:	e0bfff17 	ldw	r2,-4(fp)
}
  80ad94:	e037883a 	mov	sp,fp
  80ad98:	dfc00117 	ldw	ra,4(sp)
  80ad9c:	df000017 	ldw	fp,0(sp)
  80ada0:	dec00204 	addi	sp,sp,8
  80ada4:	f800283a 	ret

0080ada8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80ada8:	deffeb04 	addi	sp,sp,-84
  80adac:	dfc01415 	stw	ra,80(sp)
  80adb0:	df001315 	stw	fp,76(sp)
  80adb4:	df001304 	addi	fp,sp,76
  80adb8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80adbc:	e0bffd17 	ldw	r2,-12(fp)
  80adc0:	1004803a 	cmplt	r2,r2,zero
  80adc4:	1000081e 	bne	r2,zero,80ade8 <isatty+0x40>
  80adc8:	e0bffd17 	ldw	r2,-12(fp)
  80adcc:	10800324 	muli	r2,r2,12
  80add0:	1007883a 	mov	r3,r2
  80add4:	00802074 	movhi	r2,129
  80add8:	10821d04 	addi	r2,r2,2164
  80addc:	1887883a 	add	r3,r3,r2
  80ade0:	e0ffff15 	stw	r3,-4(fp)
  80ade4:	00000106 	br	80adec <isatty+0x44>
  80ade8:	e03fff15 	stw	zero,-4(fp)
  80adec:	e0bfff17 	ldw	r2,-4(fp)
  80adf0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80adf4:	e0bfed17 	ldw	r2,-76(fp)
  80adf8:	1005003a 	cmpeq	r2,r2,zero
  80adfc:	10000f1e 	bne	r2,zero,80ae3c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80ae00:	e0bfed17 	ldw	r2,-76(fp)
  80ae04:	10800017 	ldw	r2,0(r2)
  80ae08:	10800817 	ldw	r2,32(r2)
  80ae0c:	1004c03a 	cmpne	r2,r2,zero
  80ae10:	1000031e 	bne	r2,zero,80ae20 <isatty+0x78>
    {
      return 1;
  80ae14:	00800044 	movi	r2,1
  80ae18:	e0bffe15 	stw	r2,-8(fp)
  80ae1c:	00000c06 	br	80ae50 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80ae20:	e17fee04 	addi	r5,fp,-72
  80ae24:	e13ffd17 	ldw	r4,-12(fp)
  80ae28:	080ac740 	call	80ac74 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80ae2c:	e0bfef17 	ldw	r2,-68(fp)
  80ae30:	10880020 	cmpeqi	r2,r2,8192
  80ae34:	e0bffe15 	stw	r2,-8(fp)
  80ae38:	00000506 	br	80ae50 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ae3c:	080ae680 	call	80ae68 <alt_get_errno>
  80ae40:	1007883a 	mov	r3,r2
  80ae44:	00801444 	movi	r2,81
  80ae48:	18800015 	stw	r2,0(r3)
    return 0;
  80ae4c:	e03ffe15 	stw	zero,-8(fp)
  80ae50:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80ae54:	e037883a 	mov	sp,fp
  80ae58:	dfc00117 	ldw	ra,4(sp)
  80ae5c:	df000017 	ldw	fp,0(sp)
  80ae60:	dec00204 	addi	sp,sp,8
  80ae64:	f800283a 	ret

0080ae68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ae68:	defffd04 	addi	sp,sp,-12
  80ae6c:	dfc00215 	stw	ra,8(sp)
  80ae70:	df000115 	stw	fp,4(sp)
  80ae74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ae78:	00802074 	movhi	r2,129
  80ae7c:	1086d204 	addi	r2,r2,6984
  80ae80:	10800017 	ldw	r2,0(r2)
  80ae84:	1005003a 	cmpeq	r2,r2,zero
  80ae88:	1000061e 	bne	r2,zero,80aea4 <alt_get_errno+0x3c>
  80ae8c:	00802074 	movhi	r2,129
  80ae90:	1086d204 	addi	r2,r2,6984
  80ae94:	10800017 	ldw	r2,0(r2)
  80ae98:	103ee83a 	callr	r2
  80ae9c:	e0bfff15 	stw	r2,-4(fp)
  80aea0:	00000306 	br	80aeb0 <alt_get_errno+0x48>
  80aea4:	00802074 	movhi	r2,129
  80aea8:	108da604 	addi	r2,r2,13976
  80aeac:	e0bfff15 	stw	r2,-4(fp)
  80aeb0:	e0bfff17 	ldw	r2,-4(fp)
}
  80aeb4:	e037883a 	mov	sp,fp
  80aeb8:	dfc00117 	ldw	ra,4(sp)
  80aebc:	df000017 	ldw	fp,0(sp)
  80aec0:	dec00204 	addi	sp,sp,8
  80aec4:	f800283a 	ret

0080aec8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80aec8:	defffe04 	addi	sp,sp,-8
  80aecc:	dfc00115 	stw	ra,4(sp)
  80aed0:	df000015 	stw	fp,0(sp)
  80aed4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80aed8:	01002074 	movhi	r4,129
  80aedc:	2106d704 	addi	r4,r4,7004
  80aee0:	01402074 	movhi	r5,129
  80aee4:	29400e04 	addi	r5,r5,56
  80aee8:	01802074 	movhi	r6,129
  80aeec:	3186d704 	addi	r6,r6,7004
  80aef0:	080af480 	call	80af48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80aef4:	01002034 	movhi	r4,128
  80aef8:	21000804 	addi	r4,r4,32
  80aefc:	01402034 	movhi	r5,128
  80af00:	29400804 	addi	r5,r5,32
  80af04:	01802034 	movhi	r6,128
  80af08:	31806d04 	addi	r6,r6,436
  80af0c:	080af480 	call	80af48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80af10:	01002074 	movhi	r4,129
  80af14:	213e5804 	addi	r4,r4,-1696
  80af18:	01402074 	movhi	r5,129
  80af1c:	297e5804 	addi	r5,r5,-1696
  80af20:	01802074 	movhi	r6,129
  80af24:	31800e04 	addi	r6,r6,56
  80af28:	080af480 	call	80af48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80af2c:	080e8b00 	call	80e8b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80af30:	080eb640 	call	80eb64 <alt_icache_flush_all>
}
  80af34:	e037883a 	mov	sp,fp
  80af38:	dfc00117 	ldw	ra,4(sp)
  80af3c:	df000017 	ldw	fp,0(sp)
  80af40:	dec00204 	addi	sp,sp,8
  80af44:	f800283a 	ret

0080af48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80af48:	defffc04 	addi	sp,sp,-16
  80af4c:	df000315 	stw	fp,12(sp)
  80af50:	df000304 	addi	fp,sp,12
  80af54:	e13ffd15 	stw	r4,-12(fp)
  80af58:	e17ffe15 	stw	r5,-8(fp)
  80af5c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80af60:	e0fffe17 	ldw	r3,-8(fp)
  80af64:	e0bffd17 	ldw	r2,-12(fp)
  80af68:	18800e26 	beq	r3,r2,80afa4 <alt_load_section+0x5c>
  {
    while( to != end )
  80af6c:	00000a06 	br	80af98 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80af70:	e0bffd17 	ldw	r2,-12(fp)
  80af74:	10c00017 	ldw	r3,0(r2)
  80af78:	e0bffe17 	ldw	r2,-8(fp)
  80af7c:	10c00015 	stw	r3,0(r2)
  80af80:	e0bffe17 	ldw	r2,-8(fp)
  80af84:	10800104 	addi	r2,r2,4
  80af88:	e0bffe15 	stw	r2,-8(fp)
  80af8c:	e0bffd17 	ldw	r2,-12(fp)
  80af90:	10800104 	addi	r2,r2,4
  80af94:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80af98:	e0fffe17 	ldw	r3,-8(fp)
  80af9c:	e0bfff17 	ldw	r2,-4(fp)
  80afa0:	18bff31e 	bne	r3,r2,80af70 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80afa4:	e037883a 	mov	sp,fp
  80afa8:	df000017 	ldw	fp,0(sp)
  80afac:	dec00104 	addi	sp,sp,4
  80afb0:	f800283a 	ret

0080afb4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80afb4:	defff804 	addi	sp,sp,-32
  80afb8:	dfc00715 	stw	ra,28(sp)
  80afbc:	df000615 	stw	fp,24(sp)
  80afc0:	df000604 	addi	fp,sp,24
  80afc4:	e13ffc15 	stw	r4,-16(fp)
  80afc8:	e17ffd15 	stw	r5,-12(fp)
  80afcc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80afd0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80afd4:	e0bffc17 	ldw	r2,-16(fp)
  80afd8:	1004803a 	cmplt	r2,r2,zero
  80afdc:	1000081e 	bne	r2,zero,80b000 <lseek+0x4c>
  80afe0:	e0bffc17 	ldw	r2,-16(fp)
  80afe4:	10800324 	muli	r2,r2,12
  80afe8:	1007883a 	mov	r3,r2
  80afec:	00802074 	movhi	r2,129
  80aff0:	10821d04 	addi	r2,r2,2164
  80aff4:	1887883a 	add	r3,r3,r2
  80aff8:	e0ffff15 	stw	r3,-4(fp)
  80affc:	00000106 	br	80b004 <lseek+0x50>
  80b000:	e03fff15 	stw	zero,-4(fp)
  80b004:	e0bfff17 	ldw	r2,-4(fp)
  80b008:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80b00c:	e0bffb17 	ldw	r2,-20(fp)
  80b010:	1005003a 	cmpeq	r2,r2,zero
  80b014:	1000111e 	bne	r2,zero,80b05c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80b018:	e0bffb17 	ldw	r2,-20(fp)
  80b01c:	10800017 	ldw	r2,0(r2)
  80b020:	10800717 	ldw	r2,28(r2)
  80b024:	1005003a 	cmpeq	r2,r2,zero
  80b028:	1000091e 	bne	r2,zero,80b050 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80b02c:	e0bffb17 	ldw	r2,-20(fp)
  80b030:	10800017 	ldw	r2,0(r2)
  80b034:	10800717 	ldw	r2,28(r2)
  80b038:	e13ffb17 	ldw	r4,-20(fp)
  80b03c:	e17ffd17 	ldw	r5,-12(fp)
  80b040:	e1bffe17 	ldw	r6,-8(fp)
  80b044:	103ee83a 	callr	r2
  80b048:	e0bffa15 	stw	r2,-24(fp)
  80b04c:	00000506 	br	80b064 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80b050:	00bfde84 	movi	r2,-134
  80b054:	e0bffa15 	stw	r2,-24(fp)
  80b058:	00000206 	br	80b064 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80b05c:	00bfebc4 	movi	r2,-81
  80b060:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80b064:	e0bffa17 	ldw	r2,-24(fp)
  80b068:	1004403a 	cmpge	r2,r2,zero
  80b06c:	1000071e 	bne	r2,zero,80b08c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80b070:	080b0a40 	call	80b0a4 <alt_get_errno>
  80b074:	1007883a 	mov	r3,r2
  80b078:	e0bffa17 	ldw	r2,-24(fp)
  80b07c:	0085c83a 	sub	r2,zero,r2
  80b080:	18800015 	stw	r2,0(r3)
    rc = -1;
  80b084:	00bfffc4 	movi	r2,-1
  80b088:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80b08c:	e0bffa17 	ldw	r2,-24(fp)
}
  80b090:	e037883a 	mov	sp,fp
  80b094:	dfc00117 	ldw	ra,4(sp)
  80b098:	df000017 	ldw	fp,0(sp)
  80b09c:	dec00204 	addi	sp,sp,8
  80b0a0:	f800283a 	ret

0080b0a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b0a4:	defffd04 	addi	sp,sp,-12
  80b0a8:	dfc00215 	stw	ra,8(sp)
  80b0ac:	df000115 	stw	fp,4(sp)
  80b0b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b0b4:	00802074 	movhi	r2,129
  80b0b8:	1086d204 	addi	r2,r2,6984
  80b0bc:	10800017 	ldw	r2,0(r2)
  80b0c0:	1005003a 	cmpeq	r2,r2,zero
  80b0c4:	1000061e 	bne	r2,zero,80b0e0 <alt_get_errno+0x3c>
  80b0c8:	00802074 	movhi	r2,129
  80b0cc:	1086d204 	addi	r2,r2,6984
  80b0d0:	10800017 	ldw	r2,0(r2)
  80b0d4:	103ee83a 	callr	r2
  80b0d8:	e0bfff15 	stw	r2,-4(fp)
  80b0dc:	00000306 	br	80b0ec <alt_get_errno+0x48>
  80b0e0:	00802074 	movhi	r2,129
  80b0e4:	108da604 	addi	r2,r2,13976
  80b0e8:	e0bfff15 	stw	r2,-4(fp)
  80b0ec:	e0bfff17 	ldw	r2,-4(fp)
}
  80b0f0:	e037883a 	mov	sp,fp
  80b0f4:	dfc00117 	ldw	ra,4(sp)
  80b0f8:	df000017 	ldw	fp,0(sp)
  80b0fc:	dec00204 	addi	sp,sp,8
  80b100:	f800283a 	ret

0080b104 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80b104:	defffd04 	addi	sp,sp,-12
  80b108:	dfc00215 	stw	ra,8(sp)
  80b10c:	df000115 	stw	fp,4(sp)
  80b110:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80b114:	0009883a 	mov	r4,zero
  80b118:	080b7a00 	call	80b7a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80b11c:	080b7d40 	call	80b7d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80b120:	01002074 	movhi	r4,129
  80b124:	213fe604 	addi	r4,r4,-104
  80b128:	01402074 	movhi	r5,129
  80b12c:	297fe604 	addi	r5,r5,-104
  80b130:	01802074 	movhi	r6,129
  80b134:	31bfe604 	addi	r6,r6,-104
  80b138:	080ef240 	call	80ef24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80b13c:	080ea080 	call	80ea08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80b140:	01002074 	movhi	r4,129
  80b144:	213a9b04 	addi	r4,r4,-5524
  80b148:	080f4e80 	call	80f4e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80b14c:	d126e017 	ldw	r4,-25728(gp)
  80b150:	d166e117 	ldw	r5,-25724(gp)
  80b154:	d1a6e217 	ldw	r6,-25720(gp)
  80b158:	08007280 	call	800728 <main>
  80b15c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80b160:	01000044 	movi	r4,1
  80b164:	080aaec0 	call	80aaec <close>
  exit (result);
  80b168:	e13fff17 	ldw	r4,-4(fp)
  80b16c:	080f4fc0 	call	80f4fc <exit>

0080b170 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80b170:	defffe04 	addi	sp,sp,-8
  80b174:	df000115 	stw	fp,4(sp)
  80b178:	df000104 	addi	fp,sp,4
  80b17c:	e13fff15 	stw	r4,-4(fp)
}
  80b180:	e037883a 	mov	sp,fp
  80b184:	df000017 	ldw	fp,0(sp)
  80b188:	dec00104 	addi	sp,sp,4
  80b18c:	f800283a 	ret

0080b190 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80b190:	defffe04 	addi	sp,sp,-8
  80b194:	df000115 	stw	fp,4(sp)
  80b198:	df000104 	addi	fp,sp,4
  80b19c:	e13fff15 	stw	r4,-4(fp)
}
  80b1a0:	e037883a 	mov	sp,fp
  80b1a4:	df000017 	ldw	fp,0(sp)
  80b1a8:	dec00104 	addi	sp,sp,4
  80b1ac:	f800283a 	ret

0080b1b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80b1b0:	defff704 	addi	sp,sp,-36
  80b1b4:	dfc00815 	stw	ra,32(sp)
  80b1b8:	df000715 	stw	fp,28(sp)
  80b1bc:	df000704 	addi	fp,sp,28
  80b1c0:	e13ffb15 	stw	r4,-20(fp)
  80b1c4:	e17ffc15 	stw	r5,-16(fp)
  80b1c8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b1cc:	e0bffb17 	ldw	r2,-20(fp)
  80b1d0:	1004803a 	cmplt	r2,r2,zero
  80b1d4:	1000081e 	bne	r2,zero,80b1f8 <read+0x48>
  80b1d8:	e0bffb17 	ldw	r2,-20(fp)
  80b1dc:	10800324 	muli	r2,r2,12
  80b1e0:	1007883a 	mov	r3,r2
  80b1e4:	00802074 	movhi	r2,129
  80b1e8:	10821d04 	addi	r2,r2,2164
  80b1ec:	1887883a 	add	r3,r3,r2
  80b1f0:	e0ffff15 	stw	r3,-4(fp)
  80b1f4:	00000106 	br	80b1fc <read+0x4c>
  80b1f8:	e03fff15 	stw	zero,-4(fp)
  80b1fc:	e0bfff17 	ldw	r2,-4(fp)
  80b200:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b204:	e0bffa17 	ldw	r2,-24(fp)
  80b208:	1005003a 	cmpeq	r2,r2,zero
  80b20c:	1000241e 	bne	r2,zero,80b2a0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80b210:	e0bffa17 	ldw	r2,-24(fp)
  80b214:	10800217 	ldw	r2,8(r2)
  80b218:	108000cc 	andi	r2,r2,3
  80b21c:	10800060 	cmpeqi	r2,r2,1
  80b220:	10001a1e 	bne	r2,zero,80b28c <read+0xdc>
  80b224:	e0bffa17 	ldw	r2,-24(fp)
  80b228:	10800017 	ldw	r2,0(r2)
  80b22c:	10800517 	ldw	r2,20(r2)
  80b230:	1005003a 	cmpeq	r2,r2,zero
  80b234:	1000151e 	bne	r2,zero,80b28c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80b238:	e0bffa17 	ldw	r2,-24(fp)
  80b23c:	10800017 	ldw	r2,0(r2)
  80b240:	10800517 	ldw	r2,20(r2)
  80b244:	e17ffc17 	ldw	r5,-16(fp)
  80b248:	e1bffd17 	ldw	r6,-12(fp)
  80b24c:	e13ffa17 	ldw	r4,-24(fp)
  80b250:	103ee83a 	callr	r2
  80b254:	e0bff915 	stw	r2,-28(fp)
  80b258:	e0bff917 	ldw	r2,-28(fp)
  80b25c:	1004403a 	cmpge	r2,r2,zero
  80b260:	1000071e 	bne	r2,zero,80b280 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80b264:	080b2d00 	call	80b2d0 <alt_get_errno>
  80b268:	e0fff917 	ldw	r3,-28(fp)
  80b26c:	00c7c83a 	sub	r3,zero,r3
  80b270:	10c00015 	stw	r3,0(r2)
          return -1;
  80b274:	00bfffc4 	movi	r2,-1
  80b278:	e0bffe15 	stw	r2,-8(fp)
  80b27c:	00000e06 	br	80b2b8 <read+0x108>
        }
        return rval;
  80b280:	e0bff917 	ldw	r2,-28(fp)
  80b284:	e0bffe15 	stw	r2,-8(fp)
  80b288:	00000b06 	br	80b2b8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80b28c:	080b2d00 	call	80b2d0 <alt_get_errno>
  80b290:	1007883a 	mov	r3,r2
  80b294:	00800344 	movi	r2,13
  80b298:	18800015 	stw	r2,0(r3)
  80b29c:	00000406 	br	80b2b0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80b2a0:	080b2d00 	call	80b2d0 <alt_get_errno>
  80b2a4:	1007883a 	mov	r3,r2
  80b2a8:	00801444 	movi	r2,81
  80b2ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b2b0:	00bfffc4 	movi	r2,-1
  80b2b4:	e0bffe15 	stw	r2,-8(fp)
  80b2b8:	e0bffe17 	ldw	r2,-8(fp)
}
  80b2bc:	e037883a 	mov	sp,fp
  80b2c0:	dfc00117 	ldw	ra,4(sp)
  80b2c4:	df000017 	ldw	fp,0(sp)
  80b2c8:	dec00204 	addi	sp,sp,8
  80b2cc:	f800283a 	ret

0080b2d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b2d0:	defffd04 	addi	sp,sp,-12
  80b2d4:	dfc00215 	stw	ra,8(sp)
  80b2d8:	df000115 	stw	fp,4(sp)
  80b2dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b2e0:	00802074 	movhi	r2,129
  80b2e4:	1086d204 	addi	r2,r2,6984
  80b2e8:	10800017 	ldw	r2,0(r2)
  80b2ec:	1005003a 	cmpeq	r2,r2,zero
  80b2f0:	1000061e 	bne	r2,zero,80b30c <alt_get_errno+0x3c>
  80b2f4:	00802074 	movhi	r2,129
  80b2f8:	1086d204 	addi	r2,r2,6984
  80b2fc:	10800017 	ldw	r2,0(r2)
  80b300:	103ee83a 	callr	r2
  80b304:	e0bfff15 	stw	r2,-4(fp)
  80b308:	00000306 	br	80b318 <alt_get_errno+0x48>
  80b30c:	00802074 	movhi	r2,129
  80b310:	108da604 	addi	r2,r2,13976
  80b314:	e0bfff15 	stw	r2,-4(fp)
  80b318:	e0bfff17 	ldw	r2,-4(fp)
}
  80b31c:	e037883a 	mov	sp,fp
  80b320:	dfc00117 	ldw	ra,4(sp)
  80b324:	df000017 	ldw	fp,0(sp)
  80b328:	dec00204 	addi	sp,sp,8
  80b32c:	f800283a 	ret

0080b330 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80b330:	defffe04 	addi	sp,sp,-8
  80b334:	df000115 	stw	fp,4(sp)
  80b338:	df000104 	addi	fp,sp,4
  80b33c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80b340:	e0bfff17 	ldw	r2,-4(fp)
  80b344:	108000d0 	cmplti	r2,r2,3
  80b348:	10000d1e 	bne	r2,zero,80b380 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b34c:	e0bfff17 	ldw	r2,-4(fp)
  80b350:	00c02074 	movhi	r3,129
  80b354:	18c21d04 	addi	r3,r3,2164
  80b358:	10800324 	muli	r2,r2,12
  80b35c:	10c5883a 	add	r2,r2,r3
  80b360:	10800204 	addi	r2,r2,8
  80b364:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80b368:	e0bfff17 	ldw	r2,-4(fp)
  80b36c:	00c02074 	movhi	r3,129
  80b370:	18c21d04 	addi	r3,r3,2164
  80b374:	10800324 	muli	r2,r2,12
  80b378:	10c5883a 	add	r2,r2,r3
  80b37c:	10000015 	stw	zero,0(r2)
  }
}
  80b380:	e037883a 	mov	sp,fp
  80b384:	df000017 	ldw	fp,0(sp)
  80b388:	dec00104 	addi	sp,sp,4
  80b38c:	f800283a 	ret

0080b390 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80b390:	defff804 	addi	sp,sp,-32
  80b394:	df000715 	stw	fp,28(sp)
  80b398:	df000704 	addi	fp,sp,28
  80b39c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b3a0:	0005303a 	rdctl	r2,status
  80b3a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b3a8:	e0fffb17 	ldw	r3,-20(fp)
  80b3ac:	00bfff84 	movi	r2,-2
  80b3b0:	1884703a 	and	r2,r3,r2
  80b3b4:	1001703a 	wrctl	status,r2
  
  return context;
  80b3b8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80b3bc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80b3c0:	d0a00c17 	ldw	r2,-32720(gp)
  80b3c4:	10c000c4 	addi	r3,r2,3
  80b3c8:	00bfff04 	movi	r2,-4
  80b3cc:	1884703a 	and	r2,r3,r2
  80b3d0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80b3d4:	d0e00c17 	ldw	r3,-32720(gp)
  80b3d8:	e0bffe17 	ldw	r2,-8(fp)
  80b3dc:	1887883a 	add	r3,r3,r2
  80b3e0:	00804034 	movhi	r2,256
  80b3e4:	10800004 	addi	r2,r2,0
  80b3e8:	10c0072e 	bgeu	r2,r3,80b408 <sbrk+0x78>
  80b3ec:	e0bffd17 	ldw	r2,-12(fp)
  80b3f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b3f4:	e0bffa17 	ldw	r2,-24(fp)
  80b3f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80b3fc:	00bfffc4 	movi	r2,-1
  80b400:	e0bfff15 	stw	r2,-4(fp)
  80b404:	00000c06 	br	80b438 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80b408:	d0a00c17 	ldw	r2,-32720(gp)
  80b40c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80b410:	d0e00c17 	ldw	r3,-32720(gp)
  80b414:	e0bffe17 	ldw	r2,-8(fp)
  80b418:	1885883a 	add	r2,r3,r2
  80b41c:	d0a00c15 	stw	r2,-32720(gp)
  80b420:	e0bffd17 	ldw	r2,-12(fp)
  80b424:	e0bff915 	stw	r2,-28(fp)
  80b428:	e0bff917 	ldw	r2,-28(fp)
  80b42c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80b430:	e0bffc17 	ldw	r2,-16(fp)
  80b434:	e0bfff15 	stw	r2,-4(fp)
  80b438:	e0bfff17 	ldw	r2,-4(fp)
} 
  80b43c:	e037883a 	mov	sp,fp
  80b440:	df000017 	ldw	fp,0(sp)
  80b444:	dec00104 	addi	sp,sp,4
  80b448:	f800283a 	ret

0080b44c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80b44c:	defffa04 	addi	sp,sp,-24
  80b450:	df000515 	stw	fp,20(sp)
  80b454:	df000504 	addi	fp,sp,20
  80b458:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b45c:	0005303a 	rdctl	r2,status
  80b460:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b464:	e0fffd17 	ldw	r3,-12(fp)
  80b468:	00bfff84 	movi	r2,-2
  80b46c:	1884703a 	and	r2,r3,r2
  80b470:	1001703a 	wrctl	status,r2
  
  return context;
  80b474:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80b478:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80b47c:	e0bfff17 	ldw	r2,-4(fp)
  80b480:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80b484:	e0bffc17 	ldw	r2,-16(fp)
  80b488:	10c00017 	ldw	r3,0(r2)
  80b48c:	e0bffc17 	ldw	r2,-16(fp)
  80b490:	10800117 	ldw	r2,4(r2)
  80b494:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80b498:	e0bffc17 	ldw	r2,-16(fp)
  80b49c:	10c00117 	ldw	r3,4(r2)
  80b4a0:	e0bffc17 	ldw	r2,-16(fp)
  80b4a4:	10800017 	ldw	r2,0(r2)
  80b4a8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80b4ac:	e0fffc17 	ldw	r3,-16(fp)
  80b4b0:	e0bffc17 	ldw	r2,-16(fp)
  80b4b4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80b4b8:	e0fffc17 	ldw	r3,-16(fp)
  80b4bc:	e0bffc17 	ldw	r2,-16(fp)
  80b4c0:	18800015 	stw	r2,0(r3)
  80b4c4:	e0bffe17 	ldw	r2,-8(fp)
  80b4c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4cc:	e0bffb17 	ldw	r2,-20(fp)
  80b4d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80b4d4:	e037883a 	mov	sp,fp
  80b4d8:	df000017 	ldw	fp,0(sp)
  80b4dc:	dec00104 	addi	sp,sp,4
  80b4e0:	f800283a 	ret

0080b4e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80b4e4:	defffb04 	addi	sp,sp,-20
  80b4e8:	dfc00415 	stw	ra,16(sp)
  80b4ec:	df000315 	stw	fp,12(sp)
  80b4f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80b4f4:	d0a00d17 	ldw	r2,-32716(gp)
  80b4f8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80b4fc:	d0a6e417 	ldw	r2,-25712(gp)
  80b500:	10800044 	addi	r2,r2,1
  80b504:	d0a6e415 	stw	r2,-25712(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80b508:	00003106 	br	80b5d0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80b50c:	e0bffe17 	ldw	r2,-8(fp)
  80b510:	10800017 	ldw	r2,0(r2)
  80b514:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80b518:	e0bffe17 	ldw	r2,-8(fp)
  80b51c:	10800403 	ldbu	r2,16(r2)
  80b520:	10803fcc 	andi	r2,r2,255
  80b524:	1005003a 	cmpeq	r2,r2,zero
  80b528:	1000051e 	bne	r2,zero,80b540 <alt_tick+0x5c>
  80b52c:	d0a6e417 	ldw	r2,-25712(gp)
  80b530:	1004c03a 	cmpne	r2,r2,zero
  80b534:	1000021e 	bne	r2,zero,80b540 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80b538:	e0bffe17 	ldw	r2,-8(fp)
  80b53c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80b540:	e0bffe17 	ldw	r2,-8(fp)
  80b544:	10c00217 	ldw	r3,8(r2)
  80b548:	d0a6e417 	ldw	r2,-25712(gp)
  80b54c:	10c01e36 	bltu	r2,r3,80b5c8 <alt_tick+0xe4>
  80b550:	e0bffe17 	ldw	r2,-8(fp)
  80b554:	10800403 	ldbu	r2,16(r2)
  80b558:	10803fcc 	andi	r2,r2,255
  80b55c:	1004c03a 	cmpne	r2,r2,zero
  80b560:	1000191e 	bne	r2,zero,80b5c8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80b564:	e0bffe17 	ldw	r2,-8(fp)
  80b568:	10c00317 	ldw	r3,12(r2)
  80b56c:	e0bffe17 	ldw	r2,-8(fp)
  80b570:	11000517 	ldw	r4,20(r2)
  80b574:	183ee83a 	callr	r3
  80b578:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80b57c:	e0bffd17 	ldw	r2,-12(fp)
  80b580:	1004c03a 	cmpne	r2,r2,zero
  80b584:	1000031e 	bne	r2,zero,80b594 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80b588:	e13ffe17 	ldw	r4,-8(fp)
  80b58c:	080b44c0 	call	80b44c <alt_alarm_stop>
  80b590:	00000d06 	br	80b5c8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80b594:	e0bffe17 	ldw	r2,-8(fp)
  80b598:	10c00217 	ldw	r3,8(r2)
  80b59c:	e0bffd17 	ldw	r2,-12(fp)
  80b5a0:	1887883a 	add	r3,r3,r2
  80b5a4:	e0bffe17 	ldw	r2,-8(fp)
  80b5a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80b5ac:	e0bffe17 	ldw	r2,-8(fp)
  80b5b0:	10c00217 	ldw	r3,8(r2)
  80b5b4:	d0a6e417 	ldw	r2,-25712(gp)
  80b5b8:	1880032e 	bgeu	r3,r2,80b5c8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80b5bc:	e0fffe17 	ldw	r3,-8(fp)
  80b5c0:	00800044 	movi	r2,1
  80b5c4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80b5c8:	e0bfff17 	ldw	r2,-4(fp)
  80b5cc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80b5d0:	d0e00d04 	addi	r3,gp,-32716
  80b5d4:	e0bffe17 	ldw	r2,-8(fp)
  80b5d8:	10ffcc1e 	bne	r2,r3,80b50c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80b5dc:	e037883a 	mov	sp,fp
  80b5e0:	dfc00117 	ldw	ra,4(sp)
  80b5e4:	df000017 	ldw	fp,0(sp)
  80b5e8:	dec00204 	addi	sp,sp,8
  80b5ec:	f800283a 	ret

0080b5f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80b5f0:	defffd04 	addi	sp,sp,-12
  80b5f4:	dfc00215 	stw	ra,8(sp)
  80b5f8:	df000115 	stw	fp,4(sp)
  80b5fc:	df000104 	addi	fp,sp,4
  80b600:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80b604:	e13fff17 	ldw	r4,-4(fp)
  80b608:	080e7640 	call	80e764 <alt_busy_sleep>
}
  80b60c:	e037883a 	mov	sp,fp
  80b610:	dfc00117 	ldw	ra,4(sp)
  80b614:	df000017 	ldw	fp,0(sp)
  80b618:	dec00204 	addi	sp,sp,8
  80b61c:	f800283a 	ret

0080b620 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80b620:	defff704 	addi	sp,sp,-36
  80b624:	dfc00815 	stw	ra,32(sp)
  80b628:	df000715 	stw	fp,28(sp)
  80b62c:	df000704 	addi	fp,sp,28
  80b630:	e13ffb15 	stw	r4,-20(fp)
  80b634:	e17ffc15 	stw	r5,-16(fp)
  80b638:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b63c:	e0bffb17 	ldw	r2,-20(fp)
  80b640:	1004803a 	cmplt	r2,r2,zero
  80b644:	1000081e 	bne	r2,zero,80b668 <write+0x48>
  80b648:	e0bffb17 	ldw	r2,-20(fp)
  80b64c:	10800324 	muli	r2,r2,12
  80b650:	1007883a 	mov	r3,r2
  80b654:	00802074 	movhi	r2,129
  80b658:	10821d04 	addi	r2,r2,2164
  80b65c:	1887883a 	add	r3,r3,r2
  80b660:	e0ffff15 	stw	r3,-4(fp)
  80b664:	00000106 	br	80b66c <write+0x4c>
  80b668:	e03fff15 	stw	zero,-4(fp)
  80b66c:	e0bfff17 	ldw	r2,-4(fp)
  80b670:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b674:	e0bffa17 	ldw	r2,-24(fp)
  80b678:	1005003a 	cmpeq	r2,r2,zero
  80b67c:	1000241e 	bne	r2,zero,80b710 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80b680:	e0bffa17 	ldw	r2,-24(fp)
  80b684:	10800217 	ldw	r2,8(r2)
  80b688:	108000cc 	andi	r2,r2,3
  80b68c:	1005003a 	cmpeq	r2,r2,zero
  80b690:	10001a1e 	bne	r2,zero,80b6fc <write+0xdc>
  80b694:	e0bffa17 	ldw	r2,-24(fp)
  80b698:	10800017 	ldw	r2,0(r2)
  80b69c:	10800617 	ldw	r2,24(r2)
  80b6a0:	1005003a 	cmpeq	r2,r2,zero
  80b6a4:	1000151e 	bne	r2,zero,80b6fc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80b6a8:	e0bffa17 	ldw	r2,-24(fp)
  80b6ac:	10800017 	ldw	r2,0(r2)
  80b6b0:	10800617 	ldw	r2,24(r2)
  80b6b4:	e17ffc17 	ldw	r5,-16(fp)
  80b6b8:	e1bffd17 	ldw	r6,-12(fp)
  80b6bc:	e13ffa17 	ldw	r4,-24(fp)
  80b6c0:	103ee83a 	callr	r2
  80b6c4:	e0bff915 	stw	r2,-28(fp)
  80b6c8:	e0bff917 	ldw	r2,-28(fp)
  80b6cc:	1004403a 	cmpge	r2,r2,zero
  80b6d0:	1000071e 	bne	r2,zero,80b6f0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80b6d4:	080b7400 	call	80b740 <alt_get_errno>
  80b6d8:	e0fff917 	ldw	r3,-28(fp)
  80b6dc:	00c7c83a 	sub	r3,zero,r3
  80b6e0:	10c00015 	stw	r3,0(r2)
        return -1;
  80b6e4:	00bfffc4 	movi	r2,-1
  80b6e8:	e0bffe15 	stw	r2,-8(fp)
  80b6ec:	00000e06 	br	80b728 <write+0x108>
      }
      return rval;
  80b6f0:	e0bff917 	ldw	r2,-28(fp)
  80b6f4:	e0bffe15 	stw	r2,-8(fp)
  80b6f8:	00000b06 	br	80b728 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80b6fc:	080b7400 	call	80b740 <alt_get_errno>
  80b700:	1007883a 	mov	r3,r2
  80b704:	00800344 	movi	r2,13
  80b708:	18800015 	stw	r2,0(r3)
  80b70c:	00000406 	br	80b720 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80b710:	080b7400 	call	80b740 <alt_get_errno>
  80b714:	1007883a 	mov	r3,r2
  80b718:	00801444 	movi	r2,81
  80b71c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b720:	00bfffc4 	movi	r2,-1
  80b724:	e0bffe15 	stw	r2,-8(fp)
  80b728:	e0bffe17 	ldw	r2,-8(fp)
}
  80b72c:	e037883a 	mov	sp,fp
  80b730:	dfc00117 	ldw	ra,4(sp)
  80b734:	df000017 	ldw	fp,0(sp)
  80b738:	dec00204 	addi	sp,sp,8
  80b73c:	f800283a 	ret

0080b740 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b740:	defffd04 	addi	sp,sp,-12
  80b744:	dfc00215 	stw	ra,8(sp)
  80b748:	df000115 	stw	fp,4(sp)
  80b74c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b750:	00802074 	movhi	r2,129
  80b754:	1086d204 	addi	r2,r2,6984
  80b758:	10800017 	ldw	r2,0(r2)
  80b75c:	1005003a 	cmpeq	r2,r2,zero
  80b760:	1000061e 	bne	r2,zero,80b77c <alt_get_errno+0x3c>
  80b764:	00802074 	movhi	r2,129
  80b768:	1086d204 	addi	r2,r2,6984
  80b76c:	10800017 	ldw	r2,0(r2)
  80b770:	103ee83a 	callr	r2
  80b774:	e0bfff15 	stw	r2,-4(fp)
  80b778:	00000306 	br	80b788 <alt_get_errno+0x48>
  80b77c:	00802074 	movhi	r2,129
  80b780:	108da604 	addi	r2,r2,13976
  80b784:	e0bfff15 	stw	r2,-4(fp)
  80b788:	e0bfff17 	ldw	r2,-4(fp)
}
  80b78c:	e037883a 	mov	sp,fp
  80b790:	dfc00117 	ldw	ra,4(sp)
  80b794:	df000017 	ldw	fp,0(sp)
  80b798:	dec00204 	addi	sp,sp,8
  80b79c:	f800283a 	ret

0080b7a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b7a0:	defffd04 	addi	sp,sp,-12
  80b7a4:	dfc00215 	stw	ra,8(sp)
  80b7a8:	df000115 	stw	fp,4(sp)
  80b7ac:	df000104 	addi	fp,sp,4
  80b7b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  80b7b4:	080f2600 	call	80f260 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b7b8:	00800044 	movi	r2,1
  80b7bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b7c0:	e037883a 	mov	sp,fp
  80b7c4:	dfc00117 	ldw	ra,4(sp)
  80b7c8:	df000017 	ldw	fp,0(sp)
  80b7cc:	dec00204 	addi	sp,sp,8
  80b7d0:	f800283a 	ret

0080b7d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b7d4:	defffd04 	addi	sp,sp,-12
  80b7d8:	dfc00215 	stw	ra,8(sp)
  80b7dc:	df000115 	stw	fp,4(sp)
  80b7e0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( HAL_SYSTEM_TIMER, HAL_system_timer);
  80b7e4:	01004034 	movhi	r4,256
  80b7e8:	21040004 	addi	r4,r4,4096
  80b7ec:	000b883a 	mov	r5,zero
  80b7f0:	000d883a 	mov	r6,zero
  80b7f4:	01c0fa04 	movi	r7,1000
  80b7f8:	080c6780 	call	80c678 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( HARDWARE_TIMER, hardware_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  80b7fc:	00c02074 	movhi	r3,129
  80b800:	18cdac04 	addi	r3,r3,14000
  80b804:	00804034 	movhi	r2,256
  80b808:	10840804 	addi	r2,r2,4128
  80b80c:	18800015 	stw	r2,0(r3)
  80b810:	00c02074 	movhi	r3,129
  80b814:	18cdad04 	addi	r3,r3,14004
  80b818:	0080bef4 	movhi	r2,763
  80b81c:	10bc2004 	addi	r2,r2,-3968
  80b820:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80b824:	01002074 	movhi	r4,129
  80b828:	21028704 	addi	r4,r4,2588
  80b82c:	000b883a 	mov	r5,zero
  80b830:	01800144 	movi	r6,5
  80b834:	080bca40 	call	80bca4 <altera_avalon_jtag_uart_init>
  80b838:	01002074 	movhi	r4,129
  80b83c:	21027d04 	addi	r4,r4,2548
  80b840:	080bb240 	call	80bb24 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  80b844:	01002074 	movhi	r4,129
  80b848:	21069504 	addi	r4,r4,6740
  80b84c:	080c9200 	call	80c920 <alt_up_character_lcd_init>
  80b850:	01002074 	movhi	r4,129
  80b854:	21069504 	addi	r4,r4,6740
  80b858:	080bb240 	call	80bb24 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  80b85c:	00802074 	movhi	r2,129
  80b860:	1086a004 	addi	r2,r2,6784
  80b864:	10800a17 	ldw	r2,40(r2)
  80b868:	10800104 	addi	r2,r2,4
  80b86c:	10800017 	ldw	r2,0(r2)
  80b870:	10ffffcc 	andi	r3,r2,65535
  80b874:	00802074 	movhi	r2,129
  80b878:	1086a004 	addi	r2,r2,6784
  80b87c:	10c00c15 	stw	r3,48(r2)
  80b880:	00802074 	movhi	r2,129
  80b884:	1086a004 	addi	r2,r2,6784
  80b888:	10800a17 	ldw	r2,40(r2)
  80b88c:	10800104 	addi	r2,r2,4
  80b890:	10800017 	ldw	r2,0(r2)
  80b894:	1005d43a 	srai	r2,r2,16
  80b898:	10ffffcc 	andi	r3,r2,65535
  80b89c:	00802074 	movhi	r2,129
  80b8a0:	1086a004 	addi	r2,r2,6784
  80b8a4:	10c00d15 	stw	r3,52(r2)
  80b8a8:	00802074 	movhi	r2,129
  80b8ac:	1086a004 	addi	r2,r2,6784
  80b8b0:	10800c17 	ldw	r2,48(r2)
  80b8b4:	10801068 	cmpgeui	r2,r2,65
  80b8b8:	1000081e 	bne	r2,zero,80b8dc <alt_sys_init+0x108>
  80b8bc:	00c02074 	movhi	r3,129
  80b8c0:	18c6a004 	addi	r3,r3,6784
  80b8c4:	00800fc4 	movi	r2,63
  80b8c8:	18800f15 	stw	r2,60(r3)
  80b8cc:	00c02074 	movhi	r3,129
  80b8d0:	18c6a004 	addi	r3,r3,6784
  80b8d4:	00800184 	movi	r2,6
  80b8d8:	18801015 	stw	r2,64(r3)
  80b8dc:	00802074 	movhi	r2,129
  80b8e0:	1086a004 	addi	r2,r2,6784
  80b8e4:	10800d17 	ldw	r2,52(r2)
  80b8e8:	10800868 	cmpgeui	r2,r2,33
  80b8ec:	1000041e 	bne	r2,zero,80b900 <alt_sys_init+0x12c>
  80b8f0:	00c02074 	movhi	r3,129
  80b8f4:	18c6a004 	addi	r3,r3,6784
  80b8f8:	008007c4 	movi	r2,31
  80b8fc:	18801115 	stw	r2,68(r3)
  80b900:	01002074 	movhi	r4,129
  80b904:	2106a004 	addi	r4,r4,6784
  80b908:	080cda00 	call	80cda0 <alt_up_char_buffer_init>
  80b90c:	01002074 	movhi	r4,129
  80b910:	2106a004 	addi	r4,r4,6784
  80b914:	080bb240 	call	80bb24 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
  80b918:	00802074 	movhi	r2,129
  80b91c:	1086b204 	addi	r2,r2,6856
  80b920:	10800a17 	ldw	r2,40(r2)
  80b924:	10800017 	ldw	r2,0(r2)
  80b928:	1007883a 	mov	r3,r2
  80b92c:	00802074 	movhi	r2,129
  80b930:	1086b204 	addi	r2,r2,6856
  80b934:	10c00b15 	stw	r3,44(r2)
  80b938:	00802074 	movhi	r2,129
  80b93c:	1086b204 	addi	r2,r2,6856
  80b940:	10800a17 	ldw	r2,40(r2)
  80b944:	10800104 	addi	r2,r2,4
  80b948:	10800017 	ldw	r2,0(r2)
  80b94c:	1007883a 	mov	r3,r2
  80b950:	00802074 	movhi	r2,129
  80b954:	1086b204 	addi	r2,r2,6856
  80b958:	10c00c15 	stw	r3,48(r2)
  80b95c:	00802074 	movhi	r2,129
  80b960:	1086b204 	addi	r2,r2,6856
  80b964:	10800a17 	ldw	r2,40(r2)
  80b968:	10800204 	addi	r2,r2,8
  80b96c:	10800017 	ldw	r2,0(r2)
  80b970:	10ffffcc 	andi	r3,r2,65535
  80b974:	00802074 	movhi	r2,129
  80b978:	1086b204 	addi	r2,r2,6856
  80b97c:	10c00f15 	stw	r3,60(r2)
  80b980:	00802074 	movhi	r2,129
  80b984:	1086b204 	addi	r2,r2,6856
  80b988:	10800a17 	ldw	r2,40(r2)
  80b98c:	10800204 	addi	r2,r2,8
  80b990:	10800017 	ldw	r2,0(r2)
  80b994:	1005d43a 	srai	r2,r2,16
  80b998:	10ffffcc 	andi	r3,r2,65535
  80b99c:	00802074 	movhi	r2,129
  80b9a0:	1086b204 	addi	r2,r2,6856
  80b9a4:	10c01015 	stw	r3,64(r2)
  80b9a8:	00802074 	movhi	r2,129
  80b9ac:	1086b204 	addi	r2,r2,6856
  80b9b0:	10800a17 	ldw	r2,40(r2)
  80b9b4:	10800304 	addi	r2,r2,12
  80b9b8:	10800017 	ldw	r2,0(r2)
  80b9bc:	1005d07a 	srai	r2,r2,1
  80b9c0:	10c0004c 	andi	r3,r2,1
  80b9c4:	00802074 	movhi	r2,129
  80b9c8:	1086b204 	addi	r2,r2,6856
  80b9cc:	10c00d15 	stw	r3,52(r2)
  80b9d0:	00802074 	movhi	r2,129
  80b9d4:	1086b204 	addi	r2,r2,6856
  80b9d8:	10800a17 	ldw	r2,40(r2)
  80b9dc:	10800304 	addi	r2,r2,12
  80b9e0:	10800017 	ldw	r2,0(r2)
  80b9e4:	1005d13a 	srai	r2,r2,4
  80b9e8:	10c003cc 	andi	r3,r2,15
  80b9ec:	00802074 	movhi	r2,129
  80b9f0:	1086b204 	addi	r2,r2,6856
  80b9f4:	10c00e15 	stw	r3,56(r2)
  80b9f8:	00802074 	movhi	r2,129
  80b9fc:	1086b204 	addi	r2,r2,6856
  80ba00:	10800a17 	ldw	r2,40(r2)
  80ba04:	10800304 	addi	r2,r2,12
  80ba08:	10800017 	ldw	r2,0(r2)
  80ba0c:	1005d43a 	srai	r2,r2,16
  80ba10:	1007883a 	mov	r3,r2
  80ba14:	00bfffc4 	movi	r2,-1
  80ba18:	1884703a 	and	r2,r3,r2
  80ba1c:	e0bfff45 	stb	r2,-3(fp)
  80ba20:	00802074 	movhi	r2,129
  80ba24:	1086b204 	addi	r2,r2,6856
  80ba28:	10800a17 	ldw	r2,40(r2)
  80ba2c:	10800304 	addi	r2,r2,12
  80ba30:	10800017 	ldw	r2,0(r2)
  80ba34:	1005d63a 	srai	r2,r2,24
  80ba38:	1007883a 	mov	r3,r2
  80ba3c:	00bfffc4 	movi	r2,-1
  80ba40:	1884703a 	and	r2,r3,r2
  80ba44:	e0bfff05 	stb	r2,-4(fp)
  80ba48:	00802074 	movhi	r2,129
  80ba4c:	1086b204 	addi	r2,r2,6856
  80ba50:	10800e17 	ldw	r2,56(r2)
  80ba54:	10800058 	cmpnei	r2,r2,1
  80ba58:	1000041e 	bne	r2,zero,80ba6c <alt_sys_init+0x298>
  80ba5c:	00802074 	movhi	r2,129
  80ba60:	1086b204 	addi	r2,r2,6856
  80ba64:	10001115 	stw	zero,68(r2)
  80ba68:	00000e06 	br	80baa4 <alt_sys_init+0x2d0>
  80ba6c:	00802074 	movhi	r2,129
  80ba70:	1086b204 	addi	r2,r2,6856
  80ba74:	10800e17 	ldw	r2,56(r2)
  80ba78:	10800098 	cmpnei	r2,r2,2
  80ba7c:	1000051e 	bne	r2,zero,80ba94 <alt_sys_init+0x2c0>
  80ba80:	00c02074 	movhi	r3,129
  80ba84:	18c6b204 	addi	r3,r3,6856
  80ba88:	00800044 	movi	r2,1
  80ba8c:	18801115 	stw	r2,68(r3)
  80ba90:	00000406 	br	80baa4 <alt_sys_init+0x2d0>
  80ba94:	00c02074 	movhi	r3,129
  80ba98:	18c6b204 	addi	r3,r3,6856
  80ba9c:	00800084 	movi	r2,2
  80baa0:	18801115 	stw	r2,68(r3)
  80baa4:	e0ffff43 	ldbu	r3,-3(fp)
  80baa8:	00800804 	movi	r2,32
  80baac:	10c7c83a 	sub	r3,r2,r3
  80bab0:	00bfffc4 	movi	r2,-1
  80bab4:	10c6d83a 	srl	r3,r2,r3
  80bab8:	00802074 	movhi	r2,129
  80babc:	1086b204 	addi	r2,r2,6856
  80bac0:	10c01215 	stw	r3,72(r2)
  80bac4:	e0ffff43 	ldbu	r3,-3(fp)
  80bac8:	00802074 	movhi	r2,129
  80bacc:	1086b204 	addi	r2,r2,6856
  80bad0:	10801117 	ldw	r2,68(r2)
  80bad4:	1887883a 	add	r3,r3,r2
  80bad8:	00802074 	movhi	r2,129
  80badc:	1086b204 	addi	r2,r2,6856
  80bae0:	10c01315 	stw	r3,76(r2)
  80bae4:	e0ffff03 	ldbu	r3,-4(fp)
  80bae8:	00800804 	movi	r2,32
  80baec:	10c7c83a 	sub	r3,r2,r3
  80baf0:	00bfffc4 	movi	r2,-1
  80baf4:	10c6d83a 	srl	r3,r2,r3
  80baf8:	00802074 	movhi	r2,129
  80bafc:	1086b204 	addi	r2,r2,6856
  80bb00:	10c01415 	stw	r3,80(r2)
  80bb04:	01002074 	movhi	r4,129
  80bb08:	2106b204 	addi	r4,r4,6856
  80bb0c:	080bb240 	call	80bb24 <alt_dev_reg>
}
  80bb10:	e037883a 	mov	sp,fp
  80bb14:	dfc00117 	ldw	ra,4(sp)
  80bb18:	df000017 	ldw	fp,0(sp)
  80bb1c:	dec00204 	addi	sp,sp,8
  80bb20:	f800283a 	ret

0080bb24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80bb24:	defffd04 	addi	sp,sp,-12
  80bb28:	dfc00215 	stw	ra,8(sp)
  80bb2c:	df000115 	stw	fp,4(sp)
  80bb30:	df000104 	addi	fp,sp,4
  80bb34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80bb38:	e13fff17 	ldw	r4,-4(fp)
  80bb3c:	01402074 	movhi	r5,129
  80bb40:	2946cf04 	addi	r5,r5,6972
  80bb44:	080e8f40 	call	80e8f4 <alt_dev_llist_insert>
}
  80bb48:	e037883a 	mov	sp,fp
  80bb4c:	dfc00117 	ldw	ra,4(sp)
  80bb50:	df000017 	ldw	fp,0(sp)
  80bb54:	dec00204 	addi	sp,sp,8
  80bb58:	f800283a 	ret

0080bb5c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80bb5c:	defffa04 	addi	sp,sp,-24
  80bb60:	dfc00515 	stw	ra,20(sp)
  80bb64:	df000415 	stw	fp,16(sp)
  80bb68:	df000404 	addi	fp,sp,16
  80bb6c:	e13ffd15 	stw	r4,-12(fp)
  80bb70:	e17ffe15 	stw	r5,-8(fp)
  80bb74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bb78:	e0bffd17 	ldw	r2,-12(fp)
  80bb7c:	10800017 	ldw	r2,0(r2)
  80bb80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80bb84:	e0bffc17 	ldw	r2,-16(fp)
  80bb88:	11000a04 	addi	r4,r2,40
  80bb8c:	e0bffd17 	ldw	r2,-12(fp)
  80bb90:	11c00217 	ldw	r7,8(r2)
  80bb94:	e17ffe17 	ldw	r5,-8(fp)
  80bb98:	e1bfff17 	ldw	r6,-4(fp)
  80bb9c:	080c1a40 	call	80c1a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80bba0:	e037883a 	mov	sp,fp
  80bba4:	dfc00117 	ldw	ra,4(sp)
  80bba8:	df000017 	ldw	fp,0(sp)
  80bbac:	dec00204 	addi	sp,sp,8
  80bbb0:	f800283a 	ret

0080bbb4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80bbb4:	defffa04 	addi	sp,sp,-24
  80bbb8:	dfc00515 	stw	ra,20(sp)
  80bbbc:	df000415 	stw	fp,16(sp)
  80bbc0:	df000404 	addi	fp,sp,16
  80bbc4:	e13ffd15 	stw	r4,-12(fp)
  80bbc8:	e17ffe15 	stw	r5,-8(fp)
  80bbcc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bbd0:	e0bffd17 	ldw	r2,-12(fp)
  80bbd4:	10800017 	ldw	r2,0(r2)
  80bbd8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80bbdc:	e0bffc17 	ldw	r2,-16(fp)
  80bbe0:	11000a04 	addi	r4,r2,40
  80bbe4:	e0bffd17 	ldw	r2,-12(fp)
  80bbe8:	11c00217 	ldw	r7,8(r2)
  80bbec:	e17ffe17 	ldw	r5,-8(fp)
  80bbf0:	e1bfff17 	ldw	r6,-4(fp)
  80bbf4:	080c3c80 	call	80c3c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80bbf8:	e037883a 	mov	sp,fp
  80bbfc:	dfc00117 	ldw	ra,4(sp)
  80bc00:	df000017 	ldw	fp,0(sp)
  80bc04:	dec00204 	addi	sp,sp,8
  80bc08:	f800283a 	ret

0080bc0c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80bc0c:	defffc04 	addi	sp,sp,-16
  80bc10:	dfc00315 	stw	ra,12(sp)
  80bc14:	df000215 	stw	fp,8(sp)
  80bc18:	df000204 	addi	fp,sp,8
  80bc1c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bc20:	e0bfff17 	ldw	r2,-4(fp)
  80bc24:	10800017 	ldw	r2,0(r2)
  80bc28:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80bc2c:	e0bffe17 	ldw	r2,-8(fp)
  80bc30:	11000a04 	addi	r4,r2,40
  80bc34:	e0bfff17 	ldw	r2,-4(fp)
  80bc38:	11400217 	ldw	r5,8(r2)
  80bc3c:	080c03c0 	call	80c03c <altera_avalon_jtag_uart_close>
}
  80bc40:	e037883a 	mov	sp,fp
  80bc44:	dfc00117 	ldw	ra,4(sp)
  80bc48:	df000017 	ldw	fp,0(sp)
  80bc4c:	dec00204 	addi	sp,sp,8
  80bc50:	f800283a 	ret

0080bc54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80bc54:	defffa04 	addi	sp,sp,-24
  80bc58:	dfc00515 	stw	ra,20(sp)
  80bc5c:	df000415 	stw	fp,16(sp)
  80bc60:	df000404 	addi	fp,sp,16
  80bc64:	e13ffd15 	stw	r4,-12(fp)
  80bc68:	e17ffe15 	stw	r5,-8(fp)
  80bc6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80bc70:	e0bffd17 	ldw	r2,-12(fp)
  80bc74:	10800017 	ldw	r2,0(r2)
  80bc78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80bc7c:	e0bffc17 	ldw	r2,-16(fp)
  80bc80:	11000a04 	addi	r4,r2,40
  80bc84:	e17ffe17 	ldw	r5,-8(fp)
  80bc88:	e1bfff17 	ldw	r6,-4(fp)
  80bc8c:	080c0b00 	call	80c0b0 <altera_avalon_jtag_uart_ioctl>
}
  80bc90:	e037883a 	mov	sp,fp
  80bc94:	dfc00117 	ldw	ra,4(sp)
  80bc98:	df000017 	ldw	fp,0(sp)
  80bc9c:	dec00204 	addi	sp,sp,8
  80bca0:	f800283a 	ret

0080bca4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80bca4:	defffa04 	addi	sp,sp,-24
  80bca8:	dfc00515 	stw	ra,20(sp)
  80bcac:	df000415 	stw	fp,16(sp)
  80bcb0:	df000404 	addi	fp,sp,16
  80bcb4:	e13ffd15 	stw	r4,-12(fp)
  80bcb8:	e17ffe15 	stw	r5,-8(fp)
  80bcbc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80bcc0:	e0fffd17 	ldw	r3,-12(fp)
  80bcc4:	00800044 	movi	r2,1
  80bcc8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80bccc:	e0bffd17 	ldw	r2,-12(fp)
  80bcd0:	10800017 	ldw	r2,0(r2)
  80bcd4:	11000104 	addi	r4,r2,4
  80bcd8:	e0bffd17 	ldw	r2,-12(fp)
  80bcdc:	10800817 	ldw	r2,32(r2)
  80bce0:	1007883a 	mov	r3,r2
  80bce4:	2005883a 	mov	r2,r4
  80bce8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80bcec:	e13ffe17 	ldw	r4,-8(fp)
  80bcf0:	e17fff17 	ldw	r5,-4(fp)
  80bcf4:	d8000015 	stw	zero,0(sp)
  80bcf8:	01802074 	movhi	r6,129
  80bcfc:	31af5904 	addi	r6,r6,-17052
  80bd00:	e1fffd17 	ldw	r7,-12(fp)
  80bd04:	080eb940 	call	80eb94 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80bd08:	e0bffd17 	ldw	r2,-12(fp)
  80bd0c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80bd10:	e0bffd17 	ldw	r2,-12(fp)
  80bd14:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80bd18:	00802074 	movhi	r2,129
  80bd1c:	108daa04 	addi	r2,r2,13992
  80bd20:	10800017 	ldw	r2,0(r2)
  80bd24:	100b883a 	mov	r5,r2
  80bd28:	01802074 	movhi	r6,129
  80bd2c:	31afe304 	addi	r6,r6,-16500
  80bd30:	e1fffd17 	ldw	r7,-12(fp)
  80bd34:	080e6100 	call	80e610 <alt_alarm_start>
  80bd38:	1004403a 	cmpge	r2,r2,zero
  80bd3c:	1000041e 	bne	r2,zero,80bd50 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80bd40:	e0fffd17 	ldw	r3,-12(fp)
  80bd44:	00a00034 	movhi	r2,32768
  80bd48:	10bfffc4 	addi	r2,r2,-1
  80bd4c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80bd50:	e037883a 	mov	sp,fp
  80bd54:	dfc00117 	ldw	ra,4(sp)
  80bd58:	df000017 	ldw	fp,0(sp)
  80bd5c:	dec00204 	addi	sp,sp,8
  80bd60:	f800283a 	ret

0080bd64 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80bd64:	defff804 	addi	sp,sp,-32
  80bd68:	df000715 	stw	fp,28(sp)
  80bd6c:	df000704 	addi	fp,sp,28
  80bd70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80bd74:	e0bfff17 	ldw	r2,-4(fp)
  80bd78:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80bd7c:	e0bffe17 	ldw	r2,-8(fp)
  80bd80:	10800017 	ldw	r2,0(r2)
  80bd84:	e0bffd15 	stw	r2,-12(fp)
  80bd88:	00000006 	br	80bd8c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bd8c:	e0bffd17 	ldw	r2,-12(fp)
  80bd90:	10800104 	addi	r2,r2,4
  80bd94:	10800037 	ldwio	r2,0(r2)
  80bd98:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80bd9c:	e0bffc17 	ldw	r2,-16(fp)
  80bda0:	1080c00c 	andi	r2,r2,768
  80bda4:	1005003a 	cmpeq	r2,r2,zero
  80bda8:	1000741e 	bne	r2,zero,80bf7c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80bdac:	e0bffc17 	ldw	r2,-16(fp)
  80bdb0:	1080400c 	andi	r2,r2,256
  80bdb4:	1005003a 	cmpeq	r2,r2,zero
  80bdb8:	1000351e 	bne	r2,zero,80be90 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80bdbc:	00800074 	movhi	r2,1
  80bdc0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bdc4:	e0bffe17 	ldw	r2,-8(fp)
  80bdc8:	10800a17 	ldw	r2,40(r2)
  80bdcc:	10800044 	addi	r2,r2,1
  80bdd0:	1081ffcc 	andi	r2,r2,2047
  80bdd4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80bdd8:	e0bffe17 	ldw	r2,-8(fp)
  80bddc:	10c00b17 	ldw	r3,44(r2)
  80bde0:	e0bffa17 	ldw	r2,-24(fp)
  80bde4:	18801626 	beq	r3,r2,80be40 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80bde8:	e0bffd17 	ldw	r2,-12(fp)
  80bdec:	10800037 	ldwio	r2,0(r2)
  80bdf0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80bdf4:	e0bffb17 	ldw	r2,-20(fp)
  80bdf8:	10a0000c 	andi	r2,r2,32768
  80bdfc:	1005003a 	cmpeq	r2,r2,zero
  80be00:	10000f1e 	bne	r2,zero,80be40 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80be04:	e0bffe17 	ldw	r2,-8(fp)
  80be08:	10c00a17 	ldw	r3,40(r2)
  80be0c:	e0bffb17 	ldw	r2,-20(fp)
  80be10:	1009883a 	mov	r4,r2
  80be14:	e0bffe17 	ldw	r2,-8(fp)
  80be18:	1885883a 	add	r2,r3,r2
  80be1c:	10800e04 	addi	r2,r2,56
  80be20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80be24:	e0bffe17 	ldw	r2,-8(fp)
  80be28:	10800a17 	ldw	r2,40(r2)
  80be2c:	10800044 	addi	r2,r2,1
  80be30:	10c1ffcc 	andi	r3,r2,2047
  80be34:	e0bffe17 	ldw	r2,-8(fp)
  80be38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80be3c:	003fe106 	br	80bdc4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80be40:	e0bffb17 	ldw	r2,-20(fp)
  80be44:	10bfffec 	andhi	r2,r2,65535
  80be48:	1005003a 	cmpeq	r2,r2,zero
  80be4c:	1000101e 	bne	r2,zero,80be90 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80be50:	e0bffe17 	ldw	r2,-8(fp)
  80be54:	10c00817 	ldw	r3,32(r2)
  80be58:	00bfff84 	movi	r2,-2
  80be5c:	1886703a 	and	r3,r3,r2
  80be60:	e0bffe17 	ldw	r2,-8(fp)
  80be64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80be68:	e0bffd17 	ldw	r2,-12(fp)
  80be6c:	11000104 	addi	r4,r2,4
  80be70:	e0bffe17 	ldw	r2,-8(fp)
  80be74:	10800817 	ldw	r2,32(r2)
  80be78:	1007883a 	mov	r3,r2
  80be7c:	2005883a 	mov	r2,r4
  80be80:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80be84:	e0bffd17 	ldw	r2,-12(fp)
  80be88:	10800104 	addi	r2,r2,4
  80be8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80be90:	e0bffc17 	ldw	r2,-16(fp)
  80be94:	1080800c 	andi	r2,r2,512
  80be98:	1005003a 	cmpeq	r2,r2,zero
  80be9c:	103fbb1e 	bne	r2,zero,80bd8c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80bea0:	e0bffc17 	ldw	r2,-16(fp)
  80bea4:	10bfffec 	andhi	r2,r2,65535
  80bea8:	1004d43a 	srli	r2,r2,16
  80beac:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80beb0:	00001506 	br	80bf08 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80beb4:	e13ffd17 	ldw	r4,-12(fp)
  80beb8:	e0bffe17 	ldw	r2,-8(fp)
  80bebc:	10c00d17 	ldw	r3,52(r2)
  80bec0:	e0bffe17 	ldw	r2,-8(fp)
  80bec4:	1885883a 	add	r2,r3,r2
  80bec8:	10820e04 	addi	r2,r2,2104
  80becc:	10800003 	ldbu	r2,0(r2)
  80bed0:	10c03fcc 	andi	r3,r2,255
  80bed4:	18c0201c 	xori	r3,r3,128
  80bed8:	18ffe004 	addi	r3,r3,-128
  80bedc:	2005883a 	mov	r2,r4
  80bee0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bee4:	e0bffe17 	ldw	r2,-8(fp)
  80bee8:	10800d17 	ldw	r2,52(r2)
  80beec:	10800044 	addi	r2,r2,1
  80bef0:	10c1ffcc 	andi	r3,r2,2047
  80bef4:	e0bffe17 	ldw	r2,-8(fp)
  80bef8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80befc:	e0bff917 	ldw	r2,-28(fp)
  80bf00:	10bfffc4 	addi	r2,r2,-1
  80bf04:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80bf08:	e0bff917 	ldw	r2,-28(fp)
  80bf0c:	1005003a 	cmpeq	r2,r2,zero
  80bf10:	1000051e 	bne	r2,zero,80bf28 <altera_avalon_jtag_uart_irq+0x1c4>
  80bf14:	e0bffe17 	ldw	r2,-8(fp)
  80bf18:	10c00d17 	ldw	r3,52(r2)
  80bf1c:	e0bffe17 	ldw	r2,-8(fp)
  80bf20:	10800c17 	ldw	r2,48(r2)
  80bf24:	18bfe31e 	bne	r3,r2,80beb4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80bf28:	e0bff917 	ldw	r2,-28(fp)
  80bf2c:	1005003a 	cmpeq	r2,r2,zero
  80bf30:	103f961e 	bne	r2,zero,80bd8c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80bf34:	e0bffe17 	ldw	r2,-8(fp)
  80bf38:	10c00817 	ldw	r3,32(r2)
  80bf3c:	00bfff44 	movi	r2,-3
  80bf40:	1886703a 	and	r3,r3,r2
  80bf44:	e0bffe17 	ldw	r2,-8(fp)
  80bf48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bf4c:	e0bffe17 	ldw	r2,-8(fp)
  80bf50:	10800017 	ldw	r2,0(r2)
  80bf54:	11000104 	addi	r4,r2,4
  80bf58:	e0bffe17 	ldw	r2,-8(fp)
  80bf5c:	10800817 	ldw	r2,32(r2)
  80bf60:	1007883a 	mov	r3,r2
  80bf64:	2005883a 	mov	r2,r4
  80bf68:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bf6c:	e0bffd17 	ldw	r2,-12(fp)
  80bf70:	10800104 	addi	r2,r2,4
  80bf74:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80bf78:	003f8406 	br	80bd8c <altera_avalon_jtag_uart_irq+0x28>
}
  80bf7c:	e037883a 	mov	sp,fp
  80bf80:	df000017 	ldw	fp,0(sp)
  80bf84:	dec00104 	addi	sp,sp,4
  80bf88:	f800283a 	ret

0080bf8c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80bf8c:	defffc04 	addi	sp,sp,-16
  80bf90:	df000315 	stw	fp,12(sp)
  80bf94:	df000304 	addi	fp,sp,12
  80bf98:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80bf9c:	e0bfff17 	ldw	r2,-4(fp)
  80bfa0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80bfa4:	e0bffe17 	ldw	r2,-8(fp)
  80bfa8:	10800017 	ldw	r2,0(r2)
  80bfac:	10800104 	addi	r2,r2,4
  80bfb0:	10800037 	ldwio	r2,0(r2)
  80bfb4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80bfb8:	e0bffd17 	ldw	r2,-12(fp)
  80bfbc:	1081000c 	andi	r2,r2,1024
  80bfc0:	1005003a 	cmpeq	r2,r2,zero
  80bfc4:	10000c1e 	bne	r2,zero,80bff8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80bfc8:	e0bffe17 	ldw	r2,-8(fp)
  80bfcc:	10800017 	ldw	r2,0(r2)
  80bfd0:	11000104 	addi	r4,r2,4
  80bfd4:	e0bffe17 	ldw	r2,-8(fp)
  80bfd8:	10800817 	ldw	r2,32(r2)
  80bfdc:	10810014 	ori	r2,r2,1024
  80bfe0:	1007883a 	mov	r3,r2
  80bfe4:	2005883a 	mov	r2,r4
  80bfe8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80bfec:	e0bffe17 	ldw	r2,-8(fp)
  80bff0:	10000915 	stw	zero,36(r2)
  80bff4:	00000a06 	br	80c020 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80bff8:	e0bffe17 	ldw	r2,-8(fp)
  80bffc:	10c00917 	ldw	r3,36(r2)
  80c000:	00a00034 	movhi	r2,32768
  80c004:	10bfff04 	addi	r2,r2,-4
  80c008:	10c00536 	bltu	r2,r3,80c020 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80c00c:	e0bffe17 	ldw	r2,-8(fp)
  80c010:	10800917 	ldw	r2,36(r2)
  80c014:	10c00044 	addi	r3,r2,1
  80c018:	e0bffe17 	ldw	r2,-8(fp)
  80c01c:	10c00915 	stw	r3,36(r2)
  80c020:	00802074 	movhi	r2,129
  80c024:	108daa04 	addi	r2,r2,13992
  80c028:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80c02c:	e037883a 	mov	sp,fp
  80c030:	df000017 	ldw	fp,0(sp)
  80c034:	dec00104 	addi	sp,sp,4
  80c038:	f800283a 	ret

0080c03c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80c03c:	defffc04 	addi	sp,sp,-16
  80c040:	df000315 	stw	fp,12(sp)
  80c044:	df000304 	addi	fp,sp,12
  80c048:	e13ffd15 	stw	r4,-12(fp)
  80c04c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c050:	00000706 	br	80c070 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80c054:	e0bffe17 	ldw	r2,-8(fp)
  80c058:	1090000c 	andi	r2,r2,16384
  80c05c:	1005003a 	cmpeq	r2,r2,zero
  80c060:	1000031e 	bne	r2,zero,80c070 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80c064:	00bffd44 	movi	r2,-11
  80c068:	e0bfff15 	stw	r2,-4(fp)
  80c06c:	00000b06 	br	80c09c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c070:	e0bffd17 	ldw	r2,-12(fp)
  80c074:	10c00d17 	ldw	r3,52(r2)
  80c078:	e0bffd17 	ldw	r2,-12(fp)
  80c07c:	10800c17 	ldw	r2,48(r2)
  80c080:	18800526 	beq	r3,r2,80c098 <altera_avalon_jtag_uart_close+0x5c>
  80c084:	e0bffd17 	ldw	r2,-12(fp)
  80c088:	10c00917 	ldw	r3,36(r2)
  80c08c:	e0bffd17 	ldw	r2,-12(fp)
  80c090:	10800117 	ldw	r2,4(r2)
  80c094:	18bfef36 	bltu	r3,r2,80c054 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c098:	e03fff15 	stw	zero,-4(fp)
  80c09c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c0a0:	e037883a 	mov	sp,fp
  80c0a4:	df000017 	ldw	fp,0(sp)
  80c0a8:	dec00104 	addi	sp,sp,4
  80c0ac:	f800283a 	ret

0080c0b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80c0b0:	defff804 	addi	sp,sp,-32
  80c0b4:	df000715 	stw	fp,28(sp)
  80c0b8:	df000704 	addi	fp,sp,28
  80c0bc:	e13ffb15 	stw	r4,-20(fp)
  80c0c0:	e17ffc15 	stw	r5,-16(fp)
  80c0c4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80c0c8:	00bff9c4 	movi	r2,-25
  80c0cc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80c0d0:	e0bffc17 	ldw	r2,-16(fp)
  80c0d4:	e0bfff15 	stw	r2,-4(fp)
  80c0d8:	e0ffff17 	ldw	r3,-4(fp)
  80c0dc:	189a8060 	cmpeqi	r2,r3,27137
  80c0e0:	1000041e 	bne	r2,zero,80c0f4 <altera_avalon_jtag_uart_ioctl+0x44>
  80c0e4:	e0ffff17 	ldw	r3,-4(fp)
  80c0e8:	189a80a0 	cmpeqi	r2,r3,27138
  80c0ec:	10001b1e 	bne	r2,zero,80c15c <altera_avalon_jtag_uart_ioctl+0xac>
  80c0f0:	00002706 	br	80c190 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80c0f4:	e0bffb17 	ldw	r2,-20(fp)
  80c0f8:	10c00117 	ldw	r3,4(r2)
  80c0fc:	00a00034 	movhi	r2,32768
  80c100:	10bfffc4 	addi	r2,r2,-1
  80c104:	18802226 	beq	r3,r2,80c190 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80c108:	e0bffd17 	ldw	r2,-12(fp)
  80c10c:	10800017 	ldw	r2,0(r2)
  80c110:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80c114:	e0bff917 	ldw	r2,-28(fp)
  80c118:	10800090 	cmplti	r2,r2,2
  80c11c:	1000071e 	bne	r2,zero,80c13c <altera_avalon_jtag_uart_ioctl+0x8c>
  80c120:	e0fff917 	ldw	r3,-28(fp)
  80c124:	00a00034 	movhi	r2,32768
  80c128:	10bfffc4 	addi	r2,r2,-1
  80c12c:	18800326 	beq	r3,r2,80c13c <altera_avalon_jtag_uart_ioctl+0x8c>
  80c130:	e0bff917 	ldw	r2,-28(fp)
  80c134:	e0bffe15 	stw	r2,-8(fp)
  80c138:	00000306 	br	80c148 <altera_avalon_jtag_uart_ioctl+0x98>
  80c13c:	00e00034 	movhi	r3,32768
  80c140:	18ffff84 	addi	r3,r3,-2
  80c144:	e0fffe15 	stw	r3,-8(fp)
  80c148:	e0bffb17 	ldw	r2,-20(fp)
  80c14c:	e0fffe17 	ldw	r3,-8(fp)
  80c150:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80c154:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80c158:	00000d06 	br	80c190 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80c15c:	e0bffb17 	ldw	r2,-20(fp)
  80c160:	10c00117 	ldw	r3,4(r2)
  80c164:	00a00034 	movhi	r2,32768
  80c168:	10bfffc4 	addi	r2,r2,-1
  80c16c:	18800826 	beq	r3,r2,80c190 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80c170:	e13ffd17 	ldw	r4,-12(fp)
  80c174:	e0bffb17 	ldw	r2,-20(fp)
  80c178:	10c00917 	ldw	r3,36(r2)
  80c17c:	e0bffb17 	ldw	r2,-20(fp)
  80c180:	10800117 	ldw	r2,4(r2)
  80c184:	1885803a 	cmpltu	r2,r3,r2
  80c188:	20800015 	stw	r2,0(r4)
      rc = 0;
  80c18c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80c190:	e0bffa17 	ldw	r2,-24(fp)
}
  80c194:	e037883a 	mov	sp,fp
  80c198:	df000017 	ldw	fp,0(sp)
  80c19c:	dec00104 	addi	sp,sp,4
  80c1a0:	f800283a 	ret

0080c1a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80c1a4:	defff204 	addi	sp,sp,-56
  80c1a8:	dfc00d15 	stw	ra,52(sp)
  80c1ac:	df000c15 	stw	fp,48(sp)
  80c1b0:	df000c04 	addi	fp,sp,48
  80c1b4:	e13ffb15 	stw	r4,-20(fp)
  80c1b8:	e17ffc15 	stw	r5,-16(fp)
  80c1bc:	e1bffd15 	stw	r6,-12(fp)
  80c1c0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80c1c4:	e0bffc17 	ldw	r2,-16(fp)
  80c1c8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c1cc:	00004806 	br	80c2f0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80c1d0:	e0bffb17 	ldw	r2,-20(fp)
  80c1d4:	10800a17 	ldw	r2,40(r2)
  80c1d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80c1dc:	e0bffb17 	ldw	r2,-20(fp)
  80c1e0:	10800b17 	ldw	r2,44(r2)
  80c1e4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80c1e8:	e0fff717 	ldw	r3,-36(fp)
  80c1ec:	e0bff617 	ldw	r2,-40(fp)
  80c1f0:	18800536 	bltu	r3,r2,80c208 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80c1f4:	e0bff717 	ldw	r2,-36(fp)
  80c1f8:	e0fff617 	ldw	r3,-40(fp)
  80c1fc:	10c5c83a 	sub	r2,r2,r3
  80c200:	e0bff815 	stw	r2,-32(fp)
  80c204:	00000406 	br	80c218 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80c208:	00820004 	movi	r2,2048
  80c20c:	e0fff617 	ldw	r3,-40(fp)
  80c210:	10c5c83a 	sub	r2,r2,r3
  80c214:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80c218:	e0bff817 	ldw	r2,-32(fp)
  80c21c:	1005003a 	cmpeq	r2,r2,zero
  80c220:	10001f1e 	bne	r2,zero,80c2a0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80c224:	e0fffd17 	ldw	r3,-12(fp)
  80c228:	e0bff817 	ldw	r2,-32(fp)
  80c22c:	1880022e 	bgeu	r3,r2,80c238 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80c230:	e0bffd17 	ldw	r2,-12(fp)
  80c234:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c238:	e0bffb17 	ldw	r2,-20(fp)
  80c23c:	10c00e04 	addi	r3,r2,56
  80c240:	e0bff617 	ldw	r2,-40(fp)
  80c244:	1887883a 	add	r3,r3,r2
  80c248:	e0bffa17 	ldw	r2,-24(fp)
  80c24c:	1009883a 	mov	r4,r2
  80c250:	180b883a 	mov	r5,r3
  80c254:	e1bff817 	ldw	r6,-32(fp)
  80c258:	0806ad40 	call	806ad4 <memcpy>
      ptr   += n;
  80c25c:	e0fff817 	ldw	r3,-32(fp)
  80c260:	e0bffa17 	ldw	r2,-24(fp)
  80c264:	10c5883a 	add	r2,r2,r3
  80c268:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80c26c:	e0fffd17 	ldw	r3,-12(fp)
  80c270:	e0bff817 	ldw	r2,-32(fp)
  80c274:	1885c83a 	sub	r2,r3,r2
  80c278:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c27c:	e0fff617 	ldw	r3,-40(fp)
  80c280:	e0bff817 	ldw	r2,-32(fp)
  80c284:	1885883a 	add	r2,r3,r2
  80c288:	10c1ffcc 	andi	r3,r2,2047
  80c28c:	e0bffb17 	ldw	r2,-20(fp)
  80c290:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80c294:	e0bffd17 	ldw	r2,-12(fp)
  80c298:	10800048 	cmpgei	r2,r2,1
  80c29c:	103fcc1e 	bne	r2,zero,80c1d0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80c2a0:	e0fffa17 	ldw	r3,-24(fp)
  80c2a4:	e0bffc17 	ldw	r2,-16(fp)
  80c2a8:	1880141e 	bne	r3,r2,80c2fc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c2ac:	e0bffe17 	ldw	r2,-8(fp)
  80c2b0:	1090000c 	andi	r2,r2,16384
  80c2b4:	1004c03a 	cmpne	r2,r2,zero
  80c2b8:	1000101e 	bne	r2,zero,80c2fc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c2bc:	e0bffb17 	ldw	r2,-20(fp)
  80c2c0:	10c00a17 	ldw	r3,40(r2)
  80c2c4:	e0bff717 	ldw	r2,-36(fp)
  80c2c8:	1880051e 	bne	r3,r2,80c2e0 <altera_avalon_jtag_uart_read+0x13c>
  80c2cc:	e0bffb17 	ldw	r2,-20(fp)
  80c2d0:	10c00917 	ldw	r3,36(r2)
  80c2d4:	e0bffb17 	ldw	r2,-20(fp)
  80c2d8:	10800117 	ldw	r2,4(r2)
  80c2dc:	18bff736 	bltu	r3,r2,80c2bc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c2e0:	e0bffb17 	ldw	r2,-20(fp)
  80c2e4:	10c00a17 	ldw	r3,40(r2)
  80c2e8:	e0bff717 	ldw	r2,-36(fp)
  80c2ec:	18800326 	beq	r3,r2,80c2fc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c2f0:	e0bffd17 	ldw	r2,-12(fp)
  80c2f4:	10800048 	cmpgei	r2,r2,1
  80c2f8:	103fb51e 	bne	r2,zero,80c1d0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80c2fc:	e0fffa17 	ldw	r3,-24(fp)
  80c300:	e0bffc17 	ldw	r2,-16(fp)
  80c304:	18801926 	beq	r3,r2,80c36c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c308:	0005303a 	rdctl	r2,status
  80c30c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c310:	e0fff517 	ldw	r3,-44(fp)
  80c314:	00bfff84 	movi	r2,-2
  80c318:	1884703a 	and	r2,r3,r2
  80c31c:	1001703a 	wrctl	status,r2
  
  return context;
  80c320:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c324:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c328:	e0bffb17 	ldw	r2,-20(fp)
  80c32c:	10800817 	ldw	r2,32(r2)
  80c330:	10c00054 	ori	r3,r2,1
  80c334:	e0bffb17 	ldw	r2,-20(fp)
  80c338:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c33c:	e0bffb17 	ldw	r2,-20(fp)
  80c340:	10800017 	ldw	r2,0(r2)
  80c344:	11000104 	addi	r4,r2,4
  80c348:	e0bffb17 	ldw	r2,-20(fp)
  80c34c:	10800817 	ldw	r2,32(r2)
  80c350:	1007883a 	mov	r3,r2
  80c354:	2005883a 	mov	r2,r4
  80c358:	10c00035 	stwio	r3,0(r2)
  80c35c:	e0bff917 	ldw	r2,-28(fp)
  80c360:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c364:	e0bff417 	ldw	r2,-48(fp)
  80c368:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c36c:	e0fffa17 	ldw	r3,-24(fp)
  80c370:	e0bffc17 	ldw	r2,-16(fp)
  80c374:	18800526 	beq	r3,r2,80c38c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80c378:	e0fffa17 	ldw	r3,-24(fp)
  80c37c:	e0bffc17 	ldw	r2,-16(fp)
  80c380:	1887c83a 	sub	r3,r3,r2
  80c384:	e0ffff15 	stw	r3,-4(fp)
  80c388:	00000906 	br	80c3b0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80c38c:	e0bffe17 	ldw	r2,-8(fp)
  80c390:	1090000c 	andi	r2,r2,16384
  80c394:	1005003a 	cmpeq	r2,r2,zero
  80c398:	1000031e 	bne	r2,zero,80c3a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80c39c:	00bffd44 	movi	r2,-11
  80c3a0:	e0bfff15 	stw	r2,-4(fp)
  80c3a4:	00000206 	br	80c3b0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80c3a8:	00bffec4 	movi	r2,-5
  80c3ac:	e0bfff15 	stw	r2,-4(fp)
  80c3b0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c3b4:	e037883a 	mov	sp,fp
  80c3b8:	dfc00117 	ldw	ra,4(sp)
  80c3bc:	df000017 	ldw	fp,0(sp)
  80c3c0:	dec00204 	addi	sp,sp,8
  80c3c4:	f800283a 	ret

0080c3c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c3c8:	defff204 	addi	sp,sp,-56
  80c3cc:	dfc00d15 	stw	ra,52(sp)
  80c3d0:	df000c15 	stw	fp,48(sp)
  80c3d4:	df000c04 	addi	fp,sp,48
  80c3d8:	e13ffb15 	stw	r4,-20(fp)
  80c3dc:	e17ffc15 	stw	r5,-16(fp)
  80c3e0:	e1bffd15 	stw	r6,-12(fp)
  80c3e4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c3e8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c3ec:	e0bffc17 	ldw	r2,-16(fp)
  80c3f0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c3f4:	00003a06 	br	80c4e0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c3f8:	e0bffb17 	ldw	r2,-20(fp)
  80c3fc:	10800c17 	ldw	r2,48(r2)
  80c400:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80c404:	e0bffb17 	ldw	r2,-20(fp)
  80c408:	10800d17 	ldw	r2,52(r2)
  80c40c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80c410:	e0fffa17 	ldw	r3,-24(fp)
  80c414:	e0bff917 	ldw	r2,-28(fp)
  80c418:	1880062e 	bgeu	r3,r2,80c434 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80c41c:	e0fff917 	ldw	r3,-28(fp)
  80c420:	e0bffa17 	ldw	r2,-24(fp)
  80c424:	1885c83a 	sub	r2,r3,r2
  80c428:	10bfffc4 	addi	r2,r2,-1
  80c42c:	e0bff815 	stw	r2,-32(fp)
  80c430:	00000c06 	br	80c464 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80c434:	e0bff917 	ldw	r2,-28(fp)
  80c438:	1005003a 	cmpeq	r2,r2,zero
  80c43c:	1000051e 	bne	r2,zero,80c454 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c440:	00820004 	movi	r2,2048
  80c444:	e0fffa17 	ldw	r3,-24(fp)
  80c448:	10c5c83a 	sub	r2,r2,r3
  80c44c:	e0bff815 	stw	r2,-32(fp)
  80c450:	00000406 	br	80c464 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c454:	0081ffc4 	movi	r2,2047
  80c458:	e0fffa17 	ldw	r3,-24(fp)
  80c45c:	10c5c83a 	sub	r2,r2,r3
  80c460:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80c464:	e0bff817 	ldw	r2,-32(fp)
  80c468:	1005003a 	cmpeq	r2,r2,zero
  80c46c:	10001f1e 	bne	r2,zero,80c4ec <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80c470:	e0fffd17 	ldw	r3,-12(fp)
  80c474:	e0bff817 	ldw	r2,-32(fp)
  80c478:	1880022e 	bgeu	r3,r2,80c484 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80c47c:	e0bffd17 	ldw	r2,-12(fp)
  80c480:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80c484:	e0bffb17 	ldw	r2,-20(fp)
  80c488:	10c20e04 	addi	r3,r2,2104
  80c48c:	e0bffa17 	ldw	r2,-24(fp)
  80c490:	1885883a 	add	r2,r3,r2
  80c494:	e0fffc17 	ldw	r3,-16(fp)
  80c498:	1009883a 	mov	r4,r2
  80c49c:	180b883a 	mov	r5,r3
  80c4a0:	e1bff817 	ldw	r6,-32(fp)
  80c4a4:	0806ad40 	call	806ad4 <memcpy>
      ptr   += n;
  80c4a8:	e0fff817 	ldw	r3,-32(fp)
  80c4ac:	e0bffc17 	ldw	r2,-16(fp)
  80c4b0:	10c5883a 	add	r2,r2,r3
  80c4b4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80c4b8:	e0fffd17 	ldw	r3,-12(fp)
  80c4bc:	e0bff817 	ldw	r2,-32(fp)
  80c4c0:	1885c83a 	sub	r2,r3,r2
  80c4c4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c4c8:	e0fffa17 	ldw	r3,-24(fp)
  80c4cc:	e0bff817 	ldw	r2,-32(fp)
  80c4d0:	1885883a 	add	r2,r3,r2
  80c4d4:	10c1ffcc 	andi	r3,r2,2047
  80c4d8:	e0bffb17 	ldw	r2,-20(fp)
  80c4dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c4e0:	e0bffd17 	ldw	r2,-12(fp)
  80c4e4:	10800048 	cmpgei	r2,r2,1
  80c4e8:	103fc31e 	bne	r2,zero,80c3f8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c4ec:	0005303a 	rdctl	r2,status
  80c4f0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c4f4:	e0fff517 	ldw	r3,-44(fp)
  80c4f8:	00bfff84 	movi	r2,-2
  80c4fc:	1884703a 	and	r2,r3,r2
  80c500:	1001703a 	wrctl	status,r2
  
  return context;
  80c504:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80c508:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c50c:	e0bffb17 	ldw	r2,-20(fp)
  80c510:	10800817 	ldw	r2,32(r2)
  80c514:	10c00094 	ori	r3,r2,2
  80c518:	e0bffb17 	ldw	r2,-20(fp)
  80c51c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c520:	e0bffb17 	ldw	r2,-20(fp)
  80c524:	10800017 	ldw	r2,0(r2)
  80c528:	11000104 	addi	r4,r2,4
  80c52c:	e0bffb17 	ldw	r2,-20(fp)
  80c530:	10800817 	ldw	r2,32(r2)
  80c534:	1007883a 	mov	r3,r2
  80c538:	2005883a 	mov	r2,r4
  80c53c:	10c00035 	stwio	r3,0(r2)
  80c540:	e0bff717 	ldw	r2,-36(fp)
  80c544:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c548:	e0bff417 	ldw	r2,-48(fp)
  80c54c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80c550:	e0bffd17 	ldw	r2,-12(fp)
  80c554:	10800050 	cmplti	r2,r2,1
  80c558:	1000111e 	bne	r2,zero,80c5a0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80c55c:	e0bffe17 	ldw	r2,-8(fp)
  80c560:	1090000c 	andi	r2,r2,16384
  80c564:	1004c03a 	cmpne	r2,r2,zero
  80c568:	1000101e 	bne	r2,zero,80c5ac <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80c56c:	e0bffb17 	ldw	r2,-20(fp)
  80c570:	10c00d17 	ldw	r3,52(r2)
  80c574:	e0bff917 	ldw	r2,-28(fp)
  80c578:	1880051e 	bne	r3,r2,80c590 <altera_avalon_jtag_uart_write+0x1c8>
  80c57c:	e0bffb17 	ldw	r2,-20(fp)
  80c580:	10c00917 	ldw	r3,36(r2)
  80c584:	e0bffb17 	ldw	r2,-20(fp)
  80c588:	10800117 	ldw	r2,4(r2)
  80c58c:	18bff736 	bltu	r3,r2,80c56c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80c590:	e0bffb17 	ldw	r2,-20(fp)
  80c594:	10c00d17 	ldw	r3,52(r2)
  80c598:	e0bff917 	ldw	r2,-28(fp)
  80c59c:	18800326 	beq	r3,r2,80c5ac <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80c5a0:	e0bffd17 	ldw	r2,-12(fp)
  80c5a4:	10800048 	cmpgei	r2,r2,1
  80c5a8:	103fcd1e 	bne	r2,zero,80c4e0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80c5ac:	e0fffc17 	ldw	r3,-16(fp)
  80c5b0:	e0bff617 	ldw	r2,-40(fp)
  80c5b4:	18800526 	beq	r3,r2,80c5cc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80c5b8:	e0fffc17 	ldw	r3,-16(fp)
  80c5bc:	e0bff617 	ldw	r2,-40(fp)
  80c5c0:	1887c83a 	sub	r3,r3,r2
  80c5c4:	e0ffff15 	stw	r3,-4(fp)
  80c5c8:	00000906 	br	80c5f0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80c5cc:	e0bffe17 	ldw	r2,-8(fp)
  80c5d0:	1090000c 	andi	r2,r2,16384
  80c5d4:	1005003a 	cmpeq	r2,r2,zero
  80c5d8:	1000031e 	bne	r2,zero,80c5e8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80c5dc:	00bffd44 	movi	r2,-11
  80c5e0:	e0bfff15 	stw	r2,-4(fp)
  80c5e4:	00000206 	br	80c5f0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80c5e8:	00bffec4 	movi	r2,-5
  80c5ec:	e0bfff15 	stw	r2,-4(fp)
  80c5f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c5f4:	e037883a 	mov	sp,fp
  80c5f8:	dfc00117 	ldw	ra,4(sp)
  80c5fc:	df000017 	ldw	fp,0(sp)
  80c600:	dec00204 	addi	sp,sp,8
  80c604:	f800283a 	ret

0080c608 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80c608:	defffa04 	addi	sp,sp,-24
  80c60c:	dfc00515 	stw	ra,20(sp)
  80c610:	df000415 	stw	fp,16(sp)
  80c614:	df000404 	addi	fp,sp,16
  80c618:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80c61c:	e0bfff17 	ldw	r2,-4(fp)
  80c620:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80c624:	e0bfff17 	ldw	r2,-4(fp)
  80c628:	10800104 	addi	r2,r2,4
  80c62c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c630:	0005303a 	rdctl	r2,status
  80c634:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c638:	e0fffd17 	ldw	r3,-12(fp)
  80c63c:	00bfff84 	movi	r2,-2
  80c640:	1884703a 	and	r2,r3,r2
  80c644:	1001703a 	wrctl	status,r2
  
  return context;
  80c648:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80c64c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80c650:	080b4e40 	call	80b4e4 <alt_tick>
  80c654:	e0bffe17 	ldw	r2,-8(fp)
  80c658:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c65c:	e0bffc17 	ldw	r2,-16(fp)
  80c660:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80c664:	e037883a 	mov	sp,fp
  80c668:	dfc00117 	ldw	ra,4(sp)
  80c66c:	df000017 	ldw	fp,0(sp)
  80c670:	dec00204 	addi	sp,sp,8
  80c674:	f800283a 	ret

0080c678 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80c678:	defff804 	addi	sp,sp,-32
  80c67c:	dfc00715 	stw	ra,28(sp)
  80c680:	df000615 	stw	fp,24(sp)
  80c684:	df000604 	addi	fp,sp,24
  80c688:	e13ffc15 	stw	r4,-16(fp)
  80c68c:	e17ffd15 	stw	r5,-12(fp)
  80c690:	e1bffe15 	stw	r6,-8(fp)
  80c694:	e1ffff15 	stw	r7,-4(fp)
  80c698:	e0bfff17 	ldw	r2,-4(fp)
  80c69c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80c6a0:	00802074 	movhi	r2,129
  80c6a4:	108daa04 	addi	r2,r2,13992
  80c6a8:	10800017 	ldw	r2,0(r2)
  80c6ac:	1004c03a 	cmpne	r2,r2,zero
  80c6b0:	1000041e 	bne	r2,zero,80c6c4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80c6b4:	00c02074 	movhi	r3,129
  80c6b8:	18cdaa04 	addi	r3,r3,13992
  80c6bc:	e0bffb17 	ldw	r2,-20(fp)
  80c6c0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80c6c4:	e0bffc17 	ldw	r2,-16(fp)
  80c6c8:	10800104 	addi	r2,r2,4
  80c6cc:	1007883a 	mov	r3,r2
  80c6d0:	008001c4 	movi	r2,7
  80c6d4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80c6d8:	d8000015 	stw	zero,0(sp)
  80c6dc:	e13ffd17 	ldw	r4,-12(fp)
  80c6e0:	e17ffe17 	ldw	r5,-8(fp)
  80c6e4:	01802074 	movhi	r6,129
  80c6e8:	31b18204 	addi	r6,r6,-14840
  80c6ec:	e1fffc17 	ldw	r7,-16(fp)
  80c6f0:	080eb940 	call	80eb94 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80c6f4:	e037883a 	mov	sp,fp
  80c6f8:	dfc00117 	ldw	ra,4(sp)
  80c6fc:	df000017 	ldw	fp,0(sp)
  80c700:	dec00204 	addi	sp,sp,8
  80c704:	f800283a 	ret

0080c708 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  80c708:	defffd04 	addi	sp,sp,-12
  80c70c:	df000215 	stw	fp,8(sp)
  80c710:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
  80c714:	00802074 	movhi	r2,129
  80c718:	108dac04 	addi	r2,r2,14000
  80c71c:	10800017 	ldw	r2,0(r2)
  80c720:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  80c724:	00802074 	movhi	r2,129
  80c728:	108dad04 	addi	r2,r2,14004
  80c72c:	10800017 	ldw	r2,0(r2)
  80c730:	1004c03a 	cmpne	r2,r2,zero
  80c734:	1000031e 	bne	r2,zero,80c744 <alt_timestamp_start+0x3c>
  {
    return -1;
  80c738:	00bfffc4 	movi	r2,-1
  80c73c:	e0bfff15 	stw	r2,-4(fp)
  80c740:	00001506 	br	80c798 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  80c744:	e0bffe17 	ldw	r2,-8(fp)
  80c748:	10800104 	addi	r2,r2,4
  80c74c:	1007883a 	mov	r3,r2
  80c750:	00800204 	movi	r2,8
  80c754:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  80c758:	e0bffe17 	ldw	r2,-8(fp)
  80c75c:	10800204 	addi	r2,r2,8
  80c760:	1007883a 	mov	r3,r2
  80c764:	00bfffd4 	movui	r2,65535
  80c768:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  80c76c:	e0bffe17 	ldw	r2,-8(fp)
  80c770:	10800304 	addi	r2,r2,12
  80c774:	1007883a 	mov	r3,r2
  80c778:	00bfffd4 	movui	r2,65535
  80c77c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  80c780:	e0bffe17 	ldw	r2,-8(fp)
  80c784:	10800104 	addi	r2,r2,4
  80c788:	1007883a 	mov	r3,r2
  80c78c:	00800104 	movi	r2,4
  80c790:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
  80c794:	e03fff15 	stw	zero,-4(fp)
  80c798:	e0bfff17 	ldw	r2,-4(fp)
}
  80c79c:	e037883a 	mov	sp,fp
  80c7a0:	df000017 	ldw	fp,0(sp)
  80c7a4:	dec00104 	addi	sp,sp,4
  80c7a8:	f800283a 	ret

0080c7ac <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  80c7ac:	defffb04 	addi	sp,sp,-20
  80c7b0:	df000415 	stw	fp,16(sp)
  80c7b4:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
  80c7b8:	00802074 	movhi	r2,129
  80c7bc:	108dac04 	addi	r2,r2,14000
  80c7c0:	10800017 	ldw	r2,0(r2)
  80c7c4:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  80c7c8:	00802074 	movhi	r2,129
  80c7cc:	108dad04 	addi	r2,r2,14004
  80c7d0:	10800017 	ldw	r2,0(r2)
  80c7d4:	1004c03a 	cmpne	r2,r2,zero
  80c7d8:	1000031e 	bne	r2,zero,80c7e8 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
  80c7dc:	00bfffc4 	movi	r2,-1
  80c7e0:	e0bfff15 	stw	r2,-4(fp)
  80c7e4:	00001306 	br	80c834 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  80c7e8:	e0bffe17 	ldw	r2,-8(fp)
  80c7ec:	10800404 	addi	r2,r2,16
  80c7f0:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  80c7f4:	e0bffe17 	ldw	r2,-8(fp)
  80c7f8:	10800404 	addi	r2,r2,16
  80c7fc:	10800037 	ldwio	r2,0(r2)
  80c800:	10bfffcc 	andi	r2,r2,65535
  80c804:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  80c808:	e0bffe17 	ldw	r2,-8(fp)
  80c80c:	10800504 	addi	r2,r2,20
  80c810:	10800037 	ldwio	r2,0(r2)
  80c814:	10bfffcc 	andi	r2,r2,65535
  80c818:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  80c81c:	e0bffc17 	ldw	r2,-16(fp)
  80c820:	1006943a 	slli	r3,r2,16
  80c824:	e0bffd17 	ldw	r2,-12(fp)
  80c828:	1884b03a 	or	r2,r3,r2
  80c82c:	0084303a 	nor	r2,zero,r2
  80c830:	e0bfff15 	stw	r2,-4(fp)
  80c834:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
  80c838:	e037883a 	mov	sp,fp
  80c83c:	df000017 	ldw	fp,0(sp)
  80c840:	dec00104 	addi	sp,sp,4
  80c844:	f800283a 	ret

0080c848 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  80c848:	deffff04 	addi	sp,sp,-4
  80c84c:	df000015 	stw	fp,0(sp)
  80c850:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  80c854:	00802074 	movhi	r2,129
  80c858:	108dad04 	addi	r2,r2,14004
  80c85c:	10800017 	ldw	r2,0(r2)
}
  80c860:	e037883a 	mov	sp,fp
  80c864:	df000017 	ldw	fp,0(sp)
  80c868:	dec00104 	addi	sp,sp,4
  80c86c:	f800283a 	ret

0080c870 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  80c870:	defffc04 	addi	sp,sp,-16
  80c874:	df000315 	stw	fp,12(sp)
  80c878:	df000304 	addi	fp,sp,12
  80c87c:	e13ffe15 	stw	r4,-8(fp)
  80c880:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  80c884:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  80c888:	e0bfff17 	ldw	r2,-4(fp)
  80c88c:	1004c03a 	cmpne	r2,r2,zero
  80c890:	1000061e 	bne	r2,zero,80c8ac <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  80c894:	e0bffe17 	ldw	r2,-8(fp)
  80c898:	1007883a 	mov	r3,r2
  80c89c:	e0bffd03 	ldbu	r2,-12(fp)
  80c8a0:	10c4b03a 	or	r2,r2,r3
  80c8a4:	e0bffd05 	stb	r2,-12(fp)
  80c8a8:	00000806 	br	80c8cc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  80c8ac:	e0bffe17 	ldw	r2,-8(fp)
  80c8b0:	1007883a 	mov	r3,r2
  80c8b4:	e0bffd03 	ldbu	r2,-12(fp)
  80c8b8:	10c4b03a 	or	r2,r2,r3
  80c8bc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  80c8c0:	e0bffd03 	ldbu	r2,-12(fp)
  80c8c4:	10801014 	ori	r2,r2,64
  80c8c8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  80c8cc:	e0fffd03 	ldbu	r3,-12(fp)
  80c8d0:	00bfe004 	movi	r2,-128
  80c8d4:	1884b03a 	or	r2,r3,r2
  80c8d8:	10803fcc 	andi	r2,r2,255
}
  80c8dc:	e037883a 	mov	sp,fp
  80c8e0:	df000017 	ldw	fp,0(sp)
  80c8e4:	dec00104 	addi	sp,sp,4
  80c8e8:	f800283a 	ret

0080c8ec <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  80c8ec:	defffd04 	addi	sp,sp,-12
  80c8f0:	df000215 	stw	fp,8(sp)
  80c8f4:	df000204 	addi	fp,sp,8
  80c8f8:	e13ffe15 	stw	r4,-8(fp)
  80c8fc:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  80c900:	e0bffe17 	ldw	r2,-8(fp)
  80c904:	10800a17 	ldw	r2,40(r2)
  80c908:	e0ffff03 	ldbu	r3,-4(fp)
  80c90c:	10c00025 	stbio	r3,0(r2)
}
  80c910:	e037883a 	mov	sp,fp
  80c914:	df000017 	ldw	fp,0(sp)
  80c918:	dec00104 	addi	sp,sp,4
  80c91c:	f800283a 	ret

0080c920 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  80c920:	defffe04 	addi	sp,sp,-8
  80c924:	df000115 	stw	fp,4(sp)
  80c928:	df000104 	addi	fp,sp,4
  80c92c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  80c930:	e0bfff17 	ldw	r2,-4(fp)
  80c934:	10800a17 	ldw	r2,40(r2)
  80c938:	1007883a 	mov	r3,r2
  80c93c:	00800044 	movi	r2,1
  80c940:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  80c944:	e037883a 	mov	sp,fp
  80c948:	df000017 	ldw	fp,0(sp)
  80c94c:	dec00104 	addi	sp,sp,4
  80c950:	f800283a 	ret

0080c954 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  80c954:	defffc04 	addi	sp,sp,-16
  80c958:	dfc00315 	stw	ra,12(sp)
  80c95c:	df000215 	stw	fp,8(sp)
  80c960:	df000204 	addi	fp,sp,8
  80c964:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  80c968:	e13fff17 	ldw	r4,-4(fp)
  80c96c:	01402074 	movhi	r5,129
  80c970:	2946cf04 	addi	r5,r5,6972
  80c974:	080ead00 	call	80ead0 <alt_find_dev>
  80c978:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80c97c:	e0bffe17 	ldw	r2,-8(fp)
}
  80c980:	e037883a 	mov	sp,fp
  80c984:	dfc00117 	ldw	ra,4(sp)
  80c988:	df000017 	ldw	fp,0(sp)
  80c98c:	dec00204 	addi	sp,sp,8
  80c990:	f800283a 	ret

0080c994 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  80c994:	defffb04 	addi	sp,sp,-20
  80c998:	df000415 	stw	fp,16(sp)
  80c99c:	df000404 	addi	fp,sp,16
  80c9a0:	e13ffd15 	stw	r4,-12(fp)
  80c9a4:	e17ffe15 	stw	r5,-8(fp)
  80c9a8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  80c9ac:	e03ffc15 	stw	zero,-16(fp)
  80c9b0:	00000f06 	br	80c9f0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  80c9b4:	e0bffd17 	ldw	r2,-12(fp)
  80c9b8:	10800a17 	ldw	r2,40(r2)
  80c9bc:	11000044 	addi	r4,r2,1
  80c9c0:	e0fffc17 	ldw	r3,-16(fp)
  80c9c4:	e0bffe17 	ldw	r2,-8(fp)
  80c9c8:	1885883a 	add	r2,r3,r2
  80c9cc:	10800003 	ldbu	r2,0(r2)
  80c9d0:	10c03fcc 	andi	r3,r2,255
  80c9d4:	18c0201c 	xori	r3,r3,128
  80c9d8:	18ffe004 	addi	r3,r3,-128
  80c9dc:	2005883a 	mov	r2,r4
  80c9e0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  80c9e4:	e0bffc17 	ldw	r2,-16(fp)
  80c9e8:	10800044 	addi	r2,r2,1
  80c9ec:	e0bffc15 	stw	r2,-16(fp)
  80c9f0:	e0fffc17 	ldw	r3,-16(fp)
  80c9f4:	e0bfff17 	ldw	r2,-4(fp)
  80c9f8:	18bfee36 	bltu	r3,r2,80c9b4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  80c9fc:	e037883a 	mov	sp,fp
  80ca00:	df000017 	ldw	fp,0(sp)
  80ca04:	dec00104 	addi	sp,sp,4
  80ca08:	f800283a 	ret

0080ca0c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  80ca0c:	defffd04 	addi	sp,sp,-12
  80ca10:	df000215 	stw	fp,8(sp)
  80ca14:	df000204 	addi	fp,sp,8
  80ca18:	e13ffe15 	stw	r4,-8(fp)
  80ca1c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  80ca20:	00000d06 	br	80ca58 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  80ca24:	e0bffe17 	ldw	r2,-8(fp)
  80ca28:	10800a17 	ldw	r2,40(r2)
  80ca2c:	11000044 	addi	r4,r2,1
  80ca30:	e0bfff17 	ldw	r2,-4(fp)
  80ca34:	10800003 	ldbu	r2,0(r2)
  80ca38:	10c03fcc 	andi	r3,r2,255
  80ca3c:	18c0201c 	xori	r3,r3,128
  80ca40:	18ffe004 	addi	r3,r3,-128
  80ca44:	2005883a 	mov	r2,r4
  80ca48:	10c00025 	stbio	r3,0(r2)
		++ptr;
  80ca4c:	e0bfff17 	ldw	r2,-4(fp)
  80ca50:	10800044 	addi	r2,r2,1
  80ca54:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  80ca58:	e0bfff17 	ldw	r2,-4(fp)
  80ca5c:	10800003 	ldbu	r2,0(r2)
  80ca60:	10803fcc 	andi	r2,r2,255
  80ca64:	1080201c 	xori	r2,r2,128
  80ca68:	10bfe004 	addi	r2,r2,-128
  80ca6c:	1004c03a 	cmpne	r2,r2,zero
  80ca70:	103fec1e 	bne	r2,zero,80ca24 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  80ca74:	e037883a 	mov	sp,fp
  80ca78:	df000017 	ldw	fp,0(sp)
  80ca7c:	dec00104 	addi	sp,sp,4
  80ca80:	f800283a 	ret

0080ca84 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  80ca84:	defffb04 	addi	sp,sp,-20
  80ca88:	dfc00415 	stw	ra,16(sp)
  80ca8c:	df000315 	stw	fp,12(sp)
  80ca90:	df000304 	addi	fp,sp,12
  80ca94:	e13ffd15 	stw	r4,-12(fp)
  80ca98:	e17ffe15 	stw	r5,-8(fp)
  80ca9c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  80caa0:	e0bffd17 	ldw	r2,-12(fp)
  80caa4:	10800017 	ldw	r2,0(r2)
  80caa8:	1009883a 	mov	r4,r2
  80caac:	e1bfff17 	ldw	r6,-4(fp)
  80cab0:	e17ffe17 	ldw	r5,-8(fp)
  80cab4:	080c9940 	call	80c994 <alt_up_character_lcd_write>
	return 0;
  80cab8:	0005883a 	mov	r2,zero
}
  80cabc:	e037883a 	mov	sp,fp
  80cac0:	dfc00117 	ldw	ra,4(sp)
  80cac4:	df000017 	ldw	fp,0(sp)
  80cac8:	dec00204 	addi	sp,sp,8
  80cacc:	f800283a 	ret

0080cad0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  80cad0:	defff904 	addi	sp,sp,-28
  80cad4:	dfc00615 	stw	ra,24(sp)
  80cad8:	df000515 	stw	fp,20(sp)
  80cadc:	df000504 	addi	fp,sp,20
  80cae0:	e13ffc15 	stw	r4,-16(fp)
  80cae4:	e17ffd15 	stw	r5,-12(fp)
  80cae8:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  80caec:	e0bffd17 	ldw	r2,-12(fp)
  80caf0:	10800a28 	cmpgeui	r2,r2,40
  80caf4:	1000031e 	bne	r2,zero,80cb04 <alt_up_character_lcd_set_cursor_pos+0x34>
  80caf8:	e0bffe17 	ldw	r2,-8(fp)
  80cafc:	108000b0 	cmpltui	r2,r2,2
  80cb00:	1000031e 	bne	r2,zero,80cb10 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  80cb04:	00bfffc4 	movi	r2,-1
  80cb08:	e0bfff15 	stw	r2,-4(fp)
  80cb0c:	00000806 	br	80cb30 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80cb10:	e13ffd17 	ldw	r4,-12(fp)
  80cb14:	e17ffe17 	ldw	r5,-8(fp)
  80cb18:	080c8700 	call	80c870 <get_DDRAM_addr>
  80cb1c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  80cb20:	e17ffb03 	ldbu	r5,-20(fp)
  80cb24:	e13ffc17 	ldw	r4,-16(fp)
  80cb28:	080c8ec0 	call	80c8ec <alt_up_character_lcd_send_cmd>
	return 0;
  80cb2c:	e03fff15 	stw	zero,-4(fp)
  80cb30:	e0bfff17 	ldw	r2,-4(fp)
}
  80cb34:	e037883a 	mov	sp,fp
  80cb38:	dfc00117 	ldw	ra,4(sp)
  80cb3c:	df000017 	ldw	fp,0(sp)
  80cb40:	dec00204 	addi	sp,sp,8
  80cb44:	f800283a 	ret

0080cb48 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80cb48:	defff904 	addi	sp,sp,-28
  80cb4c:	dfc00615 	stw	ra,24(sp)
  80cb50:	df000515 	stw	fp,20(sp)
  80cb54:	df000504 	addi	fp,sp,20
  80cb58:	e13ffc15 	stw	r4,-16(fp)
  80cb5c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80cb60:	e0bffd17 	ldw	r2,-12(fp)
  80cb64:	1005003a 	cmpeq	r2,r2,zero
  80cb68:	10001e1e 	bne	r2,zero,80cbe4 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  80cb6c:	e0bffd17 	ldw	r2,-12(fp)
  80cb70:	10800050 	cmplti	r2,r2,1
  80cb74:	1000031e 	bne	r2,zero,80cb84 <alt_up_character_lcd_shift_cursor+0x3c>
  80cb78:	00800504 	movi	r2,20
  80cb7c:	e0bfff05 	stb	r2,-4(fp)
  80cb80:	00000206 	br	80cb8c <alt_up_character_lcd_shift_cursor+0x44>
  80cb84:	00c00404 	movi	r3,16
  80cb88:	e0ffff05 	stb	r3,-4(fp)
  80cb8c:	e0bfff03 	ldbu	r2,-4(fp)
  80cb90:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80cb94:	e0fffd17 	ldw	r3,-12(fp)
  80cb98:	e0fffe15 	stw	r3,-8(fp)
  80cb9c:	e0fffe17 	ldw	r3,-8(fp)
  80cba0:	1804403a 	cmpge	r2,r3,zero
  80cba4:	1000031e 	bne	r2,zero,80cbb4 <alt_up_character_lcd_shift_cursor+0x6c>
  80cba8:	e0bffe17 	ldw	r2,-8(fp)
  80cbac:	0085c83a 	sub	r2,zero,r2
  80cbb0:	e0bffe15 	stw	r2,-8(fp)
  80cbb4:	e0fffe17 	ldw	r3,-8(fp)
  80cbb8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80cbbc:	00000306 	br	80cbcc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80cbc0:	e17ffb43 	ldbu	r5,-19(fp)
  80cbc4:	e13ffc17 	ldw	r4,-16(fp)
  80cbc8:	080c8ec0 	call	80c8ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80cbcc:	e0bffb03 	ldbu	r2,-20(fp)
  80cbd0:	10bfffc4 	addi	r2,r2,-1
  80cbd4:	e0bffb05 	stb	r2,-20(fp)
  80cbd8:	e0bffb03 	ldbu	r2,-20(fp)
  80cbdc:	10803fd8 	cmpnei	r2,r2,255
  80cbe0:	103ff71e 	bne	r2,zero,80cbc0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80cbe4:	e037883a 	mov	sp,fp
  80cbe8:	dfc00117 	ldw	ra,4(sp)
  80cbec:	df000017 	ldw	fp,0(sp)
  80cbf0:	dec00204 	addi	sp,sp,8
  80cbf4:	f800283a 	ret

0080cbf8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80cbf8:	defff904 	addi	sp,sp,-28
  80cbfc:	dfc00615 	stw	ra,24(sp)
  80cc00:	df000515 	stw	fp,20(sp)
  80cc04:	df000504 	addi	fp,sp,20
  80cc08:	e13ffc15 	stw	r4,-16(fp)
  80cc0c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80cc10:	e0bffd17 	ldw	r2,-12(fp)
  80cc14:	1005003a 	cmpeq	r2,r2,zero
  80cc18:	10001e1e 	bne	r2,zero,80cc94 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  80cc1c:	e0bffd17 	ldw	r2,-12(fp)
  80cc20:	10800050 	cmplti	r2,r2,1
  80cc24:	1000031e 	bne	r2,zero,80cc34 <alt_up_character_lcd_shift_display+0x3c>
  80cc28:	00800704 	movi	r2,28
  80cc2c:	e0bfff05 	stb	r2,-4(fp)
  80cc30:	00000206 	br	80cc3c <alt_up_character_lcd_shift_display+0x44>
  80cc34:	00c00604 	movi	r3,24
  80cc38:	e0ffff05 	stb	r3,-4(fp)
  80cc3c:	e0bfff03 	ldbu	r2,-4(fp)
  80cc40:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80cc44:	e0fffd17 	ldw	r3,-12(fp)
  80cc48:	e0fffe15 	stw	r3,-8(fp)
  80cc4c:	e0fffe17 	ldw	r3,-8(fp)
  80cc50:	1804403a 	cmpge	r2,r3,zero
  80cc54:	1000031e 	bne	r2,zero,80cc64 <alt_up_character_lcd_shift_display+0x6c>
  80cc58:	e0bffe17 	ldw	r2,-8(fp)
  80cc5c:	0085c83a 	sub	r2,zero,r2
  80cc60:	e0bffe15 	stw	r2,-8(fp)
  80cc64:	e0fffe17 	ldw	r3,-8(fp)
  80cc68:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80cc6c:	00000306 	br	80cc7c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80cc70:	e17ffb43 	ldbu	r5,-19(fp)
  80cc74:	e13ffc17 	ldw	r4,-16(fp)
  80cc78:	080c8ec0 	call	80c8ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80cc7c:	e0bffb03 	ldbu	r2,-20(fp)
  80cc80:	10bfffc4 	addi	r2,r2,-1
  80cc84:	e0bffb05 	stb	r2,-20(fp)
  80cc88:	e0bffb03 	ldbu	r2,-20(fp)
  80cc8c:	10803fd8 	cmpnei	r2,r2,255
  80cc90:	103ff71e 	bne	r2,zero,80cc70 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80cc94:	e037883a 	mov	sp,fp
  80cc98:	dfc00117 	ldw	ra,4(sp)
  80cc9c:	df000017 	ldw	fp,0(sp)
  80cca0:	dec00204 	addi	sp,sp,8
  80cca4:	f800283a 	ret

0080cca8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  80cca8:	defff904 	addi	sp,sp,-28
  80ccac:	dfc00615 	stw	ra,24(sp)
  80ccb0:	df000515 	stw	fp,20(sp)
  80ccb4:	df000504 	addi	fp,sp,20
  80ccb8:	e13ffc15 	stw	r4,-16(fp)
  80ccbc:	e17ffd15 	stw	r5,-12(fp)
  80ccc0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  80ccc4:	e0bffd17 	ldw	r2,-12(fp)
  80ccc8:	10800a28 	cmpgeui	r2,r2,40
  80cccc:	1000031e 	bne	r2,zero,80ccdc <alt_up_character_lcd_erase_pos+0x34>
  80ccd0:	e0bffe17 	ldw	r2,-8(fp)
  80ccd4:	108000b0 	cmpltui	r2,r2,2
  80ccd8:	1000031e 	bne	r2,zero,80cce8 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  80ccdc:	00bfffc4 	movi	r2,-1
  80cce0:	e0bfff15 	stw	r2,-4(fp)
  80cce4:	00000e06 	br	80cd20 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80cce8:	e13ffd17 	ldw	r4,-12(fp)
  80ccec:	e17ffe17 	ldw	r5,-8(fp)
  80ccf0:	080c8700 	call	80c870 <get_DDRAM_addr>
  80ccf4:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  80ccf8:	e17ffb03 	ldbu	r5,-20(fp)
  80ccfc:	e13ffc17 	ldw	r4,-16(fp)
  80cd00:	080c8ec0 	call	80c8ec <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  80cd04:	e0bffc17 	ldw	r2,-16(fp)
  80cd08:	10800a17 	ldw	r2,40(r2)
  80cd0c:	10800044 	addi	r2,r2,1
  80cd10:	1007883a 	mov	r3,r2
  80cd14:	00800084 	movi	r2,2
  80cd18:	18800025 	stbio	r2,0(r3)
	return 0;
  80cd1c:	e03fff15 	stw	zero,-4(fp)
  80cd20:	e0bfff17 	ldw	r2,-4(fp)
}
  80cd24:	e037883a 	mov	sp,fp
  80cd28:	dfc00117 	ldw	ra,4(sp)
  80cd2c:	df000017 	ldw	fp,0(sp)
  80cd30:	dec00204 	addi	sp,sp,8
  80cd34:	f800283a 	ret

0080cd38 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  80cd38:	defffd04 	addi	sp,sp,-12
  80cd3c:	dfc00215 	stw	ra,8(sp)
  80cd40:	df000115 	stw	fp,4(sp)
  80cd44:	df000104 	addi	fp,sp,4
  80cd48:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  80cd4c:	e13fff17 	ldw	r4,-4(fp)
  80cd50:	01400304 	movi	r5,12
  80cd54:	080c8ec0 	call	80c8ec <alt_up_character_lcd_send_cmd>
}
  80cd58:	e037883a 	mov	sp,fp
  80cd5c:	dfc00117 	ldw	ra,4(sp)
  80cd60:	df000017 	ldw	fp,0(sp)
  80cd64:	dec00204 	addi	sp,sp,8
  80cd68:	f800283a 	ret

0080cd6c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  80cd6c:	defffd04 	addi	sp,sp,-12
  80cd70:	dfc00215 	stw	ra,8(sp)
  80cd74:	df000115 	stw	fp,4(sp)
  80cd78:	df000104 	addi	fp,sp,4
  80cd7c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  80cd80:	e13fff17 	ldw	r4,-4(fp)
  80cd84:	014003c4 	movi	r5,15
  80cd88:	080c8ec0 	call	80c8ec <alt_up_character_lcd_send_cmd>
}
  80cd8c:	e037883a 	mov	sp,fp
  80cd90:	dfc00117 	ldw	ra,4(sp)
  80cd94:	df000017 	ldw	fp,0(sp)
  80cd98:	dec00204 	addi	sp,sp,8
  80cd9c:	f800283a 	ret

0080cda0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  80cda0:	defffc04 	addi	sp,sp,-16
  80cda4:	dfc00315 	stw	ra,12(sp)
  80cda8:	df000215 	stw	fp,8(sp)
  80cdac:	df000204 	addi	fp,sp,8
  80cdb0:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  80cdb4:	e0bfff17 	ldw	r2,-4(fp)
  80cdb8:	10800217 	ldw	r2,8(r2)
  80cdbc:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  80cdc0:	00000c06 	br	80cdf4 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  80cdc4:	e13ffe17 	ldw	r4,-8(fp)
  80cdc8:	01402074 	movhi	r5,129
  80cdcc:	29400704 	addi	r5,r5,28
  80cdd0:	08085000 	call	808500 <strcmp>
  80cdd4:	1004c03a 	cmpne	r2,r2,zero
  80cdd8:	1000031e 	bne	r2,zero,80cde8 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  80cddc:	e0bffe17 	ldw	r2,-8(fp)
  80cde0:	10000005 	stb	zero,0(r2)
			break;
  80cde4:	00000a06 	br	80ce10 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  80cde8:	e0bffe17 	ldw	r2,-8(fp)
  80cdec:	10800044 	addi	r2,r2,1
  80cdf0:	e0bffe15 	stw	r2,-8(fp)
  80cdf4:	e0bffe17 	ldw	r2,-8(fp)
  80cdf8:	10800003 	ldbu	r2,0(r2)
  80cdfc:	10803fcc 	andi	r2,r2,255
  80ce00:	1080201c 	xori	r2,r2,128
  80ce04:	10bfe004 	addi	r2,r2,-128
  80ce08:	1004c03a 	cmpne	r2,r2,zero
  80ce0c:	103fed1e 	bne	r2,zero,80cdc4 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  80ce10:	e037883a 	mov	sp,fp
  80ce14:	dfc00117 	ldw	ra,4(sp)
  80ce18:	df000017 	ldw	fp,0(sp)
  80ce1c:	dec00204 	addi	sp,sp,8
  80ce20:	f800283a 	ret

0080ce24 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  80ce24:	defffc04 	addi	sp,sp,-16
  80ce28:	dfc00315 	stw	ra,12(sp)
  80ce2c:	df000215 	stw	fp,8(sp)
  80ce30:	df000204 	addi	fp,sp,8
  80ce34:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  80ce38:	e13fff17 	ldw	r4,-4(fp)
  80ce3c:	01402074 	movhi	r5,129
  80ce40:	2946cf04 	addi	r5,r5,6972
  80ce44:	080ead00 	call	80ead0 <alt_find_dev>
  80ce48:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80ce4c:	e0bffe17 	ldw	r2,-8(fp)
}
  80ce50:	e037883a 	mov	sp,fp
  80ce54:	dfc00117 	ldw	ra,4(sp)
  80ce58:	df000017 	ldw	fp,0(sp)
  80ce5c:	dec00204 	addi	sp,sp,8
  80ce60:	f800283a 	ret

0080ce64 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  80ce64:	defff904 	addi	sp,sp,-28
  80ce68:	df000615 	stw	fp,24(sp)
  80ce6c:	df000604 	addi	fp,sp,24
  80ce70:	e13ffb15 	stw	r4,-20(fp)
  80ce74:	e1bffd15 	stw	r6,-12(fp)
  80ce78:	e1fffe15 	stw	r7,-8(fp)
  80ce7c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  80ce80:	e0bffb17 	ldw	r2,-20(fp)
  80ce84:	10c00c17 	ldw	r3,48(r2)
  80ce88:	e0bffd17 	ldw	r2,-12(fp)
  80ce8c:	10c0042e 	bgeu	r2,r3,80cea0 <alt_up_char_buffer_draw+0x3c>
  80ce90:	e0bffb17 	ldw	r2,-20(fp)
  80ce94:	10c00d17 	ldw	r3,52(r2)
  80ce98:	e0bffe17 	ldw	r2,-8(fp)
  80ce9c:	10c00336 	bltu	r2,r3,80ceac <alt_up_char_buffer_draw+0x48>
		return -1;
  80cea0:	00bfffc4 	movi	r2,-1
  80cea4:	e0bfff15 	stw	r2,-4(fp)
  80cea8:	00001d06 	br	80cf20 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  80ceac:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  80ceb0:	e0bffb17 	ldw	r2,-20(fp)
  80ceb4:	10c00f17 	ldw	r3,60(r2)
  80ceb8:	e0bffd17 	ldw	r2,-12(fp)
  80cebc:	1886703a 	and	r3,r3,r2
  80cec0:	e0bffb17 	ldw	r2,-20(fp)
  80cec4:	10800e17 	ldw	r2,56(r2)
  80cec8:	1886983a 	sll	r3,r3,r2
  80cecc:	e0bffa17 	ldw	r2,-24(fp)
  80ced0:	10c4b03a 	or	r2,r2,r3
  80ced4:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  80ced8:	e0bffb17 	ldw	r2,-20(fp)
  80cedc:	10c01117 	ldw	r3,68(r2)
  80cee0:	e0bffe17 	ldw	r2,-8(fp)
  80cee4:	1886703a 	and	r3,r3,r2
  80cee8:	e0bffb17 	ldw	r2,-20(fp)
  80ceec:	10801017 	ldw	r2,64(r2)
  80cef0:	1886983a 	sll	r3,r3,r2
  80cef4:	e0bffa17 	ldw	r2,-24(fp)
  80cef8:	10c4b03a 	or	r2,r2,r3
  80cefc:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  80cf00:	e0bffb17 	ldw	r2,-20(fp)
  80cf04:	10800b17 	ldw	r2,44(r2)
  80cf08:	1007883a 	mov	r3,r2
  80cf0c:	e0bffa17 	ldw	r2,-24(fp)
  80cf10:	1885883a 	add	r2,r3,r2
  80cf14:	e0fffc03 	ldbu	r3,-16(fp)
  80cf18:	10c00025 	stbio	r3,0(r2)

	return 0;
  80cf1c:	e03fff15 	stw	zero,-4(fp)
  80cf20:	e0bfff17 	ldw	r2,-4(fp)
}
  80cf24:	e037883a 	mov	sp,fp
  80cf28:	df000017 	ldw	fp,0(sp)
  80cf2c:	dec00104 	addi	sp,sp,4
  80cf30:	f800283a 	ret

0080cf34 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  80cf34:	defff904 	addi	sp,sp,-28
  80cf38:	df000615 	stw	fp,24(sp)
  80cf3c:	df000604 	addi	fp,sp,24
  80cf40:	e13ffb15 	stw	r4,-20(fp)
  80cf44:	e17ffc15 	stw	r5,-16(fp)
  80cf48:	e1bffd15 	stw	r6,-12(fp)
  80cf4c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  80cf50:	e0bffb17 	ldw	r2,-20(fp)
  80cf54:	10c00c17 	ldw	r3,48(r2)
  80cf58:	e0bffd17 	ldw	r2,-12(fp)
  80cf5c:	10c0042e 	bgeu	r2,r3,80cf70 <alt_up_char_buffer_string+0x3c>
  80cf60:	e0bffb17 	ldw	r2,-20(fp)
  80cf64:	10c00d17 	ldw	r3,52(r2)
  80cf68:	e0bffe17 	ldw	r2,-8(fp)
  80cf6c:	10c00336 	bltu	r2,r3,80cf7c <alt_up_char_buffer_string+0x48>
		return -1;
  80cf70:	00bfffc4 	movi	r2,-1
  80cf74:	e0bfff15 	stw	r2,-4(fp)
  80cf78:	00002e06 	br	80d034 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  80cf7c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  80cf80:	e0bffb17 	ldw	r2,-20(fp)
  80cf84:	10801017 	ldw	r2,64(r2)
  80cf88:	1007883a 	mov	r3,r2
  80cf8c:	e0bffe17 	ldw	r2,-8(fp)
  80cf90:	10c6983a 	sll	r3,r2,r3
  80cf94:	e0bffd17 	ldw	r2,-12(fp)
  80cf98:	1885883a 	add	r2,r3,r2
  80cf9c:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  80cfa0:	00001c06 	br	80d014 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  80cfa4:	e0bffb17 	ldw	r2,-20(fp)
  80cfa8:	10800b17 	ldw	r2,44(r2)
  80cfac:	1007883a 	mov	r3,r2
  80cfb0:	e0bffa17 	ldw	r2,-24(fp)
  80cfb4:	1889883a 	add	r4,r3,r2
  80cfb8:	e0bffc17 	ldw	r2,-16(fp)
  80cfbc:	10800003 	ldbu	r2,0(r2)
  80cfc0:	10c03fcc 	andi	r3,r2,255
  80cfc4:	18c0201c 	xori	r3,r3,128
  80cfc8:	18ffe004 	addi	r3,r3,-128
  80cfcc:	2005883a 	mov	r2,r4
  80cfd0:	10c00025 	stbio	r3,0(r2)
		++ptr;
  80cfd4:	e0bffc17 	ldw	r2,-16(fp)
  80cfd8:	10800044 	addi	r2,r2,1
  80cfdc:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  80cfe0:	e0bffd17 	ldw	r2,-12(fp)
  80cfe4:	10800044 	addi	r2,r2,1
  80cfe8:	e0bffd15 	stw	r2,-12(fp)
  80cfec:	e0bffb17 	ldw	r2,-20(fp)
  80cff0:	10c00c17 	ldw	r3,48(r2)
  80cff4:	e0bffd17 	ldw	r2,-12(fp)
  80cff8:	10c00336 	bltu	r2,r3,80d008 <alt_up_char_buffer_string+0xd4>
			return -1;
  80cffc:	00bfffc4 	movi	r2,-1
  80d000:	e0bfff15 	stw	r2,-4(fp)
  80d004:	00000b06 	br	80d034 <alt_up_char_buffer_string+0x100>
		++offset;
  80d008:	e0bffa17 	ldw	r2,-24(fp)
  80d00c:	10800044 	addi	r2,r2,1
  80d010:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  80d014:	e0bffc17 	ldw	r2,-16(fp)
  80d018:	10800003 	ldbu	r2,0(r2)
  80d01c:	10803fcc 	andi	r2,r2,255
  80d020:	1080201c 	xori	r2,r2,128
  80d024:	10bfe004 	addi	r2,r2,-128
  80d028:	1004c03a 	cmpne	r2,r2,zero
  80d02c:	103fdd1e 	bne	r2,zero,80cfa4 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  80d030:	e03fff15 	stw	zero,-4(fp)
  80d034:	e0bfff17 	ldw	r2,-4(fp)
}
  80d038:	e037883a 	mov	sp,fp
  80d03c:	df000017 	ldw	fp,0(sp)
  80d040:	dec00104 	addi	sp,sp,4
  80d044:	f800283a 	ret

0080d048 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  80d048:	defffe04 	addi	sp,sp,-8
  80d04c:	df000115 	stw	fp,4(sp)
  80d050:	df000104 	addi	fp,sp,4
  80d054:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  80d058:	e0bfff17 	ldw	r2,-4(fp)
  80d05c:	10800a17 	ldw	r2,40(r2)
  80d060:	10800084 	addi	r2,r2,2
  80d064:	1007883a 	mov	r3,r2
  80d068:	00800044 	movi	r2,1
  80d06c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  80d070:	e0bfff17 	ldw	r2,-4(fp)
  80d074:	10800a17 	ldw	r2,40(r2)
  80d078:	10800084 	addi	r2,r2,2
  80d07c:	10800023 	ldbuio	r2,0(r2)
  80d080:	1080004c 	andi	r2,r2,1
  80d084:	10803fcc 	andi	r2,r2,255
  80d088:	1004c03a 	cmpne	r2,r2,zero
  80d08c:	103ff81e 	bne	r2,zero,80d070 <alt_up_char_buffer_clear+0x28>
	return 0;
  80d090:	0005883a 	mov	r2,zero
}
  80d094:	e037883a 	mov	sp,fp
  80d098:	df000017 	ldw	fp,0(sp)
  80d09c:	dec00104 	addi	sp,sp,4
  80d0a0:	f800283a 	ret

0080d0a4 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  80d0a4:	defffc04 	addi	sp,sp,-16
  80d0a8:	dfc00315 	stw	ra,12(sp)
  80d0ac:	df000215 	stw	fp,8(sp)
  80d0b0:	df000204 	addi	fp,sp,8
  80d0b4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  80d0b8:	e13fff17 	ldw	r4,-4(fp)
  80d0bc:	01402074 	movhi	r5,129
  80d0c0:	2946cf04 	addi	r5,r5,6972
  80d0c4:	080ead00 	call	80ead0 <alt_find_dev>
  80d0c8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80d0cc:	e0bffe17 	ldw	r2,-8(fp)
}
  80d0d0:	e037883a 	mov	sp,fp
  80d0d4:	dfc00117 	ldw	ra,4(sp)
  80d0d8:	df000017 	ldw	fp,0(sp)
  80d0dc:	dec00204 	addi	sp,sp,8
  80d0e0:	f800283a 	ret

0080d0e4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80d0e4:	defff904 	addi	sp,sp,-28
  80d0e8:	df000615 	stw	fp,24(sp)
  80d0ec:	df000604 	addi	fp,sp,24
  80d0f0:	e13ffb15 	stw	r4,-20(fp)
  80d0f4:	e17ffc15 	stw	r5,-16(fp)
  80d0f8:	e1bffd15 	stw	r6,-12(fp)
  80d0fc:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80d100:	e0bffb17 	ldw	r2,-20(fp)
  80d104:	10c00f17 	ldw	r3,60(r2)
  80d108:	e0bffd17 	ldw	r2,-12(fp)
  80d10c:	10c0042e 	bgeu	r2,r3,80d120 <alt_up_pixel_buffer_dma_draw+0x3c>
  80d110:	e0bffb17 	ldw	r2,-20(fp)
  80d114:	10c01017 	ldw	r3,64(r2)
  80d118:	e0bffe17 	ldw	r2,-8(fp)
  80d11c:	10c00336 	bltu	r2,r3,80d12c <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  80d120:	00bfffc4 	movi	r2,-1
  80d124:	e0bfff15 	stw	r2,-4(fp)
  80d128:	00005106 	br	80d270 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  80d12c:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d130:	e0bffb17 	ldw	r2,-20(fp)
  80d134:	10800d17 	ldw	r2,52(r2)
  80d138:	1004c03a 	cmpne	r2,r2,zero
  80d13c:	1000151e 	bne	r2,zero,80d194 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80d140:	e0bffb17 	ldw	r2,-20(fp)
  80d144:	10c01217 	ldw	r3,72(r2)
  80d148:	e0bffd17 	ldw	r2,-12(fp)
  80d14c:	1886703a 	and	r3,r3,r2
  80d150:	e0bffb17 	ldw	r2,-20(fp)
  80d154:	10801117 	ldw	r2,68(r2)
  80d158:	1886983a 	sll	r3,r3,r2
  80d15c:	e0bffa17 	ldw	r2,-24(fp)
  80d160:	10c4b03a 	or	r2,r2,r3
  80d164:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  80d168:	e0bffb17 	ldw	r2,-20(fp)
  80d16c:	10c01417 	ldw	r3,80(r2)
  80d170:	e0bffe17 	ldw	r2,-8(fp)
  80d174:	1886703a 	and	r3,r3,r2
  80d178:	e0bffb17 	ldw	r2,-20(fp)
  80d17c:	10801317 	ldw	r2,76(r2)
  80d180:	1886983a 	sll	r3,r3,r2
  80d184:	e0bffa17 	ldw	r2,-24(fp)
  80d188:	10c4b03a 	or	r2,r2,r3
  80d18c:	e0bffa15 	stw	r2,-24(fp)
  80d190:	00001706 	br	80d1f0 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80d194:	e0bffb17 	ldw	r2,-20(fp)
  80d198:	10c01217 	ldw	r3,72(r2)
  80d19c:	e0bffd17 	ldw	r2,-12(fp)
  80d1a0:	1886703a 	and	r3,r3,r2
  80d1a4:	e0bffb17 	ldw	r2,-20(fp)
  80d1a8:	10801117 	ldw	r2,68(r2)
  80d1ac:	1886983a 	sll	r3,r3,r2
  80d1b0:	e0bffa17 	ldw	r2,-24(fp)
  80d1b4:	10c5883a 	add	r2,r2,r3
  80d1b8:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80d1bc:	e0bffb17 	ldw	r2,-20(fp)
  80d1c0:	10c01417 	ldw	r3,80(r2)
  80d1c4:	e0bffe17 	ldw	r2,-8(fp)
  80d1c8:	1886703a 	and	r3,r3,r2
  80d1cc:	e0bffb17 	ldw	r2,-20(fp)
  80d1d0:	10800f17 	ldw	r2,60(r2)
  80d1d4:	1887383a 	mul	r3,r3,r2
  80d1d8:	e0bffb17 	ldw	r2,-20(fp)
  80d1dc:	10801117 	ldw	r2,68(r2)
  80d1e0:	1886983a 	sll	r3,r3,r2
  80d1e4:	e0bffa17 	ldw	r2,-24(fp)
  80d1e8:	10c5883a 	add	r2,r2,r3
  80d1ec:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d1f0:	e0bffb17 	ldw	r2,-20(fp)
  80d1f4:	10800e17 	ldw	r2,56(r2)
  80d1f8:	10800058 	cmpnei	r2,r2,1
  80d1fc:	1000081e 	bne	r2,zero,80d220 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d200:	e0bffb17 	ldw	r2,-20(fp)
  80d204:	10800c17 	ldw	r2,48(r2)
  80d208:	1007883a 	mov	r3,r2
  80d20c:	e0bffa17 	ldw	r2,-24(fp)
  80d210:	1885883a 	add	r2,r3,r2
  80d214:	e0fffc17 	ldw	r3,-16(fp)
  80d218:	10c00025 	stbio	r3,0(r2)
  80d21c:	00001306 	br	80d26c <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d220:	e0bffb17 	ldw	r2,-20(fp)
  80d224:	10800e17 	ldw	r2,56(r2)
  80d228:	10800098 	cmpnei	r2,r2,2
  80d22c:	1000081e 	bne	r2,zero,80d250 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d230:	e0bffb17 	ldw	r2,-20(fp)
  80d234:	10800c17 	ldw	r2,48(r2)
  80d238:	1007883a 	mov	r3,r2
  80d23c:	e0bffa17 	ldw	r2,-24(fp)
  80d240:	1885883a 	add	r2,r3,r2
  80d244:	e0fffc17 	ldw	r3,-16(fp)
  80d248:	10c0002d 	sthio	r3,0(r2)
  80d24c:	00000706 	br	80d26c <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d250:	e0bffb17 	ldw	r2,-20(fp)
  80d254:	10800c17 	ldw	r2,48(r2)
  80d258:	1007883a 	mov	r3,r2
  80d25c:	e0bffa17 	ldw	r2,-24(fp)
  80d260:	1885883a 	add	r2,r3,r2
  80d264:	e0fffc17 	ldw	r3,-16(fp)
  80d268:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  80d26c:	e03fff15 	stw	zero,-4(fp)
  80d270:	e0bfff17 	ldw	r2,-4(fp)
}
  80d274:	e037883a 	mov	sp,fp
  80d278:	df000017 	ldw	fp,0(sp)
  80d27c:	dec00104 	addi	sp,sp,4
  80d280:	f800283a 	ret

0080d284 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  80d284:	defffd04 	addi	sp,sp,-12
  80d288:	df000215 	stw	fp,8(sp)
  80d28c:	df000204 	addi	fp,sp,8
  80d290:	e13ffe15 	stw	r4,-8(fp)
  80d294:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  80d298:	e0bffe17 	ldw	r2,-8(fp)
  80d29c:	10800a17 	ldw	r2,40(r2)
  80d2a0:	10800104 	addi	r2,r2,4
  80d2a4:	e0ffff17 	ldw	r3,-4(fp)
  80d2a8:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80d2ac:	e0bffe17 	ldw	r2,-8(fp)
  80d2b0:	10800a17 	ldw	r2,40(r2)
  80d2b4:	10800104 	addi	r2,r2,4
  80d2b8:	10800037 	ldwio	r2,0(r2)
  80d2bc:	1007883a 	mov	r3,r2
  80d2c0:	e0bffe17 	ldw	r2,-8(fp)
  80d2c4:	10c00c15 	stw	r3,48(r2)
	return 0;
  80d2c8:	0005883a 	mov	r2,zero
}
  80d2cc:	e037883a 	mov	sp,fp
  80d2d0:	df000017 	ldw	fp,0(sp)
  80d2d4:	dec00104 	addi	sp,sp,4
  80d2d8:	f800283a 	ret

0080d2dc <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  80d2dc:	defffe04 	addi	sp,sp,-8
  80d2e0:	df000115 	stw	fp,4(sp)
  80d2e4:	df000104 	addi	fp,sp,4
  80d2e8:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  80d2ec:	e0bfff17 	ldw	r2,-4(fp)
  80d2f0:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  80d2f4:	e0bfff17 	ldw	r2,-4(fp)
  80d2f8:	10800a17 	ldw	r2,40(r2)
  80d2fc:	1007883a 	mov	r3,r2
  80d300:	00800044 	movi	r2,1
  80d304:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80d308:	e0bfff17 	ldw	r2,-4(fp)
  80d30c:	10c00b17 	ldw	r3,44(r2)
  80d310:	e0bfff17 	ldw	r2,-4(fp)
  80d314:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  80d318:	e0bfff17 	ldw	r2,-4(fp)
  80d31c:	11000b15 	stw	r4,44(r2)
	return 0;
  80d320:	0005883a 	mov	r2,zero
}
  80d324:	e037883a 	mov	sp,fp
  80d328:	df000017 	ldw	fp,0(sp)
  80d32c:	dec00104 	addi	sp,sp,4
  80d330:	f800283a 	ret

0080d334 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  80d334:	defffe04 	addi	sp,sp,-8
  80d338:	df000115 	stw	fp,4(sp)
  80d33c:	df000104 	addi	fp,sp,4
  80d340:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  80d344:	e0bfff17 	ldw	r2,-4(fp)
  80d348:	10800a17 	ldw	r2,40(r2)
  80d34c:	10800304 	addi	r2,r2,12
  80d350:	10800037 	ldwio	r2,0(r2)
  80d354:	1080004c 	andi	r2,r2,1
}
  80d358:	e037883a 	mov	sp,fp
  80d35c:	df000017 	ldw	fp,0(sp)
  80d360:	dec00104 	addi	sp,sp,4
  80d364:	f800283a 	ret

0080d368 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  80d368:	defff604 	addi	sp,sp,-40
  80d36c:	df000915 	stw	fp,36(sp)
  80d370:	df000904 	addi	fp,sp,36
  80d374:	e13ff715 	stw	r4,-36(fp)
  80d378:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d37c:	e0bff817 	ldw	r2,-32(fp)
  80d380:	10800058 	cmpnei	r2,r2,1
  80d384:	1000041e 	bne	r2,zero,80d398 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  80d388:	e0bff717 	ldw	r2,-36(fp)
  80d38c:	10800c17 	ldw	r2,48(r2)
  80d390:	e0bfff15 	stw	r2,-4(fp)
  80d394:	00000306 	br	80d3a4 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  80d398:	e0bff717 	ldw	r2,-36(fp)
  80d39c:	10800b17 	ldw	r2,44(r2)
  80d3a0:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  80d3a4:	e0bff717 	ldw	r2,-36(fp)
  80d3a8:	10800f17 	ldw	r2,60(r2)
  80d3ac:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d3b0:	e0bff717 	ldw	r2,-36(fp)
  80d3b4:	10800e17 	ldw	r2,56(r2)
  80d3b8:	10800098 	cmpnei	r2,r2,2
  80d3bc:	1000051e 	bne	r2,zero,80d3d4 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  80d3c0:	e0fffe17 	ldw	r3,-8(fp)
  80d3c4:	e0fffe17 	ldw	r3,-8(fp)
  80d3c8:	18c5883a 	add	r2,r3,r3
  80d3cc:	e0bffe15 	stw	r2,-8(fp)
  80d3d0:	00000506 	br	80d3e8 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  80d3d4:	e13ffe17 	ldw	r4,-8(fp)
  80d3d8:	e13ffe17 	ldw	r4,-8(fp)
  80d3dc:	2105883a 	add	r2,r4,r4
  80d3e0:	1085883a 	add	r2,r2,r2
  80d3e4:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  80d3e8:	e0bff717 	ldw	r2,-36(fp)
  80d3ec:	10801017 	ldw	r2,64(r2)
  80d3f0:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d3f4:	e0bff717 	ldw	r2,-36(fp)
  80d3f8:	10800d17 	ldw	r2,52(r2)
  80d3fc:	1004c03a 	cmpne	r2,r2,zero
  80d400:	10001e1e 	bne	r2,zero,80d47c <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80d404:	e0bff717 	ldw	r2,-36(fp)
  80d408:	10801317 	ldw	r2,76(r2)
  80d40c:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  80d410:	e03ffb15 	stw	zero,-20(fp)
  80d414:	00001506 	br	80d46c <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  80d418:	e03ffc15 	stw	zero,-16(fp)
  80d41c:	00000706 	br	80d43c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  80d420:	e0ffff17 	ldw	r3,-4(fp)
  80d424:	e0bffc17 	ldw	r2,-16(fp)
  80d428:	1885883a 	add	r2,r3,r2
  80d42c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  80d430:	e0bffc17 	ldw	r2,-16(fp)
  80d434:	10800104 	addi	r2,r2,4
  80d438:	e0bffc15 	stw	r2,-16(fp)
  80d43c:	e0fffc17 	ldw	r3,-16(fp)
  80d440:	e13ffe17 	ldw	r4,-8(fp)
  80d444:	193ff636 	bltu	r3,r4,80d420 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  80d448:	e0fffa17 	ldw	r3,-24(fp)
  80d44c:	00800044 	movi	r2,1
  80d450:	10c4983a 	sll	r2,r2,r3
  80d454:	e0ffff17 	ldw	r3,-4(fp)
  80d458:	1887883a 	add	r3,r3,r2
  80d45c:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80d460:	e13ffb17 	ldw	r4,-20(fp)
  80d464:	21000044 	addi	r4,r4,1
  80d468:	e13ffb15 	stw	r4,-20(fp)
  80d46c:	e0bffb17 	ldw	r2,-20(fp)
  80d470:	e0fffd17 	ldw	r3,-12(fp)
  80d474:	10ffe836 	bltu	r2,r3,80d418 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  80d478:	00001006 	br	80d4bc <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  80d47c:	e13ffd17 	ldw	r4,-12(fp)
  80d480:	e0bffe17 	ldw	r2,-8(fp)
  80d484:	2089383a 	mul	r4,r4,r2
  80d488:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  80d48c:	e03ff915 	stw	zero,-28(fp)
  80d490:	00000706 	br	80d4b0 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  80d494:	e0ffff17 	ldw	r3,-4(fp)
  80d498:	e0bff917 	ldw	r2,-28(fp)
  80d49c:	1885883a 	add	r2,r3,r2
  80d4a0:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  80d4a4:	e0fff917 	ldw	r3,-28(fp)
  80d4a8:	18c00104 	addi	r3,r3,4
  80d4ac:	e0fff915 	stw	r3,-28(fp)
  80d4b0:	e0bff917 	ldw	r2,-28(fp)
  80d4b4:	e13ffd17 	ldw	r4,-12(fp)
  80d4b8:	113ff636 	bltu	r2,r4,80d494 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  80d4bc:	e037883a 	mov	sp,fp
  80d4c0:	df000017 	ldw	fp,0(sp)
  80d4c4:	dec00104 	addi	sp,sp,4
  80d4c8:	f800283a 	ret

0080d4cc <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80d4cc:	deffed04 	addi	sp,sp,-76
  80d4d0:	df001215 	stw	fp,72(sp)
  80d4d4:	df001204 	addi	fp,sp,72
  80d4d8:	e13fee15 	stw	r4,-72(fp)
  80d4dc:	e17fef15 	stw	r5,-68(fp)
  80d4e0:	e1bff015 	stw	r6,-64(fp)
  80d4e4:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d4e8:	e0bfee17 	ldw	r2,-72(fp)
  80d4ec:	10800f17 	ldw	r2,60(r2)
  80d4f0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d4f4:	e0bfee17 	ldw	r2,-72(fp)
  80d4f8:	10801017 	ldw	r2,64(r2)
  80d4fc:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80d500:	e0bfef17 	ldw	r2,-68(fp)
  80d504:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  80d508:	e0fff117 	ldw	r3,-60(fp)
  80d50c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  80d510:	e13ff017 	ldw	r4,-64(fp)
  80d514:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  80d518:	e0800117 	ldw	r2,4(fp)
  80d51c:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  80d520:	e0c00217 	ldw	r3,8(fp)
  80d524:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80d528:	e13ffa17 	ldw	r4,-24(fp)
  80d52c:	e0bffb17 	ldw	r2,-20(fp)
  80d530:	2080062e 	bgeu	r4,r2,80d54c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  80d534:	e0fffb17 	ldw	r3,-20(fp)
  80d538:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  80d53c:	e13ffa17 	ldw	r4,-24(fp)
  80d540:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  80d544:	e0bffc17 	ldw	r2,-16(fp)
  80d548:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  80d54c:	e0fff817 	ldw	r3,-32(fp)
  80d550:	e13ff917 	ldw	r4,-28(fp)
  80d554:	1900062e 	bgeu	r3,r4,80d570 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  80d558:	e0bff917 	ldw	r2,-28(fp)
  80d55c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  80d560:	e0fff817 	ldw	r3,-32(fp)
  80d564:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  80d568:	e13ffc17 	ldw	r4,-16(fp)
  80d56c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  80d570:	e0bffb17 	ldw	r2,-20(fp)
  80d574:	e0fffe17 	ldw	r3,-8(fp)
  80d578:	10c10d2e 	bgeu	r2,r3,80d9b0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  80d57c:	e13ff917 	ldw	r4,-28(fp)
  80d580:	e0bffd17 	ldw	r2,-12(fp)
  80d584:	20800136 	bltu	r4,r2,80d58c <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80d588:	00010906 	br	80d9b0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80d58c:	e0fffa17 	ldw	r3,-24(fp)
  80d590:	e13ffe17 	ldw	r4,-8(fp)
  80d594:	19000336 	bltu	r3,r4,80d5a4 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  80d598:	e0bffe17 	ldw	r2,-8(fp)
  80d59c:	10bfffc4 	addi	r2,r2,-1
  80d5a0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80d5a4:	e0fff817 	ldw	r3,-32(fp)
  80d5a8:	e13ffd17 	ldw	r4,-12(fp)
  80d5ac:	19000336 	bltu	r3,r4,80d5bc <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  80d5b0:	e0bffd17 	ldw	r2,-12(fp)
  80d5b4:	10bfffc4 	addi	r2,r2,-1
  80d5b8:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d5bc:	e0800317 	ldw	r2,12(fp)
  80d5c0:	10800058 	cmpnei	r2,r2,1
  80d5c4:	1000041e 	bne	r2,zero,80d5d8 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  80d5c8:	e0bfee17 	ldw	r2,-72(fp)
  80d5cc:	10800c17 	ldw	r2,48(r2)
  80d5d0:	e0bfff15 	stw	r2,-4(fp)
  80d5d4:	00000306 	br	80d5e4 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  80d5d8:	e0bfee17 	ldw	r2,-72(fp)
  80d5dc:	10800b17 	ldw	r2,44(r2)
  80d5e0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d5e4:	e0bfee17 	ldw	r2,-72(fp)
  80d5e8:	10800d17 	ldw	r2,52(r2)
  80d5ec:	1004c03a 	cmpne	r2,r2,zero
  80d5f0:	1000721e 	bne	r2,zero,80d7bc <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80d5f4:	e0bfee17 	ldw	r2,-72(fp)
  80d5f8:	10801317 	ldw	r2,76(r2)
  80d5fc:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  80d600:	e0bff417 	ldw	r2,-48(fp)
  80d604:	e0fff917 	ldw	r3,-28(fp)
  80d608:	1884983a 	sll	r2,r3,r2
  80d60c:	e13fff17 	ldw	r4,-4(fp)
  80d610:	2089883a 	add	r4,r4,r2
  80d614:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d618:	e0bfee17 	ldw	r2,-72(fp)
  80d61c:	10800e17 	ldw	r2,56(r2)
  80d620:	10800058 	cmpnei	r2,r2,1
  80d624:	10001e1e 	bne	r2,zero,80d6a0 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  80d628:	e0bff917 	ldw	r2,-28(fp)
  80d62c:	e0bff515 	stw	r2,-44(fp)
  80d630:	00001706 	br	80d690 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  80d634:	e0fffb17 	ldw	r3,-20(fp)
  80d638:	e0fff615 	stw	r3,-40(fp)
  80d63c:	00000806 	br	80d660 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80d640:	e0ffff17 	ldw	r3,-4(fp)
  80d644:	e0bff617 	ldw	r2,-40(fp)
  80d648:	1885883a 	add	r2,r3,r2
  80d64c:	e0fff717 	ldw	r3,-36(fp)
  80d650:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d654:	e13ff617 	ldw	r4,-40(fp)
  80d658:	21000044 	addi	r4,r4,1
  80d65c:	e13ff615 	stw	r4,-40(fp)
  80d660:	e0bffa17 	ldw	r2,-24(fp)
  80d664:	e0fff617 	ldw	r3,-40(fp)
  80d668:	10fff52e 	bgeu	r2,r3,80d640 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  80d66c:	e0fff417 	ldw	r3,-48(fp)
  80d670:	00800044 	movi	r2,1
  80d674:	10c4983a 	sll	r2,r2,r3
  80d678:	e13fff17 	ldw	r4,-4(fp)
  80d67c:	2089883a 	add	r4,r4,r2
  80d680:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d684:	e0bff517 	ldw	r2,-44(fp)
  80d688:	10800044 	addi	r2,r2,1
  80d68c:	e0bff515 	stw	r2,-44(fp)
  80d690:	e0fff817 	ldw	r3,-32(fp)
  80d694:	e13ff517 	ldw	r4,-44(fp)
  80d698:	193fe62e 	bgeu	r3,r4,80d634 <alt_up_pixel_buffer_dma_draw_box+0x168>
  80d69c:	0000c406 	br	80d9b0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d6a0:	e0bfee17 	ldw	r2,-72(fp)
  80d6a4:	10800e17 	ldw	r2,56(r2)
  80d6a8:	10800098 	cmpnei	r2,r2,2
  80d6ac:	1000211e 	bne	r2,zero,80d734 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  80d6b0:	e0bff917 	ldw	r2,-28(fp)
  80d6b4:	e0bff515 	stw	r2,-44(fp)
  80d6b8:	00001a06 	br	80d724 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  80d6bc:	e0fffb17 	ldw	r3,-20(fp)
  80d6c0:	e0fff615 	stw	r3,-40(fp)
  80d6c4:	00000b06 	br	80d6f4 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80d6c8:	e13ff617 	ldw	r4,-40(fp)
  80d6cc:	e13ff617 	ldw	r4,-40(fp)
  80d6d0:	2105883a 	add	r2,r4,r4
  80d6d4:	1007883a 	mov	r3,r2
  80d6d8:	e0bfff17 	ldw	r2,-4(fp)
  80d6dc:	1885883a 	add	r2,r3,r2
  80d6e0:	e0fff717 	ldw	r3,-36(fp)
  80d6e4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d6e8:	e0bff617 	ldw	r2,-40(fp)
  80d6ec:	10800044 	addi	r2,r2,1
  80d6f0:	e0bff615 	stw	r2,-40(fp)
  80d6f4:	e0fffa17 	ldw	r3,-24(fp)
  80d6f8:	e13ff617 	ldw	r4,-40(fp)
  80d6fc:	193ff22e 	bgeu	r3,r4,80d6c8 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  80d700:	e0fff417 	ldw	r3,-48(fp)
  80d704:	00800044 	movi	r2,1
  80d708:	10c4983a 	sll	r2,r2,r3
  80d70c:	e0ffff17 	ldw	r3,-4(fp)
  80d710:	1887883a 	add	r3,r3,r2
  80d714:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80d718:	e13ff517 	ldw	r4,-44(fp)
  80d71c:	21000044 	addi	r4,r4,1
  80d720:	e13ff515 	stw	r4,-44(fp)
  80d724:	e0bff817 	ldw	r2,-32(fp)
  80d728:	e0fff517 	ldw	r3,-44(fp)
  80d72c:	10ffe32e 	bgeu	r2,r3,80d6bc <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  80d730:	00009f06 	br	80d9b0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d734:	e13ff917 	ldw	r4,-28(fp)
  80d738:	e13ff515 	stw	r4,-44(fp)
  80d73c:	00001b06 	br	80d7ac <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  80d740:	e0bffb17 	ldw	r2,-20(fp)
  80d744:	e0bff615 	stw	r2,-40(fp)
  80d748:	00000c06 	br	80d77c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80d74c:	e0fff617 	ldw	r3,-40(fp)
  80d750:	e0fff617 	ldw	r3,-40(fp)
  80d754:	18c5883a 	add	r2,r3,r3
  80d758:	1085883a 	add	r2,r2,r2
  80d75c:	1007883a 	mov	r3,r2
  80d760:	e0bfff17 	ldw	r2,-4(fp)
  80d764:	1885883a 	add	r2,r3,r2
  80d768:	e0fff717 	ldw	r3,-36(fp)
  80d76c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d770:	e13ff617 	ldw	r4,-40(fp)
  80d774:	21000044 	addi	r4,r4,1
  80d778:	e13ff615 	stw	r4,-40(fp)
  80d77c:	e0bffa17 	ldw	r2,-24(fp)
  80d780:	e0fff617 	ldw	r3,-40(fp)
  80d784:	10fff12e 	bgeu	r2,r3,80d74c <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  80d788:	e0fff417 	ldw	r3,-48(fp)
  80d78c:	00800044 	movi	r2,1
  80d790:	10c4983a 	sll	r2,r2,r3
  80d794:	e13fff17 	ldw	r4,-4(fp)
  80d798:	2089883a 	add	r4,r4,r2
  80d79c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80d7a0:	e0bff517 	ldw	r2,-44(fp)
  80d7a4:	10800044 	addi	r2,r2,1
  80d7a8:	e0bff515 	stw	r2,-44(fp)
  80d7ac:	e0fff817 	ldw	r3,-32(fp)
  80d7b0:	e13ff517 	ldw	r4,-44(fp)
  80d7b4:	193fe22e 	bgeu	r3,r4,80d740 <alt_up_pixel_buffer_dma_draw_box+0x274>
  80d7b8:	00007d06 	br	80d9b0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d7bc:	e0bfee17 	ldw	r2,-72(fp)
  80d7c0:	10800e17 	ldw	r2,56(r2)
  80d7c4:	10800058 	cmpnei	r2,r2,1
  80d7c8:	1000221e 	bne	r2,zero,80d854 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  80d7cc:	e0fff917 	ldw	r3,-28(fp)
  80d7d0:	e13ffe17 	ldw	r4,-8(fp)
  80d7d4:	1905383a 	mul	r2,r3,r4
  80d7d8:	e0ffff17 	ldw	r3,-4(fp)
  80d7dc:	1887883a 	add	r3,r3,r2
  80d7e0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80d7e4:	e13ff917 	ldw	r4,-28(fp)
  80d7e8:	e13ff215 	stw	r4,-56(fp)
  80d7ec:	00001506 	br	80d844 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  80d7f0:	e0bffb17 	ldw	r2,-20(fp)
  80d7f4:	e0bff315 	stw	r2,-52(fp)
  80d7f8:	00000806 	br	80d81c <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80d7fc:	e0ffff17 	ldw	r3,-4(fp)
  80d800:	e0bff317 	ldw	r2,-52(fp)
  80d804:	1885883a 	add	r2,r3,r2
  80d808:	e0fff717 	ldw	r3,-36(fp)
  80d80c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d810:	e0fff317 	ldw	r3,-52(fp)
  80d814:	18c00044 	addi	r3,r3,1
  80d818:	e0fff315 	stw	r3,-52(fp)
  80d81c:	e13ffa17 	ldw	r4,-24(fp)
  80d820:	e0bff317 	ldw	r2,-52(fp)
  80d824:	20bff52e 	bgeu	r4,r2,80d7fc <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  80d828:	e0ffff17 	ldw	r3,-4(fp)
  80d82c:	e13ffe17 	ldw	r4,-8(fp)
  80d830:	1907883a 	add	r3,r3,r4
  80d834:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d838:	e0bff217 	ldw	r2,-56(fp)
  80d83c:	10800044 	addi	r2,r2,1
  80d840:	e0bff215 	stw	r2,-56(fp)
  80d844:	e0fff817 	ldw	r3,-32(fp)
  80d848:	e13ff217 	ldw	r4,-56(fp)
  80d84c:	193fe82e 	bgeu	r3,r4,80d7f0 <alt_up_pixel_buffer_dma_draw_box+0x324>
  80d850:	00005706 	br	80d9b0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d854:	e0bfee17 	ldw	r2,-72(fp)
  80d858:	10800e17 	ldw	r2,56(r2)
  80d85c:	10800098 	cmpnei	r2,r2,2
  80d860:	1000291e 	bne	r2,zero,80d908 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  80d864:	e0fffe17 	ldw	r3,-8(fp)
  80d868:	e0fffe17 	ldw	r3,-8(fp)
  80d86c:	18c5883a 	add	r2,r3,r3
  80d870:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80d874:	e13ff917 	ldw	r4,-28(fp)
  80d878:	e0fffe17 	ldw	r3,-8(fp)
  80d87c:	20c5383a 	mul	r2,r4,r3
  80d880:	e13fff17 	ldw	r4,-4(fp)
  80d884:	2089883a 	add	r4,r4,r2
  80d888:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80d88c:	e0bff917 	ldw	r2,-28(fp)
  80d890:	e0bff215 	stw	r2,-56(fp)
  80d894:	00001806 	br	80d8f8 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  80d898:	e0fffb17 	ldw	r3,-20(fp)
  80d89c:	e0fff315 	stw	r3,-52(fp)
  80d8a0:	00000b06 	br	80d8d0 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80d8a4:	e13ff317 	ldw	r4,-52(fp)
  80d8a8:	e13ff317 	ldw	r4,-52(fp)
  80d8ac:	2105883a 	add	r2,r4,r4
  80d8b0:	1007883a 	mov	r3,r2
  80d8b4:	e0bfff17 	ldw	r2,-4(fp)
  80d8b8:	1885883a 	add	r2,r3,r2
  80d8bc:	e0fff717 	ldw	r3,-36(fp)
  80d8c0:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d8c4:	e0bff317 	ldw	r2,-52(fp)
  80d8c8:	10800044 	addi	r2,r2,1
  80d8cc:	e0bff315 	stw	r2,-52(fp)
  80d8d0:	e0fffa17 	ldw	r3,-24(fp)
  80d8d4:	e13ff317 	ldw	r4,-52(fp)
  80d8d8:	193ff22e 	bgeu	r3,r4,80d8a4 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  80d8dc:	e0bfff17 	ldw	r2,-4(fp)
  80d8e0:	e0fffe17 	ldw	r3,-8(fp)
  80d8e4:	10c5883a 	add	r2,r2,r3
  80d8e8:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d8ec:	e13ff217 	ldw	r4,-56(fp)
  80d8f0:	21000044 	addi	r4,r4,1
  80d8f4:	e13ff215 	stw	r4,-56(fp)
  80d8f8:	e0bff817 	ldw	r2,-32(fp)
  80d8fc:	e0fff217 	ldw	r3,-56(fp)
  80d900:	10ffe52e 	bgeu	r2,r3,80d898 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  80d904:	00002a06 	br	80d9b0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80d908:	e13ffe17 	ldw	r4,-8(fp)
  80d90c:	e13ffe17 	ldw	r4,-8(fp)
  80d910:	2105883a 	add	r2,r4,r4
  80d914:	1085883a 	add	r2,r2,r2
  80d918:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80d91c:	e0fff917 	ldw	r3,-28(fp)
  80d920:	e13ffe17 	ldw	r4,-8(fp)
  80d924:	1905383a 	mul	r2,r3,r4
  80d928:	e0ffff17 	ldw	r3,-4(fp)
  80d92c:	1887883a 	add	r3,r3,r2
  80d930:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80d934:	e13ff917 	ldw	r4,-28(fp)
  80d938:	e13ff215 	stw	r4,-56(fp)
  80d93c:	00001906 	br	80d9a4 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  80d940:	e0bffb17 	ldw	r2,-20(fp)
  80d944:	e0bff315 	stw	r2,-52(fp)
  80d948:	00000c06 	br	80d97c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80d94c:	e0fff317 	ldw	r3,-52(fp)
  80d950:	e0fff317 	ldw	r3,-52(fp)
  80d954:	18c5883a 	add	r2,r3,r3
  80d958:	1085883a 	add	r2,r2,r2
  80d95c:	1007883a 	mov	r3,r2
  80d960:	e0bfff17 	ldw	r2,-4(fp)
  80d964:	1885883a 	add	r2,r3,r2
  80d968:	e0fff717 	ldw	r3,-36(fp)
  80d96c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80d970:	e13ff317 	ldw	r4,-52(fp)
  80d974:	21000044 	addi	r4,r4,1
  80d978:	e13ff315 	stw	r4,-52(fp)
  80d97c:	e0bffa17 	ldw	r2,-24(fp)
  80d980:	e0fff317 	ldw	r3,-52(fp)
  80d984:	10fff12e 	bgeu	r2,r3,80d94c <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  80d988:	e13fff17 	ldw	r4,-4(fp)
  80d98c:	e0bffe17 	ldw	r2,-8(fp)
  80d990:	2089883a 	add	r4,r4,r2
  80d994:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80d998:	e0fff217 	ldw	r3,-56(fp)
  80d99c:	18c00044 	addi	r3,r3,1
  80d9a0:	e0fff215 	stw	r3,-56(fp)
  80d9a4:	e13ff817 	ldw	r4,-32(fp)
  80d9a8:	e0bff217 	ldw	r2,-56(fp)
  80d9ac:	20bfe42e 	bgeu	r4,r2,80d940 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  80d9b0:	e037883a 	mov	sp,fp
  80d9b4:	df000017 	ldw	fp,0(sp)
  80d9b8:	dec00104 	addi	sp,sp,4
  80d9bc:	f800283a 	ret

0080d9c0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80d9c0:	defff204 	addi	sp,sp,-56
  80d9c4:	df000d15 	stw	fp,52(sp)
  80d9c8:	df000d04 	addi	fp,sp,52
  80d9cc:	e13ff315 	stw	r4,-52(fp)
  80d9d0:	e17ff415 	stw	r5,-48(fp)
  80d9d4:	e1bff515 	stw	r6,-44(fp)
  80d9d8:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80d9dc:	e0bff317 	ldw	r2,-52(fp)
  80d9e0:	10800f17 	ldw	r2,60(r2)
  80d9e4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80d9e8:	e0bff317 	ldw	r2,-52(fp)
  80d9ec:	10801017 	ldw	r2,64(r2)
  80d9f0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80d9f4:	e0bff417 	ldw	r2,-48(fp)
  80d9f8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  80d9fc:	e0fff517 	ldw	r3,-44(fp)
  80da00:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  80da04:	e13ff617 	ldw	r4,-40(fp)
  80da08:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80da0c:	e0800117 	ldw	r2,4(fp)
  80da10:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80da14:	e0fffb17 	ldw	r3,-20(fp)
  80da18:	e13ffc17 	ldw	r4,-16(fp)
  80da1c:	1900042e 	bgeu	r3,r4,80da30 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  80da20:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  80da24:	e0fffb17 	ldw	r3,-20(fp)
  80da28:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  80da2c:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  80da30:	e13ffc17 	ldw	r4,-16(fp)
  80da34:	e0bffe17 	ldw	r2,-8(fp)
  80da38:	2080b12e 	bgeu	r4,r2,80dd00 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  80da3c:	e0fffa17 	ldw	r3,-24(fp)
  80da40:	e13ffd17 	ldw	r4,-12(fp)
  80da44:	19000136 	bltu	r3,r4,80da4c <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80da48:	0000ad06 	br	80dd00 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80da4c:	e0bffb17 	ldw	r2,-20(fp)
  80da50:	e0fffe17 	ldw	r3,-8(fp)
  80da54:	10c00336 	bltu	r2,r3,80da64 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  80da58:	e13ffe17 	ldw	r4,-8(fp)
  80da5c:	213fffc4 	addi	r4,r4,-1
  80da60:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80da64:	e0800217 	ldw	r2,8(fp)
  80da68:	10800058 	cmpnei	r2,r2,1
  80da6c:	1000041e 	bne	r2,zero,80da80 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  80da70:	e0bff317 	ldw	r2,-52(fp)
  80da74:	10800c17 	ldw	r2,48(r2)
  80da78:	e0bfff15 	stw	r2,-4(fp)
  80da7c:	00000306 	br	80da8c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  80da80:	e0bff317 	ldw	r2,-52(fp)
  80da84:	10800b17 	ldw	r2,44(r2)
  80da88:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80da8c:	e0bff317 	ldw	r2,-52(fp)
  80da90:	10800d17 	ldw	r2,52(r2)
  80da94:	1004c03a 	cmpne	r2,r2,zero
  80da98:	1000431e 	bne	r2,zero,80dba8 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80da9c:	e0bff317 	ldw	r2,-52(fp)
  80daa0:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  80daa4:	e0fffa17 	ldw	r3,-24(fp)
  80daa8:	1884983a 	sll	r2,r3,r2
  80daac:	e13fff17 	ldw	r4,-4(fp)
  80dab0:	2089883a 	add	r4,r4,r2
  80dab4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80dab8:	e0bff317 	ldw	r2,-52(fp)
  80dabc:	10800e17 	ldw	r2,56(r2)
  80dac0:	10800058 	cmpnei	r2,r2,1
  80dac4:	10000f1e 	bne	r2,zero,80db04 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  80dac8:	e0bffc17 	ldw	r2,-16(fp)
  80dacc:	e0bff815 	stw	r2,-32(fp)
  80dad0:	00000806 	br	80daf4 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80dad4:	e0ffff17 	ldw	r3,-4(fp)
  80dad8:	e0bff817 	ldw	r2,-32(fp)
  80dadc:	1885883a 	add	r2,r3,r2
  80dae0:	e0fff917 	ldw	r3,-28(fp)
  80dae4:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80dae8:	e0fff817 	ldw	r3,-32(fp)
  80daec:	18c00044 	addi	r3,r3,1
  80daf0:	e0fff815 	stw	r3,-32(fp)
  80daf4:	e13ffb17 	ldw	r4,-20(fp)
  80daf8:	e0bff817 	ldw	r2,-32(fp)
  80dafc:	20bff52e 	bgeu	r4,r2,80dad4 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  80db00:	00007f06 	br	80dd00 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80db04:	e0bff317 	ldw	r2,-52(fp)
  80db08:	10800e17 	ldw	r2,56(r2)
  80db0c:	10800098 	cmpnei	r2,r2,2
  80db10:	1000121e 	bne	r2,zero,80db5c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  80db14:	e0fffc17 	ldw	r3,-16(fp)
  80db18:	e0fff815 	stw	r3,-32(fp)
  80db1c:	00000b06 	br	80db4c <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80db20:	e13ff817 	ldw	r4,-32(fp)
  80db24:	e13ff817 	ldw	r4,-32(fp)
  80db28:	2105883a 	add	r2,r4,r4
  80db2c:	1007883a 	mov	r3,r2
  80db30:	e0bfff17 	ldw	r2,-4(fp)
  80db34:	1885883a 	add	r2,r3,r2
  80db38:	e0fff917 	ldw	r3,-28(fp)
  80db3c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80db40:	e0bff817 	ldw	r2,-32(fp)
  80db44:	10800044 	addi	r2,r2,1
  80db48:	e0bff815 	stw	r2,-32(fp)
  80db4c:	e0fffb17 	ldw	r3,-20(fp)
  80db50:	e13ff817 	ldw	r4,-32(fp)
  80db54:	193ff22e 	bgeu	r3,r4,80db20 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  80db58:	00006906 	br	80dd00 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80db5c:	e0bffc17 	ldw	r2,-16(fp)
  80db60:	e0bff815 	stw	r2,-32(fp)
  80db64:	00000c06 	br	80db98 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80db68:	e0fff817 	ldw	r3,-32(fp)
  80db6c:	e0fff817 	ldw	r3,-32(fp)
  80db70:	18c5883a 	add	r2,r3,r3
  80db74:	1085883a 	add	r2,r2,r2
  80db78:	1007883a 	mov	r3,r2
  80db7c:	e0bfff17 	ldw	r2,-4(fp)
  80db80:	1885883a 	add	r2,r3,r2
  80db84:	e0fff917 	ldw	r3,-28(fp)
  80db88:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80db8c:	e13ff817 	ldw	r4,-32(fp)
  80db90:	21000044 	addi	r4,r4,1
  80db94:	e13ff815 	stw	r4,-32(fp)
  80db98:	e0bffb17 	ldw	r2,-20(fp)
  80db9c:	e0fff817 	ldw	r3,-32(fp)
  80dba0:	10fff12e 	bgeu	r2,r3,80db68 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  80dba4:	00005606 	br	80dd00 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80dba8:	e0bff317 	ldw	r2,-52(fp)
  80dbac:	10800e17 	ldw	r2,56(r2)
  80dbb0:	10800058 	cmpnei	r2,r2,1
  80dbb4:	1000151e 	bne	r2,zero,80dc0c <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  80dbb8:	e13ffa17 	ldw	r4,-24(fp)
  80dbbc:	e0fffe17 	ldw	r3,-8(fp)
  80dbc0:	20c5383a 	mul	r2,r4,r3
  80dbc4:	e13fff17 	ldw	r4,-4(fp)
  80dbc8:	2089883a 	add	r4,r4,r2
  80dbcc:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80dbd0:	e0bffc17 	ldw	r2,-16(fp)
  80dbd4:	e0bff715 	stw	r2,-36(fp)
  80dbd8:	00000806 	br	80dbfc <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80dbdc:	e0ffff17 	ldw	r3,-4(fp)
  80dbe0:	e0bff717 	ldw	r2,-36(fp)
  80dbe4:	1885883a 	add	r2,r3,r2
  80dbe8:	e0fff917 	ldw	r3,-28(fp)
  80dbec:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80dbf0:	e0fff717 	ldw	r3,-36(fp)
  80dbf4:	18c00044 	addi	r3,r3,1
  80dbf8:	e0fff715 	stw	r3,-36(fp)
  80dbfc:	e13ffb17 	ldw	r4,-20(fp)
  80dc00:	e0bff717 	ldw	r2,-36(fp)
  80dc04:	20bff52e 	bgeu	r4,r2,80dbdc <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  80dc08:	00003d06 	br	80dd00 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80dc0c:	e0bff317 	ldw	r2,-52(fp)
  80dc10:	10800e17 	ldw	r2,56(r2)
  80dc14:	10800098 	cmpnei	r2,r2,2
  80dc18:	10001c1e 	bne	r2,zero,80dc8c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  80dc1c:	e0fffe17 	ldw	r3,-8(fp)
  80dc20:	e0fffe17 	ldw	r3,-8(fp)
  80dc24:	18c5883a 	add	r2,r3,r3
  80dc28:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80dc2c:	e13ffa17 	ldw	r4,-24(fp)
  80dc30:	e0fffe17 	ldw	r3,-8(fp)
  80dc34:	20c5383a 	mul	r2,r4,r3
  80dc38:	e13fff17 	ldw	r4,-4(fp)
  80dc3c:	2089883a 	add	r4,r4,r2
  80dc40:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80dc44:	e0bffc17 	ldw	r2,-16(fp)
  80dc48:	e0bff715 	stw	r2,-36(fp)
  80dc4c:	00000b06 	br	80dc7c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80dc50:	e0fff717 	ldw	r3,-36(fp)
  80dc54:	e0fff717 	ldw	r3,-36(fp)
  80dc58:	18c5883a 	add	r2,r3,r3
  80dc5c:	1007883a 	mov	r3,r2
  80dc60:	e0bfff17 	ldw	r2,-4(fp)
  80dc64:	1885883a 	add	r2,r3,r2
  80dc68:	e0fff917 	ldw	r3,-28(fp)
  80dc6c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80dc70:	e13ff717 	ldw	r4,-36(fp)
  80dc74:	21000044 	addi	r4,r4,1
  80dc78:	e13ff715 	stw	r4,-36(fp)
  80dc7c:	e0bffb17 	ldw	r2,-20(fp)
  80dc80:	e0fff717 	ldw	r3,-36(fp)
  80dc84:	10fff22e 	bgeu	r2,r3,80dc50 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  80dc88:	00001d06 	br	80dd00 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80dc8c:	e13ffe17 	ldw	r4,-8(fp)
  80dc90:	e13ffe17 	ldw	r4,-8(fp)
  80dc94:	2105883a 	add	r2,r4,r4
  80dc98:	1085883a 	add	r2,r2,r2
  80dc9c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80dca0:	e0fffa17 	ldw	r3,-24(fp)
  80dca4:	e13ffe17 	ldw	r4,-8(fp)
  80dca8:	1905383a 	mul	r2,r3,r4
  80dcac:	e0ffff17 	ldw	r3,-4(fp)
  80dcb0:	1887883a 	add	r3,r3,r2
  80dcb4:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80dcb8:	e13ffc17 	ldw	r4,-16(fp)
  80dcbc:	e13ff715 	stw	r4,-36(fp)
  80dcc0:	00000c06 	br	80dcf4 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80dcc4:	e0fff717 	ldw	r3,-36(fp)
  80dcc8:	e0fff717 	ldw	r3,-36(fp)
  80dccc:	18c5883a 	add	r2,r3,r3
  80dcd0:	1085883a 	add	r2,r2,r2
  80dcd4:	1007883a 	mov	r3,r2
  80dcd8:	e0bfff17 	ldw	r2,-4(fp)
  80dcdc:	1885883a 	add	r2,r3,r2
  80dce0:	e0fff917 	ldw	r3,-28(fp)
  80dce4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80dce8:	e13ff717 	ldw	r4,-36(fp)
  80dcec:	21000044 	addi	r4,r4,1
  80dcf0:	e13ff715 	stw	r4,-36(fp)
  80dcf4:	e0bffb17 	ldw	r2,-20(fp)
  80dcf8:	e0fff717 	ldw	r3,-36(fp)
  80dcfc:	10fff12e 	bgeu	r2,r3,80dcc4 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  80dd00:	e037883a 	mov	sp,fp
  80dd04:	df000017 	ldw	fp,0(sp)
  80dd08:	dec00104 	addi	sp,sp,4
  80dd0c:	f800283a 	ret

0080dd10 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  80dd10:	defff104 	addi	sp,sp,-60
  80dd14:	df000e15 	stw	fp,56(sp)
  80dd18:	df000e04 	addi	fp,sp,56
  80dd1c:	e13ff215 	stw	r4,-56(fp)
  80dd20:	e17ff315 	stw	r5,-52(fp)
  80dd24:	e1bff415 	stw	r6,-48(fp)
  80dd28:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80dd2c:	e0bff217 	ldw	r2,-56(fp)
  80dd30:	10800f17 	ldw	r2,60(r2)
  80dd34:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80dd38:	e0bff217 	ldw	r2,-56(fp)
  80dd3c:	10801017 	ldw	r2,64(r2)
  80dd40:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  80dd44:	e0bff317 	ldw	r2,-52(fp)
  80dd48:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  80dd4c:	e0fff417 	ldw	r3,-48(fp)
  80dd50:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  80dd54:	e13ff517 	ldw	r4,-44(fp)
  80dd58:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80dd5c:	e0800117 	ldw	r2,4(fp)
  80dd60:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  80dd64:	e0fffa17 	ldw	r3,-24(fp)
  80dd68:	e13ffb17 	ldw	r4,-20(fp)
  80dd6c:	1900042e 	bgeu	r3,r4,80dd80 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  80dd70:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  80dd74:	e0fffa17 	ldw	r3,-24(fp)
  80dd78:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  80dd7c:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  80dd80:	e13ffc17 	ldw	r4,-16(fp)
  80dd84:	e0bffe17 	ldw	r2,-8(fp)
  80dd88:	2080d12e 	bgeu	r4,r2,80e0d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  80dd8c:	e0fffb17 	ldw	r3,-20(fp)
  80dd90:	e13ffd17 	ldw	r4,-12(fp)
  80dd94:	19000136 	bltu	r3,r4,80dd9c <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80dd98:	0000cd06 	br	80e0d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80dd9c:	e0bffa17 	ldw	r2,-24(fp)
  80dda0:	e0fffd17 	ldw	r3,-12(fp)
  80dda4:	10c00336 	bltu	r2,r3,80ddb4 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  80dda8:	e13ffd17 	ldw	r4,-12(fp)
  80ddac:	213fffc4 	addi	r4,r4,-1
  80ddb0:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80ddb4:	e0800217 	ldw	r2,8(fp)
  80ddb8:	10800058 	cmpnei	r2,r2,1
  80ddbc:	1000041e 	bne	r2,zero,80ddd0 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  80ddc0:	e0bff217 	ldw	r2,-56(fp)
  80ddc4:	10800c17 	ldw	r2,48(r2)
  80ddc8:	e0bfff15 	stw	r2,-4(fp)
  80ddcc:	00000306 	br	80dddc <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  80ddd0:	e0bff217 	ldw	r2,-56(fp)
  80ddd4:	10800b17 	ldw	r2,44(r2)
  80ddd8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80dddc:	e0bff217 	ldw	r2,-56(fp)
  80dde0:	10800d17 	ldw	r2,52(r2)
  80dde4:	1004c03a 	cmpne	r2,r2,zero
  80dde8:	1000571e 	bne	r2,zero,80df48 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80ddec:	e0bff217 	ldw	r2,-56(fp)
  80ddf0:	10801317 	ldw	r2,76(r2)
  80ddf4:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  80ddf8:	e0bff717 	ldw	r2,-36(fp)
  80ddfc:	e0fffb17 	ldw	r3,-20(fp)
  80de00:	1884983a 	sll	r2,r3,r2
  80de04:	e13fff17 	ldw	r4,-4(fp)
  80de08:	2089883a 	add	r4,r4,r2
  80de0c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80de10:	e0bff217 	ldw	r2,-56(fp)
  80de14:	10800e17 	ldw	r2,56(r2)
  80de18:	10800058 	cmpnei	r2,r2,1
  80de1c:	1000151e 	bne	r2,zero,80de74 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  80de20:	e0bffb17 	ldw	r2,-20(fp)
  80de24:	e0bff815 	stw	r2,-32(fp)
  80de28:	00000e06 	br	80de64 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80de2c:	e0ffff17 	ldw	r3,-4(fp)
  80de30:	e0bffc17 	ldw	r2,-16(fp)
  80de34:	1885883a 	add	r2,r3,r2
  80de38:	e0fff917 	ldw	r3,-28(fp)
  80de3c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80de40:	e0fff717 	ldw	r3,-36(fp)
  80de44:	00800044 	movi	r2,1
  80de48:	10c4983a 	sll	r2,r2,r3
  80de4c:	e0ffff17 	ldw	r3,-4(fp)
  80de50:	1887883a 	add	r3,r3,r2
  80de54:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80de58:	e13ff817 	ldw	r4,-32(fp)
  80de5c:	21000044 	addi	r4,r4,1
  80de60:	e13ff815 	stw	r4,-32(fp)
  80de64:	e0bffa17 	ldw	r2,-24(fp)
  80de68:	e0fff817 	ldw	r3,-32(fp)
  80de6c:	10ffef2e 	bgeu	r2,r3,80de2c <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  80de70:	00009706 	br	80e0d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80de74:	e0bff217 	ldw	r2,-56(fp)
  80de78:	10800e17 	ldw	r2,56(r2)
  80de7c:	10800098 	cmpnei	r2,r2,2
  80de80:	1000181e 	bne	r2,zero,80dee4 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  80de84:	e13ffb17 	ldw	r4,-20(fp)
  80de88:	e13ff815 	stw	r4,-32(fp)
  80de8c:	00001106 	br	80ded4 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80de90:	e0fffc17 	ldw	r3,-16(fp)
  80de94:	e0fffc17 	ldw	r3,-16(fp)
  80de98:	18c5883a 	add	r2,r3,r3
  80de9c:	1007883a 	mov	r3,r2
  80dea0:	e0bfff17 	ldw	r2,-4(fp)
  80dea4:	1885883a 	add	r2,r3,r2
  80dea8:	e0fff917 	ldw	r3,-28(fp)
  80deac:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80deb0:	e0fff717 	ldw	r3,-36(fp)
  80deb4:	00800044 	movi	r2,1
  80deb8:	10c4983a 	sll	r2,r2,r3
  80debc:	e13fff17 	ldw	r4,-4(fp)
  80dec0:	2089883a 	add	r4,r4,r2
  80dec4:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80dec8:	e0bff817 	ldw	r2,-32(fp)
  80decc:	10800044 	addi	r2,r2,1
  80ded0:	e0bff815 	stw	r2,-32(fp)
  80ded4:	e0fffa17 	ldw	r3,-24(fp)
  80ded8:	e13ff817 	ldw	r4,-32(fp)
  80dedc:	193fec2e 	bgeu	r3,r4,80de90 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  80dee0:	00007b06 	br	80e0d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80dee4:	e0bffb17 	ldw	r2,-20(fp)
  80dee8:	e0bff815 	stw	r2,-32(fp)
  80deec:	00001206 	br	80df38 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80def0:	e0fffc17 	ldw	r3,-16(fp)
  80def4:	e0fffc17 	ldw	r3,-16(fp)
  80def8:	18c5883a 	add	r2,r3,r3
  80defc:	1085883a 	add	r2,r2,r2
  80df00:	1007883a 	mov	r3,r2
  80df04:	e0bfff17 	ldw	r2,-4(fp)
  80df08:	1885883a 	add	r2,r3,r2
  80df0c:	e0fff917 	ldw	r3,-28(fp)
  80df10:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80df14:	e0fff717 	ldw	r3,-36(fp)
  80df18:	00800044 	movi	r2,1
  80df1c:	10c4983a 	sll	r2,r2,r3
  80df20:	e13fff17 	ldw	r4,-4(fp)
  80df24:	2089883a 	add	r4,r4,r2
  80df28:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80df2c:	e0bff817 	ldw	r2,-32(fp)
  80df30:	10800044 	addi	r2,r2,1
  80df34:	e0bff815 	stw	r2,-32(fp)
  80df38:	e0fffa17 	ldw	r3,-24(fp)
  80df3c:	e13ff817 	ldw	r4,-32(fp)
  80df40:	193feb2e 	bgeu	r3,r4,80def0 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  80df44:	00006206 	br	80e0d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80df48:	e0bff217 	ldw	r2,-56(fp)
  80df4c:	10800e17 	ldw	r2,56(r2)
  80df50:	10800058 	cmpnei	r2,r2,1
  80df54:	1000191e 	bne	r2,zero,80dfbc <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  80df58:	e0fffb17 	ldw	r3,-20(fp)
  80df5c:	e13ffe17 	ldw	r4,-8(fp)
  80df60:	1905383a 	mul	r2,r3,r4
  80df64:	e0ffff17 	ldw	r3,-4(fp)
  80df68:	1887883a 	add	r3,r3,r2
  80df6c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80df70:	e13ffb17 	ldw	r4,-20(fp)
  80df74:	e13ff615 	stw	r4,-40(fp)
  80df78:	00000c06 	br	80dfac <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80df7c:	e0ffff17 	ldw	r3,-4(fp)
  80df80:	e0bffc17 	ldw	r2,-16(fp)
  80df84:	1885883a 	add	r2,r3,r2
  80df88:	e0fff917 	ldw	r3,-28(fp)
  80df8c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  80df90:	e0bfff17 	ldw	r2,-4(fp)
  80df94:	e0fffe17 	ldw	r3,-8(fp)
  80df98:	10c5883a 	add	r2,r2,r3
  80df9c:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80dfa0:	e13ff617 	ldw	r4,-40(fp)
  80dfa4:	21000044 	addi	r4,r4,1
  80dfa8:	e13ff615 	stw	r4,-40(fp)
  80dfac:	e0bffa17 	ldw	r2,-24(fp)
  80dfb0:	e0fff617 	ldw	r3,-40(fp)
  80dfb4:	10fff12e 	bgeu	r2,r3,80df7c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  80dfb8:	00004506 	br	80e0d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80dfbc:	e0bff217 	ldw	r2,-56(fp)
  80dfc0:	10800e17 	ldw	r2,56(r2)
  80dfc4:	10800098 	cmpnei	r2,r2,2
  80dfc8:	1000201e 	bne	r2,zero,80e04c <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  80dfcc:	e13ffe17 	ldw	r4,-8(fp)
  80dfd0:	e13ffe17 	ldw	r4,-8(fp)
  80dfd4:	2105883a 	add	r2,r4,r4
  80dfd8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80dfdc:	e0fffb17 	ldw	r3,-20(fp)
  80dfe0:	e13ffe17 	ldw	r4,-8(fp)
  80dfe4:	1905383a 	mul	r2,r3,r4
  80dfe8:	e0ffff17 	ldw	r3,-4(fp)
  80dfec:	1887883a 	add	r3,r3,r2
  80dff0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80dff4:	e13ffb17 	ldw	r4,-20(fp)
  80dff8:	e13ff615 	stw	r4,-40(fp)
  80dffc:	00000f06 	br	80e03c <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80e000:	e0fffc17 	ldw	r3,-16(fp)
  80e004:	e0fffc17 	ldw	r3,-16(fp)
  80e008:	18c5883a 	add	r2,r3,r3
  80e00c:	1007883a 	mov	r3,r2
  80e010:	e0bfff17 	ldw	r2,-4(fp)
  80e014:	1885883a 	add	r2,r3,r2
  80e018:	e0fff917 	ldw	r3,-28(fp)
  80e01c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  80e020:	e13fff17 	ldw	r4,-4(fp)
  80e024:	e0bffe17 	ldw	r2,-8(fp)
  80e028:	2089883a 	add	r4,r4,r2
  80e02c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80e030:	e0fff617 	ldw	r3,-40(fp)
  80e034:	18c00044 	addi	r3,r3,1
  80e038:	e0fff615 	stw	r3,-40(fp)
  80e03c:	e13ffa17 	ldw	r4,-24(fp)
  80e040:	e0bff617 	ldw	r2,-40(fp)
  80e044:	20bfee2e 	bgeu	r4,r2,80e000 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  80e048:	00002106 	br	80e0d0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80e04c:	e0fffe17 	ldw	r3,-8(fp)
  80e050:	e0fffe17 	ldw	r3,-8(fp)
  80e054:	18c5883a 	add	r2,r3,r3
  80e058:	1085883a 	add	r2,r2,r2
  80e05c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80e060:	e13ffb17 	ldw	r4,-20(fp)
  80e064:	e0fffe17 	ldw	r3,-8(fp)
  80e068:	20c5383a 	mul	r2,r4,r3
  80e06c:	e13fff17 	ldw	r4,-4(fp)
  80e070:	2089883a 	add	r4,r4,r2
  80e074:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80e078:	e0bffb17 	ldw	r2,-20(fp)
  80e07c:	e0bff615 	stw	r2,-40(fp)
  80e080:	00001006 	br	80e0c4 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80e084:	e0fffc17 	ldw	r3,-16(fp)
  80e088:	e0fffc17 	ldw	r3,-16(fp)
  80e08c:	18c5883a 	add	r2,r3,r3
  80e090:	1085883a 	add	r2,r2,r2
  80e094:	1007883a 	mov	r3,r2
  80e098:	e0bfff17 	ldw	r2,-4(fp)
  80e09c:	1885883a 	add	r2,r3,r2
  80e0a0:	e0fff917 	ldw	r3,-28(fp)
  80e0a4:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  80e0a8:	e13fff17 	ldw	r4,-4(fp)
  80e0ac:	e0bffe17 	ldw	r2,-8(fp)
  80e0b0:	2089883a 	add	r4,r4,r2
  80e0b4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80e0b8:	e0fff617 	ldw	r3,-40(fp)
  80e0bc:	18c00044 	addi	r3,r3,1
  80e0c0:	e0fff615 	stw	r3,-40(fp)
  80e0c4:	e13ffa17 	ldw	r4,-24(fp)
  80e0c8:	e0bff617 	ldw	r2,-40(fp)
  80e0cc:	20bfed2e 	bgeu	r4,r2,80e084 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  80e0d0:	e037883a 	mov	sp,fp
  80e0d4:	df000017 	ldw	fp,0(sp)
  80e0d8:	dec00104 	addi	sp,sp,4
  80e0dc:	f800283a 	ret

0080e0e0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80e0e0:	defff804 	addi	sp,sp,-32
  80e0e4:	dfc00715 	stw	ra,28(sp)
  80e0e8:	df000615 	stw	fp,24(sp)
  80e0ec:	df000604 	addi	fp,sp,24
  80e0f0:	e13ffc15 	stw	r4,-16(fp)
  80e0f4:	e17ffd15 	stw	r5,-12(fp)
  80e0f8:	e1bffe15 	stw	r6,-8(fp)
  80e0fc:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80e100:	e0800317 	ldw	r2,12(fp)
  80e104:	d8800015 	stw	r2,0(sp)
  80e108:	e0800417 	ldw	r2,16(fp)
  80e10c:	d8800115 	stw	r2,4(sp)
  80e110:	e13ffc17 	ldw	r4,-16(fp)
  80e114:	e17ffd17 	ldw	r5,-12(fp)
  80e118:	e1bfff17 	ldw	r6,-4(fp)
  80e11c:	e1fffe17 	ldw	r7,-8(fp)
  80e120:	080d9c00 	call	80d9c0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  80e124:	e0800317 	ldw	r2,12(fp)
  80e128:	d8800015 	stw	r2,0(sp)
  80e12c:	e0800417 	ldw	r2,16(fp)
  80e130:	d8800115 	stw	r2,4(sp)
  80e134:	e13ffc17 	ldw	r4,-16(fp)
  80e138:	e17ffd17 	ldw	r5,-12(fp)
  80e13c:	e1bfff17 	ldw	r6,-4(fp)
  80e140:	e1c00217 	ldw	r7,8(fp)
  80e144:	080d9c00 	call	80d9c0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  80e148:	e0800317 	ldw	r2,12(fp)
  80e14c:	d8800015 	stw	r2,0(sp)
  80e150:	e0800417 	ldw	r2,16(fp)
  80e154:	d8800115 	stw	r2,4(sp)
  80e158:	e13ffc17 	ldw	r4,-16(fp)
  80e15c:	e17ffd17 	ldw	r5,-12(fp)
  80e160:	e1bffe17 	ldw	r6,-8(fp)
  80e164:	e1c00217 	ldw	r7,8(fp)
  80e168:	080dd100 	call	80dd10 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80e16c:	e0800317 	ldw	r2,12(fp)
  80e170:	d8800015 	stw	r2,0(sp)
  80e174:	e0800417 	ldw	r2,16(fp)
  80e178:	d8800115 	stw	r2,4(sp)
  80e17c:	e13ffc17 	ldw	r4,-16(fp)
  80e180:	e17fff17 	ldw	r5,-4(fp)
  80e184:	e1bffe17 	ldw	r6,-8(fp)
  80e188:	e1c00217 	ldw	r7,8(fp)
  80e18c:	080dd100 	call	80dd10 <alt_up_pixel_buffer_dma_draw_vline>
}
  80e190:	e037883a 	mov	sp,fp
  80e194:	dfc00117 	ldw	ra,4(sp)
  80e198:	df000017 	ldw	fp,0(sp)
  80e19c:	dec00204 	addi	sp,sp,8
  80e1a0:	f800283a 	ret

0080e1a4 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80e1a4:	defffb04 	addi	sp,sp,-20
  80e1a8:	df000415 	stw	fp,16(sp)
  80e1ac:	df000404 	addi	fp,sp,16
  80e1b0:	e13ffc15 	stw	r4,-16(fp)
  80e1b4:	e17ffd15 	stw	r5,-12(fp)
  80e1b8:	e1bffe15 	stw	r6,-8(fp)
  80e1bc:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  80e1c0:	e0c00217 	ldw	r3,8(fp)
  80e1c4:	1804c03a 	cmpne	r2,r3,zero
  80e1c8:	10000b1e 	bne	r2,zero,80e1f8 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80e1cc:	e13ffd17 	ldw	r4,-12(fp)
  80e1d0:	e0ffff17 	ldw	r3,-4(fp)
  80e1d4:	20c5383a 	mul	r2,r4,r3
  80e1d8:	e13ffe17 	ldw	r4,-8(fp)
  80e1dc:	1105883a 	add	r2,r2,r4
  80e1e0:	1007883a 	mov	r3,r2
  80e1e4:	e0bffc17 	ldw	r2,-16(fp)
  80e1e8:	1885883a 	add	r2,r3,r2
  80e1ec:	e0c00117 	ldw	r3,4(fp)
  80e1f0:	10c00025 	stbio	r3,0(r2)
  80e1f4:	00001b06 	br	80e264 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  80e1f8:	e1000217 	ldw	r4,8(fp)
  80e1fc:	20800058 	cmpnei	r2,r4,1
  80e200:	10000c1e 	bne	r2,zero,80e234 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80e204:	e0fffd17 	ldw	r3,-12(fp)
  80e208:	e13fff17 	ldw	r4,-4(fp)
  80e20c:	1905383a 	mul	r2,r3,r4
  80e210:	e0fffe17 	ldw	r3,-8(fp)
  80e214:	10c5883a 	add	r2,r2,r3
  80e218:	1085883a 	add	r2,r2,r2
  80e21c:	1007883a 	mov	r3,r2
  80e220:	e0bffc17 	ldw	r2,-16(fp)
  80e224:	1885883a 	add	r2,r3,r2
  80e228:	e1000117 	ldw	r4,4(fp)
  80e22c:	1100002d 	sthio	r4,0(r2)
  80e230:	00000c06 	br	80e264 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80e234:	e0fffd17 	ldw	r3,-12(fp)
  80e238:	e13fff17 	ldw	r4,-4(fp)
  80e23c:	1905383a 	mul	r2,r3,r4
  80e240:	e0fffe17 	ldw	r3,-8(fp)
  80e244:	10c5883a 	add	r2,r2,r3
  80e248:	1085883a 	add	r2,r2,r2
  80e24c:	1085883a 	add	r2,r2,r2
  80e250:	1007883a 	mov	r3,r2
  80e254:	e0bffc17 	ldw	r2,-16(fp)
  80e258:	1885883a 	add	r2,r3,r2
  80e25c:	e1000117 	ldw	r4,4(fp)
  80e260:	11000035 	stwio	r4,0(r2)
}
  80e264:	e037883a 	mov	sp,fp
  80e268:	df000017 	ldw	fp,0(sp)
  80e26c:	dec00104 	addi	sp,sp,4
  80e270:	f800283a 	ret

0080e274 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80e274:	deffe404 	addi	sp,sp,-112
  80e278:	dfc01b15 	stw	ra,108(sp)
  80e27c:	df001a15 	stw	fp,104(sp)
  80e280:	df001a04 	addi	fp,sp,104
  80e284:	e13fe815 	stw	r4,-96(fp)
  80e288:	e17fe915 	stw	r5,-92(fp)
  80e28c:	e1bfea15 	stw	r6,-88(fp)
  80e290:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  80e294:	e0bfe917 	ldw	r2,-92(fp)
  80e298:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  80e29c:	e0ffea17 	ldw	r3,-88(fp)
  80e2a0:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  80e2a4:	e13feb17 	ldw	r4,-84(fp)
  80e2a8:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  80e2ac:	e0800217 	ldw	r2,8(fp)
  80e2b0:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80e2b4:	e0fff717 	ldw	r3,-36(fp)
  80e2b8:	e13ff917 	ldw	r4,-28(fp)
  80e2bc:	1905c83a 	sub	r2,r3,r4
  80e2c0:	e0bfff15 	stw	r2,-4(fp)
  80e2c4:	e0ffff17 	ldw	r3,-4(fp)
  80e2c8:	1804403a 	cmpge	r2,r3,zero
  80e2cc:	1000031e 	bne	r2,zero,80e2dc <alt_up_pixel_buffer_dma_draw_line+0x68>
  80e2d0:	e13fff17 	ldw	r4,-4(fp)
  80e2d4:	0109c83a 	sub	r4,zero,r4
  80e2d8:	e13fff15 	stw	r4,-4(fp)
  80e2dc:	e0fff817 	ldw	r3,-32(fp)
  80e2e0:	e13ffa17 	ldw	r4,-24(fp)
  80e2e4:	1905c83a 	sub	r2,r3,r4
  80e2e8:	e0bffe15 	stw	r2,-8(fp)
  80e2ec:	e0fffe17 	ldw	r3,-8(fp)
  80e2f0:	1804403a 	cmpge	r2,r3,zero
  80e2f4:	1000031e 	bne	r2,zero,80e304 <alt_up_pixel_buffer_dma_draw_line+0x90>
  80e2f8:	e13ffe17 	ldw	r4,-8(fp)
  80e2fc:	0109c83a 	sub	r4,zero,r4
  80e300:	e13ffe15 	stw	r4,-8(fp)
  80e304:	e0fffe17 	ldw	r3,-8(fp)
  80e308:	e13fff17 	ldw	r4,-4(fp)
  80e30c:	1904803a 	cmplt	r2,r3,r4
  80e310:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80e314:	e0bfe817 	ldw	r2,-96(fp)
  80e318:	10800e17 	ldw	r2,56(r2)
  80e31c:	10800060 	cmpeqi	r2,r2,1
  80e320:	10000c1e 	bne	r2,zero,80e354 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  80e324:	e0bfe817 	ldw	r2,-96(fp)
  80e328:	10800e17 	ldw	r2,56(r2)
  80e32c:	10800098 	cmpnei	r2,r2,2
  80e330:	1000031e 	bne	r2,zero,80e340 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  80e334:	00800044 	movi	r2,1
  80e338:	e0bffc15 	stw	r2,-16(fp)
  80e33c:	00000206 	br	80e348 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  80e340:	00c00084 	movi	r3,2
  80e344:	e0fffc15 	stw	r3,-16(fp)
  80e348:	e13ffc17 	ldw	r4,-16(fp)
  80e34c:	e13ffd15 	stw	r4,-12(fp)
  80e350:	00000106 	br	80e358 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  80e354:	e03ffd15 	stw	zero,-12(fp)
  80e358:	e0bffd17 	ldw	r2,-12(fp)
  80e35c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  80e360:	e0c00317 	ldw	r3,12(fp)
  80e364:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  80e368:	e0bfe817 	ldw	r2,-96(fp)
  80e36c:	10800d17 	ldw	r2,52(r2)
  80e370:	1004c03a 	cmpne	r2,r2,zero
  80e374:	1000091e 	bne	r2,zero,80e39c <alt_up_pixel_buffer_dma_draw_line+0x128>
  80e378:	e0bfe817 	ldw	r2,-96(fp)
  80e37c:	10c01317 	ldw	r3,76(r2)
  80e380:	e0bfef17 	ldw	r2,-68(fp)
  80e384:	1885c83a 	sub	r2,r3,r2
  80e388:	1007883a 	mov	r3,r2
  80e38c:	00800044 	movi	r2,1
  80e390:	10c4983a 	sll	r2,r2,r3
  80e394:	e0bffb15 	stw	r2,-20(fp)
  80e398:	00000306 	br	80e3a8 <alt_up_pixel_buffer_dma_draw_line+0x134>
  80e39c:	e0bfe817 	ldw	r2,-96(fp)
  80e3a0:	10800f17 	ldw	r2,60(r2)
  80e3a4:	e0bffb15 	stw	r2,-20(fp)
  80e3a8:	e13ffb17 	ldw	r4,-20(fp)
  80e3ac:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  80e3b0:	e0800417 	ldw	r2,16(fp)
  80e3b4:	10800058 	cmpnei	r2,r2,1
  80e3b8:	1000041e 	bne	r2,zero,80e3cc <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  80e3bc:	e0bfe817 	ldw	r2,-96(fp)
  80e3c0:	10800c17 	ldw	r2,48(r2)
  80e3c4:	e0bfed15 	stw	r2,-76(fp)
  80e3c8:	00000306 	br	80e3d8 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  80e3cc:	e0bfe817 	ldw	r2,-96(fp)
  80e3d0:	10800b17 	ldw	r2,44(r2)
  80e3d4:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  80e3d8:	e0fff603 	ldbu	r3,-40(fp)
  80e3dc:	18803fcc 	andi	r2,r3,255
  80e3e0:	1080201c 	xori	r2,r2,128
  80e3e4:	10bfe004 	addi	r2,r2,-128
  80e3e8:	10800050 	cmplti	r2,r2,1
  80e3ec:	10000c1e 	bne	r2,zero,80e420 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  80e3f0:	e13ffa17 	ldw	r4,-24(fp)
  80e3f4:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  80e3f8:	e0bff917 	ldw	r2,-28(fp)
  80e3fc:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  80e400:	e0fff317 	ldw	r3,-52(fp)
  80e404:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  80e408:	e13ff817 	ldw	r4,-32(fp)
  80e40c:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  80e410:	e0bff717 	ldw	r2,-36(fp)
  80e414:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  80e418:	e0fff317 	ldw	r3,-52(fp)
  80e41c:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  80e420:	e13ff817 	ldw	r4,-32(fp)
  80e424:	e0bffa17 	ldw	r2,-24(fp)
  80e428:	20800c0e 	bge	r4,r2,80e45c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  80e42c:	e0fffa17 	ldw	r3,-24(fp)
  80e430:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  80e434:	e13ff817 	ldw	r4,-32(fp)
  80e438:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  80e43c:	e0bff317 	ldw	r2,-52(fp)
  80e440:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  80e444:	e0fff917 	ldw	r3,-28(fp)
  80e448:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  80e44c:	e13ff717 	ldw	r4,-36(fp)
  80e450:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  80e454:	e0bff317 	ldw	r2,-52(fp)
  80e458:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  80e45c:	e0fff817 	ldw	r3,-32(fp)
  80e460:	e13ffa17 	ldw	r4,-24(fp)
  80e464:	1907c83a 	sub	r3,r3,r4
  80e468:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  80e46c:	e0fff717 	ldw	r3,-36(fp)
  80e470:	e13ff917 	ldw	r4,-28(fp)
  80e474:	1905c83a 	sub	r2,r3,r4
  80e478:	e0bff415 	stw	r2,-48(fp)
  80e47c:	e0fff417 	ldw	r3,-48(fp)
  80e480:	1804403a 	cmpge	r2,r3,zero
  80e484:	1000031e 	bne	r2,zero,80e494 <alt_up_pixel_buffer_dma_draw_line+0x220>
  80e488:	e13ff417 	ldw	r4,-48(fp)
  80e48c:	0109c83a 	sub	r4,zero,r4
  80e490:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  80e494:	e0fff517 	ldw	r3,-44(fp)
  80e498:	1804d7fa 	srli	r2,r3,31
  80e49c:	e13ff517 	ldw	r4,-44(fp)
  80e4a0:	1105883a 	add	r2,r2,r4
  80e4a4:	1005d07a 	srai	r2,r2,1
  80e4a8:	0085c83a 	sub	r2,zero,r2
  80e4ac:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  80e4b0:	e0bff917 	ldw	r2,-28(fp)
  80e4b4:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  80e4b8:	e0fff917 	ldw	r3,-28(fp)
  80e4bc:	e13ff717 	ldw	r4,-36(fp)
  80e4c0:	1900030e 	bge	r3,r4,80e4d0 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  80e4c4:	00800044 	movi	r2,1
  80e4c8:	e0bff215 	stw	r2,-56(fp)
  80e4cc:	00000206 	br	80e4d8 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  80e4d0:	00ffffc4 	movi	r3,-1
  80e4d4:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80e4d8:	e13ff603 	ldbu	r4,-40(fp)
  80e4dc:	20803fcc 	andi	r2,r4,255
  80e4e0:	1080201c 	xori	r2,r2,128
  80e4e4:	10bfe004 	addi	r2,r2,-128
  80e4e8:	10800058 	cmpnei	r2,r2,1
  80e4ec:	1000221e 	bne	r2,zero,80e578 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  80e4f0:	e0bffa17 	ldw	r2,-24(fp)
  80e4f4:	e0bff115 	stw	r2,-60(fp)
  80e4f8:	00001b06 	br	80e568 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  80e4fc:	e0ffee17 	ldw	r3,-72(fp)
  80e500:	d8c00015 	stw	r3,0(sp)
  80e504:	e13fef17 	ldw	r4,-68(fp)
  80e508:	d9000115 	stw	r4,4(sp)
  80e50c:	e13fed17 	ldw	r4,-76(fp)
  80e510:	e17fec17 	ldw	r5,-80(fp)
  80e514:	e1bff017 	ldw	r6,-64(fp)
  80e518:	e1fff117 	ldw	r7,-60(fp)
  80e51c:	080e1a40 	call	80e1a4 <helper_plot_pixel>
			error = error + deltay;
  80e520:	e0bff317 	ldw	r2,-52(fp)
  80e524:	e0fff417 	ldw	r3,-48(fp)
  80e528:	10c5883a 	add	r2,r2,r3
  80e52c:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  80e530:	e13ff317 	ldw	r4,-52(fp)
  80e534:	20800050 	cmplti	r2,r4,1
  80e538:	1000081e 	bne	r2,zero,80e55c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  80e53c:	e0bff017 	ldw	r2,-64(fp)
  80e540:	e0fff217 	ldw	r3,-56(fp)
  80e544:	10c5883a 	add	r2,r2,r3
  80e548:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  80e54c:	e13ff317 	ldw	r4,-52(fp)
  80e550:	e0bff517 	ldw	r2,-44(fp)
  80e554:	2089c83a 	sub	r4,r4,r2
  80e558:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80e55c:	e0fff117 	ldw	r3,-60(fp)
  80e560:	18c00044 	addi	r3,r3,1
  80e564:	e0fff115 	stw	r3,-60(fp)
  80e568:	e13ff817 	ldw	r4,-32(fp)
  80e56c:	e0bff117 	ldw	r2,-60(fp)
  80e570:	20bfe20e 	bge	r4,r2,80e4fc <alt_up_pixel_buffer_dma_draw_line+0x288>
  80e574:	00002106 	br	80e5fc <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80e578:	e0fffa17 	ldw	r3,-24(fp)
  80e57c:	e0fff115 	stw	r3,-60(fp)
  80e580:	00001b06 	br	80e5f0 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  80e584:	e13fee17 	ldw	r4,-72(fp)
  80e588:	d9000015 	stw	r4,0(sp)
  80e58c:	e0bfef17 	ldw	r2,-68(fp)
  80e590:	d8800115 	stw	r2,4(sp)
  80e594:	e13fed17 	ldw	r4,-76(fp)
  80e598:	e17fec17 	ldw	r5,-80(fp)
  80e59c:	e1bff117 	ldw	r6,-60(fp)
  80e5a0:	e1fff017 	ldw	r7,-64(fp)
  80e5a4:	080e1a40 	call	80e1a4 <helper_plot_pixel>
			error = error + deltay;
  80e5a8:	e0fff317 	ldw	r3,-52(fp)
  80e5ac:	e13ff417 	ldw	r4,-48(fp)
  80e5b0:	1907883a 	add	r3,r3,r4
  80e5b4:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  80e5b8:	e0fff317 	ldw	r3,-52(fp)
  80e5bc:	18800050 	cmplti	r2,r3,1
  80e5c0:	1000081e 	bne	r2,zero,80e5e4 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  80e5c4:	e13ff017 	ldw	r4,-64(fp)
  80e5c8:	e0bff217 	ldw	r2,-56(fp)
  80e5cc:	2089883a 	add	r4,r4,r2
  80e5d0:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  80e5d4:	e0fff317 	ldw	r3,-52(fp)
  80e5d8:	e13ff517 	ldw	r4,-44(fp)
  80e5dc:	1907c83a 	sub	r3,r3,r4
  80e5e0:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80e5e4:	e0bff117 	ldw	r2,-60(fp)
  80e5e8:	10800044 	addi	r2,r2,1
  80e5ec:	e0bff115 	stw	r2,-60(fp)
  80e5f0:	e0fff817 	ldw	r3,-32(fp)
  80e5f4:	e13ff117 	ldw	r4,-60(fp)
  80e5f8:	193fe20e 	bge	r3,r4,80e584 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  80e5fc:	e037883a 	mov	sp,fp
  80e600:	dfc00117 	ldw	ra,4(sp)
  80e604:	df000017 	ldw	fp,0(sp)
  80e608:	dec00204 	addi	sp,sp,8
  80e60c:	f800283a 	ret

0080e610 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80e610:	defff404 	addi	sp,sp,-48
  80e614:	df000b15 	stw	fp,44(sp)
  80e618:	df000b04 	addi	fp,sp,44
  80e61c:	e13ffb15 	stw	r4,-20(fp)
  80e620:	e17ffc15 	stw	r5,-16(fp)
  80e624:	e1bffd15 	stw	r6,-12(fp)
  80e628:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80e62c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e630:	00802074 	movhi	r2,129
  80e634:	108daa04 	addi	r2,r2,13992
  80e638:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80e63c:	1005003a 	cmpeq	r2,r2,zero
  80e640:	1000411e 	bne	r2,zero,80e748 <alt_alarm_start+0x138>
  {
    if (alarm)
  80e644:	e0bffb17 	ldw	r2,-20(fp)
  80e648:	1005003a 	cmpeq	r2,r2,zero
  80e64c:	10003b1e 	bne	r2,zero,80e73c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80e650:	e0fffb17 	ldw	r3,-20(fp)
  80e654:	e0bffd17 	ldw	r2,-12(fp)
  80e658:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80e65c:	e0fffb17 	ldw	r3,-20(fp)
  80e660:	e0bffe17 	ldw	r2,-8(fp)
  80e664:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e668:	0005303a 	rdctl	r2,status
  80e66c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e670:	e0fff817 	ldw	r3,-32(fp)
  80e674:	00bfff84 	movi	r2,-2
  80e678:	1884703a 	and	r2,r3,r2
  80e67c:	1001703a 	wrctl	status,r2
  
  return context;
  80e680:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80e684:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80e688:	00802074 	movhi	r2,129
  80e68c:	108dab04 	addi	r2,r2,13996
  80e690:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80e694:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80e698:	e0fffc17 	ldw	r3,-16(fp)
  80e69c:	e0bff917 	ldw	r2,-28(fp)
  80e6a0:	1885883a 	add	r2,r3,r2
  80e6a4:	10c00044 	addi	r3,r2,1
  80e6a8:	e0bffb17 	ldw	r2,-20(fp)
  80e6ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80e6b0:	e0bffb17 	ldw	r2,-20(fp)
  80e6b4:	10c00217 	ldw	r3,8(r2)
  80e6b8:	e0bff917 	ldw	r2,-28(fp)
  80e6bc:	1880042e 	bgeu	r3,r2,80e6d0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80e6c0:	e0fffb17 	ldw	r3,-20(fp)
  80e6c4:	00800044 	movi	r2,1
  80e6c8:	18800405 	stb	r2,16(r3)
  80e6cc:	00000206 	br	80e6d8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80e6d0:	e0bffb17 	ldw	r2,-20(fp)
  80e6d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80e6d8:	e0fffb17 	ldw	r3,-20(fp)
  80e6dc:	00802074 	movhi	r2,129
  80e6e0:	1086d404 	addi	r2,r2,6992
  80e6e4:	e0bff615 	stw	r2,-40(fp)
  80e6e8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e6ec:	e0fff717 	ldw	r3,-36(fp)
  80e6f0:	e0bff617 	ldw	r2,-40(fp)
  80e6f4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80e6f8:	e0bff617 	ldw	r2,-40(fp)
  80e6fc:	10c00017 	ldw	r3,0(r2)
  80e700:	e0bff717 	ldw	r2,-36(fp)
  80e704:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e708:	e0bff617 	ldw	r2,-40(fp)
  80e70c:	10c00017 	ldw	r3,0(r2)
  80e710:	e0bff717 	ldw	r2,-36(fp)
  80e714:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80e718:	e0fff617 	ldw	r3,-40(fp)
  80e71c:	e0bff717 	ldw	r2,-36(fp)
  80e720:	18800015 	stw	r2,0(r3)
  80e724:	e0bffa17 	ldw	r2,-24(fp)
  80e728:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e72c:	e0bff517 	ldw	r2,-44(fp)
  80e730:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80e734:	e03fff15 	stw	zero,-4(fp)
  80e738:	00000506 	br	80e750 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80e73c:	00bffa84 	movi	r2,-22
  80e740:	e0bfff15 	stw	r2,-4(fp)
  80e744:	00000206 	br	80e750 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80e748:	00bfde84 	movi	r2,-134
  80e74c:	e0bfff15 	stw	r2,-4(fp)
  80e750:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80e754:	e037883a 	mov	sp,fp
  80e758:	df000017 	ldw	fp,0(sp)
  80e75c:	dec00104 	addi	sp,sp,4
  80e760:	f800283a 	ret

0080e764 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80e764:	defffa04 	addi	sp,sp,-24
  80e768:	dfc00515 	stw	ra,20(sp)
  80e76c:	df000415 	stw	fp,16(sp)
  80e770:	df000404 	addi	fp,sp,16
  80e774:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80e778:	008000c4 	movi	r2,3
  80e77c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  80e780:	e0fffc17 	ldw	r3,-16(fp)
  80e784:	008003f4 	movhi	r2,15
  80e788:	10909004 	addi	r2,r2,16960
  80e78c:	188b383a 	mul	r5,r3,r2
  80e790:	0100bef4 	movhi	r4,763
  80e794:	213c2004 	addi	r4,r4,-3968
  80e798:	080a8440 	call	80a844 <__udivsi3>
  80e79c:	100b883a 	mov	r5,r2
  80e7a0:	01200034 	movhi	r4,32768
  80e7a4:	213fffc4 	addi	r4,r4,-1
  80e7a8:	080a8440 	call	80a844 <__udivsi3>
  80e7ac:	100b883a 	mov	r5,r2
  80e7b0:	e13fff17 	ldw	r4,-4(fp)
  80e7b4:	080a8440 	call	80a844 <__udivsi3>
  80e7b8:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80e7bc:	e0bffd17 	ldw	r2,-12(fp)
  80e7c0:	1005003a 	cmpeq	r2,r2,zero
  80e7c4:	1000281e 	bne	r2,zero,80e868 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  80e7c8:	e03ffe15 	stw	zero,-8(fp)
  80e7cc:	00001606 	br	80e828 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80e7d0:	00a00034 	movhi	r2,32768
  80e7d4:	10bfffc4 	addi	r2,r2,-1
  80e7d8:	10bfffc4 	addi	r2,r2,-1
  80e7dc:	103ffe1e 	bne	r2,zero,80e7d8 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80e7e0:	e0fffc17 	ldw	r3,-16(fp)
  80e7e4:	008003f4 	movhi	r2,15
  80e7e8:	10909004 	addi	r2,r2,16960
  80e7ec:	188b383a 	mul	r5,r3,r2
  80e7f0:	0100bef4 	movhi	r4,763
  80e7f4:	213c2004 	addi	r4,r4,-3968
  80e7f8:	080a8440 	call	80a844 <__udivsi3>
  80e7fc:	100b883a 	mov	r5,r2
  80e800:	01200034 	movhi	r4,32768
  80e804:	213fffc4 	addi	r4,r4,-1
  80e808:	080a8440 	call	80a844 <__udivsi3>
  80e80c:	1007883a 	mov	r3,r2
  80e810:	e0bfff17 	ldw	r2,-4(fp)
  80e814:	10c5c83a 	sub	r2,r2,r3
  80e818:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80e81c:	e0bffe17 	ldw	r2,-8(fp)
  80e820:	10800044 	addi	r2,r2,1
  80e824:	e0bffe15 	stw	r2,-8(fp)
  80e828:	e0fffe17 	ldw	r3,-8(fp)
  80e82c:	e0bffd17 	ldw	r2,-12(fp)
  80e830:	18bfe716 	blt	r3,r2,80e7d0 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80e834:	e0fffc17 	ldw	r3,-16(fp)
  80e838:	008003f4 	movhi	r2,15
  80e83c:	10909004 	addi	r2,r2,16960
  80e840:	188b383a 	mul	r5,r3,r2
  80e844:	0100bef4 	movhi	r4,763
  80e848:	213c2004 	addi	r4,r4,-3968
  80e84c:	080a8440 	call	80a844 <__udivsi3>
  80e850:	1007883a 	mov	r3,r2
  80e854:	e0bfff17 	ldw	r2,-4(fp)
  80e858:	1885383a 	mul	r2,r3,r2
  80e85c:	10bfffc4 	addi	r2,r2,-1
  80e860:	103ffe1e 	bne	r2,zero,80e85c <alt_busy_sleep+0xf8>
  80e864:	00000c06 	br	80e898 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80e868:	e0fffc17 	ldw	r3,-16(fp)
  80e86c:	008003f4 	movhi	r2,15
  80e870:	10909004 	addi	r2,r2,16960
  80e874:	188b383a 	mul	r5,r3,r2
  80e878:	0100bef4 	movhi	r4,763
  80e87c:	213c2004 	addi	r4,r4,-3968
  80e880:	080a8440 	call	80a844 <__udivsi3>
  80e884:	1007883a 	mov	r3,r2
  80e888:	e0bfff17 	ldw	r2,-4(fp)
  80e88c:	1885383a 	mul	r2,r3,r2
  80e890:	10bfffc4 	addi	r2,r2,-1
  80e894:	00bffe16 	blt	zero,r2,80e890 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80e898:	0005883a 	mov	r2,zero
}
  80e89c:	e037883a 	mov	sp,fp
  80e8a0:	dfc00117 	ldw	ra,4(sp)
  80e8a4:	df000017 	ldw	fp,0(sp)
  80e8a8:	dec00204 	addi	sp,sp,8
  80e8ac:	f800283a 	ret

0080e8b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80e8b0:	defffe04 	addi	sp,sp,-8
  80e8b4:	df000115 	stw	fp,4(sp)
  80e8b8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e8bc:	e03fff15 	stw	zero,-4(fp)
  80e8c0:	00000506 	br	80e8d8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80e8c4:	e0bfff17 	ldw	r2,-4(fp)
  80e8c8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e8cc:	e0bfff17 	ldw	r2,-4(fp)
  80e8d0:	10800804 	addi	r2,r2,32
  80e8d4:	e0bfff15 	stw	r2,-4(fp)
  80e8d8:	e0bfff17 	ldw	r2,-4(fp)
  80e8dc:	10820030 	cmpltui	r2,r2,2048
  80e8e0:	103ff81e 	bne	r2,zero,80e8c4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80e8e4:	e037883a 	mov	sp,fp
  80e8e8:	df000017 	ldw	fp,0(sp)
  80e8ec:	dec00104 	addi	sp,sp,4
  80e8f0:	f800283a 	ret

0080e8f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80e8f4:	defff904 	addi	sp,sp,-28
  80e8f8:	dfc00615 	stw	ra,24(sp)
  80e8fc:	df000515 	stw	fp,20(sp)
  80e900:	df000504 	addi	fp,sp,20
  80e904:	e13ffd15 	stw	r4,-12(fp)
  80e908:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80e90c:	e0bffd17 	ldw	r2,-12(fp)
  80e910:	1005003a 	cmpeq	r2,r2,zero
  80e914:	1000041e 	bne	r2,zero,80e928 <alt_dev_llist_insert+0x34>
  80e918:	e0bffd17 	ldw	r2,-12(fp)
  80e91c:	10800217 	ldw	r2,8(r2)
  80e920:	1004c03a 	cmpne	r2,r2,zero
  80e924:	1000071e 	bne	r2,zero,80e944 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80e928:	080e9a80 	call	80e9a8 <alt_get_errno>
  80e92c:	1007883a 	mov	r3,r2
  80e930:	00800584 	movi	r2,22
  80e934:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80e938:	00bffa84 	movi	r2,-22
  80e93c:	e0bfff15 	stw	r2,-4(fp)
  80e940:	00001306 	br	80e990 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80e944:	e0fffd17 	ldw	r3,-12(fp)
  80e948:	e0bffe17 	ldw	r2,-8(fp)
  80e94c:	e0bffb15 	stw	r2,-20(fp)
  80e950:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e954:	e0fffc17 	ldw	r3,-16(fp)
  80e958:	e0bffb17 	ldw	r2,-20(fp)
  80e95c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80e960:	e0bffb17 	ldw	r2,-20(fp)
  80e964:	10c00017 	ldw	r3,0(r2)
  80e968:	e0bffc17 	ldw	r2,-16(fp)
  80e96c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e970:	e0bffb17 	ldw	r2,-20(fp)
  80e974:	10c00017 	ldw	r3,0(r2)
  80e978:	e0bffc17 	ldw	r2,-16(fp)
  80e97c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80e980:	e0fffb17 	ldw	r3,-20(fp)
  80e984:	e0bffc17 	ldw	r2,-16(fp)
  80e988:	18800015 	stw	r2,0(r3)

  return 0;  
  80e98c:	e03fff15 	stw	zero,-4(fp)
  80e990:	e0bfff17 	ldw	r2,-4(fp)
}
  80e994:	e037883a 	mov	sp,fp
  80e998:	dfc00117 	ldw	ra,4(sp)
  80e99c:	df000017 	ldw	fp,0(sp)
  80e9a0:	dec00204 	addi	sp,sp,8
  80e9a4:	f800283a 	ret

0080e9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e9a8:	defffd04 	addi	sp,sp,-12
  80e9ac:	dfc00215 	stw	ra,8(sp)
  80e9b0:	df000115 	stw	fp,4(sp)
  80e9b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e9b8:	00802074 	movhi	r2,129
  80e9bc:	1086d204 	addi	r2,r2,6984
  80e9c0:	10800017 	ldw	r2,0(r2)
  80e9c4:	1005003a 	cmpeq	r2,r2,zero
  80e9c8:	1000061e 	bne	r2,zero,80e9e4 <alt_get_errno+0x3c>
  80e9cc:	00802074 	movhi	r2,129
  80e9d0:	1086d204 	addi	r2,r2,6984
  80e9d4:	10800017 	ldw	r2,0(r2)
  80e9d8:	103ee83a 	callr	r2
  80e9dc:	e0bfff15 	stw	r2,-4(fp)
  80e9e0:	00000306 	br	80e9f0 <alt_get_errno+0x48>
  80e9e4:	00802074 	movhi	r2,129
  80e9e8:	108da604 	addi	r2,r2,13976
  80e9ec:	e0bfff15 	stw	r2,-4(fp)
  80e9f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80e9f4:	e037883a 	mov	sp,fp
  80e9f8:	dfc00117 	ldw	ra,4(sp)
  80e9fc:	df000017 	ldw	fp,0(sp)
  80ea00:	dec00204 	addi	sp,sp,8
  80ea04:	f800283a 	ret

0080ea08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ea08:	defffd04 	addi	sp,sp,-12
  80ea0c:	dfc00215 	stw	ra,8(sp)
  80ea10:	df000115 	stw	fp,4(sp)
  80ea14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ea18:	00bfff04 	movi	r2,-4
  80ea1c:	00c02074 	movhi	r3,129
  80ea20:	18fe5804 	addi	r3,r3,-1696
  80ea24:	1885883a 	add	r2,r3,r2
  80ea28:	e0bfff15 	stw	r2,-4(fp)
  80ea2c:	00000606 	br	80ea48 <_do_ctors+0x40>
        (*ctor) (); 
  80ea30:	e0bfff17 	ldw	r2,-4(fp)
  80ea34:	10800017 	ldw	r2,0(r2)
  80ea38:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ea3c:	e0bfff17 	ldw	r2,-4(fp)
  80ea40:	10bfff04 	addi	r2,r2,-4
  80ea44:	e0bfff15 	stw	r2,-4(fp)
  80ea48:	e0ffff17 	ldw	r3,-4(fp)
  80ea4c:	00802074 	movhi	r2,129
  80ea50:	10be5704 	addi	r2,r2,-1700
  80ea54:	18bff62e 	bgeu	r3,r2,80ea30 <_do_ctors+0x28>
        (*ctor) (); 
}
  80ea58:	e037883a 	mov	sp,fp
  80ea5c:	dfc00117 	ldw	ra,4(sp)
  80ea60:	df000017 	ldw	fp,0(sp)
  80ea64:	dec00204 	addi	sp,sp,8
  80ea68:	f800283a 	ret

0080ea6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80ea6c:	defffd04 	addi	sp,sp,-12
  80ea70:	dfc00215 	stw	ra,8(sp)
  80ea74:	df000115 	stw	fp,4(sp)
  80ea78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ea7c:	00bfff04 	movi	r2,-4
  80ea80:	00c02074 	movhi	r3,129
  80ea84:	18fe5804 	addi	r3,r3,-1696
  80ea88:	1885883a 	add	r2,r3,r2
  80ea8c:	e0bfff15 	stw	r2,-4(fp)
  80ea90:	00000606 	br	80eaac <_do_dtors+0x40>
        (*dtor) (); 
  80ea94:	e0bfff17 	ldw	r2,-4(fp)
  80ea98:	10800017 	ldw	r2,0(r2)
  80ea9c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80eaa0:	e0bfff17 	ldw	r2,-4(fp)
  80eaa4:	10bfff04 	addi	r2,r2,-4
  80eaa8:	e0bfff15 	stw	r2,-4(fp)
  80eaac:	e0ffff17 	ldw	r3,-4(fp)
  80eab0:	00802074 	movhi	r2,129
  80eab4:	10be5804 	addi	r2,r2,-1696
  80eab8:	18bff62e 	bgeu	r3,r2,80ea94 <_do_dtors+0x28>
        (*dtor) (); 
}
  80eabc:	e037883a 	mov	sp,fp
  80eac0:	dfc00117 	ldw	ra,4(sp)
  80eac4:	df000017 	ldw	fp,0(sp)
  80eac8:	dec00204 	addi	sp,sp,8
  80eacc:	f800283a 	ret

0080ead0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80ead0:	defff904 	addi	sp,sp,-28
  80ead4:	dfc00615 	stw	ra,24(sp)
  80ead8:	df000515 	stw	fp,20(sp)
  80eadc:	df000504 	addi	fp,sp,20
  80eae0:	e13ffd15 	stw	r4,-12(fp)
  80eae4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80eae8:	e0bffe17 	ldw	r2,-8(fp)
  80eaec:	10800017 	ldw	r2,0(r2)
  80eaf0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80eaf4:	e13ffd17 	ldw	r4,-12(fp)
  80eaf8:	08018680 	call	801868 <strlen>
  80eafc:	10800044 	addi	r2,r2,1
  80eb00:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80eb04:	00000d06 	br	80eb3c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80eb08:	e0bffc17 	ldw	r2,-16(fp)
  80eb0c:	11000217 	ldw	r4,8(r2)
  80eb10:	e1bffb17 	ldw	r6,-20(fp)
  80eb14:	e17ffd17 	ldw	r5,-12(fp)
  80eb18:	080f5340 	call	80f534 <memcmp>
  80eb1c:	1004c03a 	cmpne	r2,r2,zero
  80eb20:	1000031e 	bne	r2,zero,80eb30 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80eb24:	e0bffc17 	ldw	r2,-16(fp)
  80eb28:	e0bfff15 	stw	r2,-4(fp)
  80eb2c:	00000706 	br	80eb4c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80eb30:	e0bffc17 	ldw	r2,-16(fp)
  80eb34:	10800017 	ldw	r2,0(r2)
  80eb38:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80eb3c:	e0fffe17 	ldw	r3,-8(fp)
  80eb40:	e0bffc17 	ldw	r2,-16(fp)
  80eb44:	10fff01e 	bne	r2,r3,80eb08 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80eb48:	e03fff15 	stw	zero,-4(fp)
  80eb4c:	e0bfff17 	ldw	r2,-4(fp)
}
  80eb50:	e037883a 	mov	sp,fp
  80eb54:	dfc00117 	ldw	ra,4(sp)
  80eb58:	df000017 	ldw	fp,0(sp)
  80eb5c:	dec00204 	addi	sp,sp,8
  80eb60:	f800283a 	ret

0080eb64 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80eb64:	defffe04 	addi	sp,sp,-8
  80eb68:	dfc00115 	stw	ra,4(sp)
  80eb6c:	df000015 	stw	fp,0(sp)
  80eb70:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80eb74:	0009883a 	mov	r4,zero
  80eb78:	01440004 	movi	r5,4096
  80eb7c:	080f4580 	call	80f458 <alt_icache_flush>
#endif
}
  80eb80:	e037883a 	mov	sp,fp
  80eb84:	dfc00117 	ldw	ra,4(sp)
  80eb88:	df000017 	ldw	fp,0(sp)
  80eb8c:	dec00204 	addi	sp,sp,8
  80eb90:	f800283a 	ret

0080eb94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80eb94:	defff904 	addi	sp,sp,-28
  80eb98:	dfc00615 	stw	ra,24(sp)
  80eb9c:	df000515 	stw	fp,20(sp)
  80eba0:	df000504 	addi	fp,sp,20
  80eba4:	e13ffc15 	stw	r4,-16(fp)
  80eba8:	e17ffd15 	stw	r5,-12(fp)
  80ebac:	e1bffe15 	stw	r6,-8(fp)
  80ebb0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80ebb4:	e0800217 	ldw	r2,8(fp)
  80ebb8:	d8800015 	stw	r2,0(sp)
  80ebbc:	e13ffc17 	ldw	r4,-16(fp)
  80ebc0:	e17ffd17 	ldw	r5,-12(fp)
  80ebc4:	e1bffe17 	ldw	r6,-8(fp)
  80ebc8:	e1ffff17 	ldw	r7,-4(fp)
  80ebcc:	080ed680 	call	80ed68 <alt_iic_isr_register>
}  
  80ebd0:	e037883a 	mov	sp,fp
  80ebd4:	dfc00117 	ldw	ra,4(sp)
  80ebd8:	df000017 	ldw	fp,0(sp)
  80ebdc:	dec00204 	addi	sp,sp,8
  80ebe0:	f800283a 	ret

0080ebe4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80ebe4:	defff904 	addi	sp,sp,-28
  80ebe8:	df000615 	stw	fp,24(sp)
  80ebec:	df000604 	addi	fp,sp,24
  80ebf0:	e13ffe15 	stw	r4,-8(fp)
  80ebf4:	e17fff15 	stw	r5,-4(fp)
  80ebf8:	e0bfff17 	ldw	r2,-4(fp)
  80ebfc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec00:	0005303a 	rdctl	r2,status
  80ec04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec08:	e0fffb17 	ldw	r3,-20(fp)
  80ec0c:	00bfff84 	movi	r2,-2
  80ec10:	1884703a 	and	r2,r3,r2
  80ec14:	1001703a 	wrctl	status,r2
  
  return context;
  80ec18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ec1c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80ec20:	e0fffc17 	ldw	r3,-16(fp)
  80ec24:	00800044 	movi	r2,1
  80ec28:	10c4983a 	sll	r2,r2,r3
  80ec2c:	1007883a 	mov	r3,r2
  80ec30:	00802074 	movhi	r2,129
  80ec34:	108dae04 	addi	r2,r2,14008
  80ec38:	10800017 	ldw	r2,0(r2)
  80ec3c:	1886b03a 	or	r3,r3,r2
  80ec40:	00802074 	movhi	r2,129
  80ec44:	108dae04 	addi	r2,r2,14008
  80ec48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ec4c:	00802074 	movhi	r2,129
  80ec50:	108dae04 	addi	r2,r2,14008
  80ec54:	10800017 	ldw	r2,0(r2)
  80ec58:	100170fa 	wrctl	ienable,r2
  80ec5c:	e0bffd17 	ldw	r2,-12(fp)
  80ec60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ec64:	e0bffa17 	ldw	r2,-24(fp)
  80ec68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ec6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80ec70:	e037883a 	mov	sp,fp
  80ec74:	df000017 	ldw	fp,0(sp)
  80ec78:	dec00104 	addi	sp,sp,4
  80ec7c:	f800283a 	ret

0080ec80 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80ec80:	defff904 	addi	sp,sp,-28
  80ec84:	df000615 	stw	fp,24(sp)
  80ec88:	df000604 	addi	fp,sp,24
  80ec8c:	e13ffe15 	stw	r4,-8(fp)
  80ec90:	e17fff15 	stw	r5,-4(fp)
  80ec94:	e0bfff17 	ldw	r2,-4(fp)
  80ec98:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec9c:	0005303a 	rdctl	r2,status
  80eca0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eca4:	e0fffb17 	ldw	r3,-20(fp)
  80eca8:	00bfff84 	movi	r2,-2
  80ecac:	1884703a 	and	r2,r3,r2
  80ecb0:	1001703a 	wrctl	status,r2
  
  return context;
  80ecb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ecb8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80ecbc:	e0fffc17 	ldw	r3,-16(fp)
  80ecc0:	00800044 	movi	r2,1
  80ecc4:	10c4983a 	sll	r2,r2,r3
  80ecc8:	0084303a 	nor	r2,zero,r2
  80eccc:	1007883a 	mov	r3,r2
  80ecd0:	00802074 	movhi	r2,129
  80ecd4:	108dae04 	addi	r2,r2,14008
  80ecd8:	10800017 	ldw	r2,0(r2)
  80ecdc:	1886703a 	and	r3,r3,r2
  80ece0:	00802074 	movhi	r2,129
  80ece4:	108dae04 	addi	r2,r2,14008
  80ece8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ecec:	00802074 	movhi	r2,129
  80ecf0:	108dae04 	addi	r2,r2,14008
  80ecf4:	10800017 	ldw	r2,0(r2)
  80ecf8:	100170fa 	wrctl	ienable,r2
  80ecfc:	e0bffd17 	ldw	r2,-12(fp)
  80ed00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ed04:	e0bffa17 	ldw	r2,-24(fp)
  80ed08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ed0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80ed10:	e037883a 	mov	sp,fp
  80ed14:	df000017 	ldw	fp,0(sp)
  80ed18:	dec00104 	addi	sp,sp,4
  80ed1c:	f800283a 	ret

0080ed20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80ed20:	defffc04 	addi	sp,sp,-16
  80ed24:	df000315 	stw	fp,12(sp)
  80ed28:	df000304 	addi	fp,sp,12
  80ed2c:	e13ffe15 	stw	r4,-8(fp)
  80ed30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80ed34:	000530fa 	rdctl	r2,ienable
  80ed38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80ed3c:	e0ffff17 	ldw	r3,-4(fp)
  80ed40:	00800044 	movi	r2,1
  80ed44:	10c4983a 	sll	r2,r2,r3
  80ed48:	1007883a 	mov	r3,r2
  80ed4c:	e0bffd17 	ldw	r2,-12(fp)
  80ed50:	1884703a 	and	r2,r3,r2
  80ed54:	1004c03a 	cmpne	r2,r2,zero
}
  80ed58:	e037883a 	mov	sp,fp
  80ed5c:	df000017 	ldw	fp,0(sp)
  80ed60:	dec00104 	addi	sp,sp,4
  80ed64:	f800283a 	ret

0080ed68 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ed68:	defff404 	addi	sp,sp,-48
  80ed6c:	dfc00b15 	stw	ra,44(sp)
  80ed70:	df000a15 	stw	fp,40(sp)
  80ed74:	df000a04 	addi	fp,sp,40
  80ed78:	e13ffb15 	stw	r4,-20(fp)
  80ed7c:	e17ffc15 	stw	r5,-16(fp)
  80ed80:	e1bffd15 	stw	r6,-12(fp)
  80ed84:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80ed88:	00bffa84 	movi	r2,-22
  80ed8c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80ed90:	e0bffc17 	ldw	r2,-16(fp)
  80ed94:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ed98:	e0bff917 	ldw	r2,-28(fp)
  80ed9c:	10800808 	cmpgei	r2,r2,32
  80eda0:	1000291e 	bne	r2,zero,80ee48 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eda4:	0005303a 	rdctl	r2,status
  80eda8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80edac:	e0fff717 	ldw	r3,-36(fp)
  80edb0:	00bfff84 	movi	r2,-2
  80edb4:	1884703a 	and	r2,r3,r2
  80edb8:	1001703a 	wrctl	status,r2
  
  return context;
  80edbc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80edc0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80edc4:	e0bff917 	ldw	r2,-28(fp)
  80edc8:	00c02074 	movhi	r3,129
  80edcc:	18cdb904 	addi	r3,r3,14052
  80edd0:	100490fa 	slli	r2,r2,3
  80edd4:	10c7883a 	add	r3,r2,r3
  80edd8:	e0bffd17 	ldw	r2,-12(fp)
  80eddc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80ede0:	e0bff917 	ldw	r2,-28(fp)
  80ede4:	00c02074 	movhi	r3,129
  80ede8:	18cdb904 	addi	r3,r3,14052
  80edec:	100490fa 	slli	r2,r2,3
  80edf0:	10c5883a 	add	r2,r2,r3
  80edf4:	10c00104 	addi	r3,r2,4
  80edf8:	e0bffe17 	ldw	r2,-8(fp)
  80edfc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80ee00:	e0bffd17 	ldw	r2,-12(fp)
  80ee04:	1005003a 	cmpeq	r2,r2,zero
  80ee08:	1000051e 	bne	r2,zero,80ee20 <alt_iic_isr_register+0xb8>
  80ee0c:	e17ff917 	ldw	r5,-28(fp)
  80ee10:	e13ffb17 	ldw	r4,-20(fp)
  80ee14:	080ebe40 	call	80ebe4 <alt_ic_irq_enable>
  80ee18:	e0bfff15 	stw	r2,-4(fp)
  80ee1c:	00000406 	br	80ee30 <alt_iic_isr_register+0xc8>
  80ee20:	e17ff917 	ldw	r5,-28(fp)
  80ee24:	e13ffb17 	ldw	r4,-20(fp)
  80ee28:	080ec800 	call	80ec80 <alt_ic_irq_disable>
  80ee2c:	e0bfff15 	stw	r2,-4(fp)
  80ee30:	e0bfff17 	ldw	r2,-4(fp)
  80ee34:	e0bffa15 	stw	r2,-24(fp)
  80ee38:	e0bff817 	ldw	r2,-32(fp)
  80ee3c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee40:	e0bff617 	ldw	r2,-40(fp)
  80ee44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80ee48:	e0bffa17 	ldw	r2,-24(fp)
}
  80ee4c:	e037883a 	mov	sp,fp
  80ee50:	dfc00117 	ldw	ra,4(sp)
  80ee54:	df000017 	ldw	fp,0(sp)
  80ee58:	dec00204 	addi	sp,sp,8
  80ee5c:	f800283a 	ret

0080ee60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80ee60:	defff904 	addi	sp,sp,-28
  80ee64:	dfc00615 	stw	ra,24(sp)
  80ee68:	df000515 	stw	fp,20(sp)
  80ee6c:	df000504 	addi	fp,sp,20
  80ee70:	e13ffc15 	stw	r4,-16(fp)
  80ee74:	e17ffd15 	stw	r5,-12(fp)
  80ee78:	e1bffe15 	stw	r6,-8(fp)
  80ee7c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80ee80:	e13ffd17 	ldw	r4,-12(fp)
  80ee84:	e17ffe17 	ldw	r5,-8(fp)
  80ee88:	e1bfff17 	ldw	r6,-4(fp)
  80ee8c:	080f0780 	call	80f078 <open>
  80ee90:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80ee94:	e0bffb17 	ldw	r2,-20(fp)
  80ee98:	1004803a 	cmplt	r2,r2,zero
  80ee9c:	10001c1e 	bne	r2,zero,80ef10 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80eea0:	e0bffb17 	ldw	r2,-20(fp)
  80eea4:	00c02074 	movhi	r3,129
  80eea8:	18c21d04 	addi	r3,r3,2164
  80eeac:	10800324 	muli	r2,r2,12
  80eeb0:	10c5883a 	add	r2,r2,r3
  80eeb4:	10c00017 	ldw	r3,0(r2)
  80eeb8:	e0bffc17 	ldw	r2,-16(fp)
  80eebc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80eec0:	e0bffb17 	ldw	r2,-20(fp)
  80eec4:	00c02074 	movhi	r3,129
  80eec8:	18c21d04 	addi	r3,r3,2164
  80eecc:	10800324 	muli	r2,r2,12
  80eed0:	10c5883a 	add	r2,r2,r3
  80eed4:	10800104 	addi	r2,r2,4
  80eed8:	10c00017 	ldw	r3,0(r2)
  80eedc:	e0bffc17 	ldw	r2,-16(fp)
  80eee0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80eee4:	e0bffb17 	ldw	r2,-20(fp)
  80eee8:	00c02074 	movhi	r3,129
  80eeec:	18c21d04 	addi	r3,r3,2164
  80eef0:	10800324 	muli	r2,r2,12
  80eef4:	10c5883a 	add	r2,r2,r3
  80eef8:	10800204 	addi	r2,r2,8
  80eefc:	10c00017 	ldw	r3,0(r2)
  80ef00:	e0bffc17 	ldw	r2,-16(fp)
  80ef04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80ef08:	e13ffb17 	ldw	r4,-20(fp)
  80ef0c:	080b3300 	call	80b330 <alt_release_fd>
  }
} 
  80ef10:	e037883a 	mov	sp,fp
  80ef14:	dfc00117 	ldw	ra,4(sp)
  80ef18:	df000017 	ldw	fp,0(sp)
  80ef1c:	dec00204 	addi	sp,sp,8
  80ef20:	f800283a 	ret

0080ef24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80ef24:	defffb04 	addi	sp,sp,-20
  80ef28:	dfc00415 	stw	ra,16(sp)
  80ef2c:	df000315 	stw	fp,12(sp)
  80ef30:	df000304 	addi	fp,sp,12
  80ef34:	e13ffd15 	stw	r4,-12(fp)
  80ef38:	e17ffe15 	stw	r5,-8(fp)
  80ef3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80ef40:	01002074 	movhi	r4,129
  80ef44:	21022004 	addi	r4,r4,2176
  80ef48:	e17ffd17 	ldw	r5,-12(fp)
  80ef4c:	01800044 	movi	r6,1
  80ef50:	01c07fc4 	movi	r7,511
  80ef54:	080ee600 	call	80ee60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80ef58:	01002074 	movhi	r4,129
  80ef5c:	21021d04 	addi	r4,r4,2164
  80ef60:	e17ffe17 	ldw	r5,-8(fp)
  80ef64:	000d883a 	mov	r6,zero
  80ef68:	01c07fc4 	movi	r7,511
  80ef6c:	080ee600 	call	80ee60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80ef70:	01002074 	movhi	r4,129
  80ef74:	21022304 	addi	r4,r4,2188
  80ef78:	e17fff17 	ldw	r5,-4(fp)
  80ef7c:	01800044 	movi	r6,1
  80ef80:	01c07fc4 	movi	r7,511
  80ef84:	080ee600 	call	80ee60 <alt_open_fd>
}  
  80ef88:	e037883a 	mov	sp,fp
  80ef8c:	dfc00117 	ldw	ra,4(sp)
  80ef90:	df000017 	ldw	fp,0(sp)
  80ef94:	dec00204 	addi	sp,sp,8
  80ef98:	f800283a 	ret

0080ef9c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80ef9c:	defffc04 	addi	sp,sp,-16
  80efa0:	df000315 	stw	fp,12(sp)
  80efa4:	df000304 	addi	fp,sp,12
  80efa8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80efac:	e0bffe17 	ldw	r2,-8(fp)
  80efb0:	10800217 	ldw	r2,8(r2)
  80efb4:	10d00034 	orhi	r3,r2,16384
  80efb8:	e0bffe17 	ldw	r2,-8(fp)
  80efbc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80efc0:	e03ffd15 	stw	zero,-12(fp)
  80efc4:	00002006 	br	80f048 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80efc8:	e0bffd17 	ldw	r2,-12(fp)
  80efcc:	00c02074 	movhi	r3,129
  80efd0:	18c21d04 	addi	r3,r3,2164
  80efd4:	10800324 	muli	r2,r2,12
  80efd8:	10c5883a 	add	r2,r2,r3
  80efdc:	10c00017 	ldw	r3,0(r2)
  80efe0:	e0bffe17 	ldw	r2,-8(fp)
  80efe4:	10800017 	ldw	r2,0(r2)
  80efe8:	1880141e 	bne	r3,r2,80f03c <alt_file_locked+0xa0>
  80efec:	e0bffd17 	ldw	r2,-12(fp)
  80eff0:	00c02074 	movhi	r3,129
  80eff4:	18c21d04 	addi	r3,r3,2164
  80eff8:	10800324 	muli	r2,r2,12
  80effc:	10c5883a 	add	r2,r2,r3
  80f000:	10800204 	addi	r2,r2,8
  80f004:	10800017 	ldw	r2,0(r2)
  80f008:	1004403a 	cmpge	r2,r2,zero
  80f00c:	10000b1e 	bne	r2,zero,80f03c <alt_file_locked+0xa0>
  80f010:	e0bffd17 	ldw	r2,-12(fp)
  80f014:	10800324 	muli	r2,r2,12
  80f018:	1007883a 	mov	r3,r2
  80f01c:	00802074 	movhi	r2,129
  80f020:	10821d04 	addi	r2,r2,2164
  80f024:	1887883a 	add	r3,r3,r2
  80f028:	e0bffe17 	ldw	r2,-8(fp)
  80f02c:	18800326 	beq	r3,r2,80f03c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f030:	00bffcc4 	movi	r2,-13
  80f034:	e0bfff15 	stw	r2,-4(fp)
  80f038:	00000a06 	br	80f064 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f03c:	e0bffd17 	ldw	r2,-12(fp)
  80f040:	10800044 	addi	r2,r2,1
  80f044:	e0bffd15 	stw	r2,-12(fp)
  80f048:	00802074 	movhi	r2,129
  80f04c:	1086d104 	addi	r2,r2,6980
  80f050:	10800017 	ldw	r2,0(r2)
  80f054:	1007883a 	mov	r3,r2
  80f058:	e0bffd17 	ldw	r2,-12(fp)
  80f05c:	18bfda2e 	bgeu	r3,r2,80efc8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f060:	e03fff15 	stw	zero,-4(fp)
  80f064:	e0bfff17 	ldw	r2,-4(fp)
}
  80f068:	e037883a 	mov	sp,fp
  80f06c:	df000017 	ldw	fp,0(sp)
  80f070:	dec00104 	addi	sp,sp,4
  80f074:	f800283a 	ret

0080f078 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f078:	defff404 	addi	sp,sp,-48
  80f07c:	dfc00b15 	stw	ra,44(sp)
  80f080:	df000a15 	stw	fp,40(sp)
  80f084:	df000a04 	addi	fp,sp,40
  80f088:	e13ffb15 	stw	r4,-20(fp)
  80f08c:	e17ffc15 	stw	r5,-16(fp)
  80f090:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f094:	00bfffc4 	movi	r2,-1
  80f098:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80f09c:	00bffb44 	movi	r2,-19
  80f0a0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80f0a4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f0a8:	e13ffb17 	ldw	r4,-20(fp)
  80f0ac:	01402074 	movhi	r5,129
  80f0b0:	2946cf04 	addi	r5,r5,6972
  80f0b4:	080ead00 	call	80ead0 <alt_find_dev>
  80f0b8:	e0bffa15 	stw	r2,-24(fp)
  80f0bc:	e0bffa17 	ldw	r2,-24(fp)
  80f0c0:	1004c03a 	cmpne	r2,r2,zero
  80f0c4:	1000051e 	bne	r2,zero,80f0dc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f0c8:	e13ffb17 	ldw	r4,-20(fp)
  80f0cc:	080f2800 	call	80f280 <alt_find_file>
  80f0d0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80f0d4:	00800044 	movi	r2,1
  80f0d8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f0dc:	e0bffa17 	ldw	r2,-24(fp)
  80f0e0:	1005003a 	cmpeq	r2,r2,zero
  80f0e4:	1000301e 	bne	r2,zero,80f1a8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f0e8:	e13ffa17 	ldw	r4,-24(fp)
  80f0ec:	080f3a00 	call	80f3a0 <alt_get_fd>
  80f0f0:	e0bff815 	stw	r2,-32(fp)
  80f0f4:	e0bff817 	ldw	r2,-32(fp)
  80f0f8:	1004403a 	cmpge	r2,r2,zero
  80f0fc:	1000031e 	bne	r2,zero,80f10c <open+0x94>
    {
      status = index;
  80f100:	e0bff817 	ldw	r2,-32(fp)
  80f104:	e0bff715 	stw	r2,-36(fp)
  80f108:	00002906 	br	80f1b0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f10c:	e0bff817 	ldw	r2,-32(fp)
  80f110:	10800324 	muli	r2,r2,12
  80f114:	1007883a 	mov	r3,r2
  80f118:	00802074 	movhi	r2,129
  80f11c:	10821d04 	addi	r2,r2,2164
  80f120:	1885883a 	add	r2,r3,r2
  80f124:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f128:	e0fffc17 	ldw	r3,-16(fp)
  80f12c:	00900034 	movhi	r2,16384
  80f130:	10bfffc4 	addi	r2,r2,-1
  80f134:	1886703a 	and	r3,r3,r2
  80f138:	e0bff917 	ldw	r2,-28(fp)
  80f13c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f140:	e0bff617 	ldw	r2,-40(fp)
  80f144:	1004c03a 	cmpne	r2,r2,zero
  80f148:	1000061e 	bne	r2,zero,80f164 <open+0xec>
  80f14c:	e13ff917 	ldw	r4,-28(fp)
  80f150:	080ef9c0 	call	80ef9c <alt_file_locked>
  80f154:	e0bff715 	stw	r2,-36(fp)
  80f158:	e0bff717 	ldw	r2,-36(fp)
  80f15c:	1004803a 	cmplt	r2,r2,zero
  80f160:	1000131e 	bne	r2,zero,80f1b0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f164:	e0bffa17 	ldw	r2,-24(fp)
  80f168:	10800317 	ldw	r2,12(r2)
  80f16c:	1005003a 	cmpeq	r2,r2,zero
  80f170:	1000091e 	bne	r2,zero,80f198 <open+0x120>
  80f174:	e0bffa17 	ldw	r2,-24(fp)
  80f178:	10800317 	ldw	r2,12(r2)
  80f17c:	e13ff917 	ldw	r4,-28(fp)
  80f180:	e17ffb17 	ldw	r5,-20(fp)
  80f184:	e1bffc17 	ldw	r6,-16(fp)
  80f188:	e1fffd17 	ldw	r7,-12(fp)
  80f18c:	103ee83a 	callr	r2
  80f190:	e0bfff15 	stw	r2,-4(fp)
  80f194:	00000106 	br	80f19c <open+0x124>
  80f198:	e03fff15 	stw	zero,-4(fp)
  80f19c:	e0bfff17 	ldw	r2,-4(fp)
  80f1a0:	e0bff715 	stw	r2,-36(fp)
  80f1a4:	00000206 	br	80f1b0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f1a8:	00bffb44 	movi	r2,-19
  80f1ac:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f1b0:	e0bff717 	ldw	r2,-36(fp)
  80f1b4:	1004403a 	cmpge	r2,r2,zero
  80f1b8:	1000091e 	bne	r2,zero,80f1e0 <open+0x168>
  {
    alt_release_fd (index);  
  80f1bc:	e13ff817 	ldw	r4,-32(fp)
  80f1c0:	080b3300 	call	80b330 <alt_release_fd>
    ALT_ERRNO = -status;
  80f1c4:	080f2000 	call	80f200 <alt_get_errno>
  80f1c8:	e0fff717 	ldw	r3,-36(fp)
  80f1cc:	00c7c83a 	sub	r3,zero,r3
  80f1d0:	10c00015 	stw	r3,0(r2)
    return -1;
  80f1d4:	00bfffc4 	movi	r2,-1
  80f1d8:	e0bffe15 	stw	r2,-8(fp)
  80f1dc:	00000206 	br	80f1e8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80f1e0:	e0bff817 	ldw	r2,-32(fp)
  80f1e4:	e0bffe15 	stw	r2,-8(fp)
  80f1e8:	e0bffe17 	ldw	r2,-8(fp)
}
  80f1ec:	e037883a 	mov	sp,fp
  80f1f0:	dfc00117 	ldw	ra,4(sp)
  80f1f4:	df000017 	ldw	fp,0(sp)
  80f1f8:	dec00204 	addi	sp,sp,8
  80f1fc:	f800283a 	ret

0080f200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f200:	defffd04 	addi	sp,sp,-12
  80f204:	dfc00215 	stw	ra,8(sp)
  80f208:	df000115 	stw	fp,4(sp)
  80f20c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f210:	00802074 	movhi	r2,129
  80f214:	1086d204 	addi	r2,r2,6984
  80f218:	10800017 	ldw	r2,0(r2)
  80f21c:	1005003a 	cmpeq	r2,r2,zero
  80f220:	1000061e 	bne	r2,zero,80f23c <alt_get_errno+0x3c>
  80f224:	00802074 	movhi	r2,129
  80f228:	1086d204 	addi	r2,r2,6984
  80f22c:	10800017 	ldw	r2,0(r2)
  80f230:	103ee83a 	callr	r2
  80f234:	e0bfff15 	stw	r2,-4(fp)
  80f238:	00000306 	br	80f248 <alt_get_errno+0x48>
  80f23c:	00802074 	movhi	r2,129
  80f240:	108da604 	addi	r2,r2,13976
  80f244:	e0bfff15 	stw	r2,-4(fp)
  80f248:	e0bfff17 	ldw	r2,-4(fp)
}
  80f24c:	e037883a 	mov	sp,fp
  80f250:	dfc00117 	ldw	ra,4(sp)
  80f254:	df000017 	ldw	fp,0(sp)
  80f258:	dec00204 	addi	sp,sp,8
  80f25c:	f800283a 	ret

0080f260 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80f260:	deffff04 	addi	sp,sp,-4
  80f264:	df000015 	stw	fp,0(sp)
  80f268:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80f26c:	000170fa 	wrctl	ienable,zero
}
  80f270:	e037883a 	mov	sp,fp
  80f274:	df000017 	ldw	fp,0(sp)
  80f278:	dec00104 	addi	sp,sp,4
  80f27c:	f800283a 	ret

0080f280 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80f280:	defffa04 	addi	sp,sp,-24
  80f284:	dfc00515 	stw	ra,20(sp)
  80f288:	df000415 	stw	fp,16(sp)
  80f28c:	df000404 	addi	fp,sp,16
  80f290:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80f294:	00802074 	movhi	r2,129
  80f298:	1086cd04 	addi	r2,r2,6964
  80f29c:	10800017 	ldw	r2,0(r2)
  80f2a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f2a4:	00003306 	br	80f374 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80f2a8:	e0bffd17 	ldw	r2,-12(fp)
  80f2ac:	11000217 	ldw	r4,8(r2)
  80f2b0:	08018680 	call	801868 <strlen>
  80f2b4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80f2b8:	e0bffd17 	ldw	r2,-12(fp)
  80f2bc:	10c00217 	ldw	r3,8(r2)
  80f2c0:	e0bffc17 	ldw	r2,-16(fp)
  80f2c4:	1885883a 	add	r2,r3,r2
  80f2c8:	10bfffc4 	addi	r2,r2,-1
  80f2cc:	10800003 	ldbu	r2,0(r2)
  80f2d0:	10803fcc 	andi	r2,r2,255
  80f2d4:	1080201c 	xori	r2,r2,128
  80f2d8:	10bfe004 	addi	r2,r2,-128
  80f2dc:	10800bd8 	cmpnei	r2,r2,47
  80f2e0:	1000031e 	bne	r2,zero,80f2f0 <alt_find_file+0x70>
    {
      len -= 1;
  80f2e4:	e0bffc17 	ldw	r2,-16(fp)
  80f2e8:	10bfffc4 	addi	r2,r2,-1
  80f2ec:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f2f0:	e0bffc17 	ldw	r2,-16(fp)
  80f2f4:	1007883a 	mov	r3,r2
  80f2f8:	e0bffe17 	ldw	r2,-8(fp)
  80f2fc:	1885883a 	add	r2,r3,r2
  80f300:	10800003 	ldbu	r2,0(r2)
  80f304:	10803fcc 	andi	r2,r2,255
  80f308:	1080201c 	xori	r2,r2,128
  80f30c:	10bfe004 	addi	r2,r2,-128
  80f310:	10800be0 	cmpeqi	r2,r2,47
  80f314:	10000a1e 	bne	r2,zero,80f340 <alt_find_file+0xc0>
  80f318:	e0bffc17 	ldw	r2,-16(fp)
  80f31c:	1007883a 	mov	r3,r2
  80f320:	e0bffe17 	ldw	r2,-8(fp)
  80f324:	1885883a 	add	r2,r3,r2
  80f328:	10800003 	ldbu	r2,0(r2)
  80f32c:	10803fcc 	andi	r2,r2,255
  80f330:	1080201c 	xori	r2,r2,128
  80f334:	10bfe004 	addi	r2,r2,-128
  80f338:	1004c03a 	cmpne	r2,r2,zero
  80f33c:	10000a1e 	bne	r2,zero,80f368 <alt_find_file+0xe8>
  80f340:	e0bffd17 	ldw	r2,-12(fp)
  80f344:	11000217 	ldw	r4,8(r2)
  80f348:	e1bffc17 	ldw	r6,-16(fp)
  80f34c:	e17ffe17 	ldw	r5,-8(fp)
  80f350:	080f5340 	call	80f534 <memcmp>
  80f354:	1004c03a 	cmpne	r2,r2,zero
  80f358:	1000031e 	bne	r2,zero,80f368 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80f35c:	e0bffd17 	ldw	r2,-12(fp)
  80f360:	e0bfff15 	stw	r2,-4(fp)
  80f364:	00000806 	br	80f388 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80f368:	e0bffd17 	ldw	r2,-12(fp)
  80f36c:	10800017 	ldw	r2,0(r2)
  80f370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f374:	00c02074 	movhi	r3,129
  80f378:	18c6cd04 	addi	r3,r3,6964
  80f37c:	e0bffd17 	ldw	r2,-12(fp)
  80f380:	10ffc91e 	bne	r2,r3,80f2a8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80f384:	e03fff15 	stw	zero,-4(fp)
  80f388:	e0bfff17 	ldw	r2,-4(fp)
}
  80f38c:	e037883a 	mov	sp,fp
  80f390:	dfc00117 	ldw	ra,4(sp)
  80f394:	df000017 	ldw	fp,0(sp)
  80f398:	dec00204 	addi	sp,sp,8
  80f39c:	f800283a 	ret

0080f3a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80f3a0:	defffc04 	addi	sp,sp,-16
  80f3a4:	df000315 	stw	fp,12(sp)
  80f3a8:	df000304 	addi	fp,sp,12
  80f3ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80f3b0:	00bffa04 	movi	r2,-24
  80f3b4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f3b8:	e03ffe15 	stw	zero,-8(fp)
  80f3bc:	00001e06 	br	80f438 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80f3c0:	e0bffe17 	ldw	r2,-8(fp)
  80f3c4:	00c02074 	movhi	r3,129
  80f3c8:	18c21d04 	addi	r3,r3,2164
  80f3cc:	10800324 	muli	r2,r2,12
  80f3d0:	10c5883a 	add	r2,r2,r3
  80f3d4:	10800017 	ldw	r2,0(r2)
  80f3d8:	1004c03a 	cmpne	r2,r2,zero
  80f3dc:	1000131e 	bne	r2,zero,80f42c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80f3e0:	e0bffe17 	ldw	r2,-8(fp)
  80f3e4:	00c02074 	movhi	r3,129
  80f3e8:	18c21d04 	addi	r3,r3,2164
  80f3ec:	10800324 	muli	r2,r2,12
  80f3f0:	10c7883a 	add	r3,r2,r3
  80f3f4:	e0bfff17 	ldw	r2,-4(fp)
  80f3f8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80f3fc:	00802074 	movhi	r2,129
  80f400:	1086d104 	addi	r2,r2,6980
  80f404:	10c00017 	ldw	r3,0(r2)
  80f408:	e0bffe17 	ldw	r2,-8(fp)
  80f40c:	1880040e 	bge	r3,r2,80f420 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80f410:	00c02074 	movhi	r3,129
  80f414:	18c6d104 	addi	r3,r3,6980
  80f418:	e0bffe17 	ldw	r2,-8(fp)
  80f41c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80f420:	e0bffe17 	ldw	r2,-8(fp)
  80f424:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80f428:	00000606 	br	80f444 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f42c:	e0bffe17 	ldw	r2,-8(fp)
  80f430:	10800044 	addi	r2,r2,1
  80f434:	e0bffe15 	stw	r2,-8(fp)
  80f438:	e0bffe17 	ldw	r2,-8(fp)
  80f43c:	10800810 	cmplti	r2,r2,32
  80f440:	103fdf1e 	bne	r2,zero,80f3c0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80f444:	e0bffd17 	ldw	r2,-12(fp)
}
  80f448:	e037883a 	mov	sp,fp
  80f44c:	df000017 	ldw	fp,0(sp)
  80f450:	dec00104 	addi	sp,sp,4
  80f454:	f800283a 	ret

0080f458 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80f458:	defffb04 	addi	sp,sp,-20
  80f45c:	df000415 	stw	fp,16(sp)
  80f460:	df000404 	addi	fp,sp,16
  80f464:	e13ffe15 	stw	r4,-8(fp)
  80f468:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80f46c:	e0bfff17 	ldw	r2,-4(fp)
  80f470:	10840070 	cmpltui	r2,r2,4097
  80f474:	1000021e 	bne	r2,zero,80f480 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80f478:	00840004 	movi	r2,4096
  80f47c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80f480:	e0fffe17 	ldw	r3,-8(fp)
  80f484:	e0bfff17 	ldw	r2,-4(fp)
  80f488:	1885883a 	add	r2,r3,r2
  80f48c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f490:	e0bffe17 	ldw	r2,-8(fp)
  80f494:	e0bffd15 	stw	r2,-12(fp)
  80f498:	00000506 	br	80f4b0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80f49c:	e0bffd17 	ldw	r2,-12(fp)
  80f4a0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f4a4:	e0bffd17 	ldw	r2,-12(fp)
  80f4a8:	10800804 	addi	r2,r2,32
  80f4ac:	e0bffd15 	stw	r2,-12(fp)
  80f4b0:	e0fffd17 	ldw	r3,-12(fp)
  80f4b4:	e0bffc17 	ldw	r2,-16(fp)
  80f4b8:	18bff836 	bltu	r3,r2,80f49c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80f4bc:	e0bffe17 	ldw	r2,-8(fp)
  80f4c0:	108007cc 	andi	r2,r2,31
  80f4c4:	1005003a 	cmpeq	r2,r2,zero
  80f4c8:	1000021e 	bne	r2,zero,80f4d4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80f4cc:	e0bffd17 	ldw	r2,-12(fp)
  80f4d0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80f4d4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80f4d8:	e037883a 	mov	sp,fp
  80f4dc:	df000017 	ldw	fp,0(sp)
  80f4e0:	dec00104 	addi	sp,sp,4
  80f4e4:	f800283a 	ret

0080f4e8 <atexit>:
  80f4e8:	200b883a 	mov	r5,r4
  80f4ec:	000d883a 	mov	r6,zero
  80f4f0:	0009883a 	mov	r4,zero
  80f4f4:	000f883a 	mov	r7,zero
  80f4f8:	080f5a81 	jmpi	80f5a8 <__register_exitproc>

0080f4fc <exit>:
  80f4fc:	defffe04 	addi	sp,sp,-8
  80f500:	000b883a 	mov	r5,zero
  80f504:	dc000015 	stw	r16,0(sp)
  80f508:	dfc00115 	stw	ra,4(sp)
  80f50c:	2021883a 	mov	r16,r4
  80f510:	080f6e00 	call	80f6e0 <__call_exitprocs>
  80f514:	00802074 	movhi	r2,129
  80f518:	1086c804 	addi	r2,r2,6944
  80f51c:	11000017 	ldw	r4,0(r2)
  80f520:	20800f17 	ldw	r2,60(r4)
  80f524:	10000126 	beq	r2,zero,80f52c <exit+0x30>
  80f528:	103ee83a 	callr	r2
  80f52c:	8009883a 	mov	r4,r16
  80f530:	080f8d00 	call	80f8d0 <_exit>

0080f534 <memcmp>:
  80f534:	00c000c4 	movi	r3,3
  80f538:	1980032e 	bgeu	r3,r6,80f548 <memcmp+0x14>
  80f53c:	2144b03a 	or	r2,r4,r5
  80f540:	10c4703a 	and	r2,r2,r3
  80f544:	10000f26 	beq	r2,zero,80f584 <memcmp+0x50>
  80f548:	31ffffc4 	addi	r7,r6,-1
  80f54c:	3000061e 	bne	r6,zero,80f568 <memcmp+0x34>
  80f550:	00000a06 	br	80f57c <memcmp+0x48>
  80f554:	39ffffc4 	addi	r7,r7,-1
  80f558:	00bfffc4 	movi	r2,-1
  80f55c:	21000044 	addi	r4,r4,1
  80f560:	29400044 	addi	r5,r5,1
  80f564:	38800526 	beq	r7,r2,80f57c <memcmp+0x48>
  80f568:	20c00003 	ldbu	r3,0(r4)
  80f56c:	28800003 	ldbu	r2,0(r5)
  80f570:	18bff826 	beq	r3,r2,80f554 <memcmp+0x20>
  80f574:	1885c83a 	sub	r2,r3,r2
  80f578:	f800283a 	ret
  80f57c:	0005883a 	mov	r2,zero
  80f580:	f800283a 	ret
  80f584:	180f883a 	mov	r7,r3
  80f588:	20c00017 	ldw	r3,0(r4)
  80f58c:	28800017 	ldw	r2,0(r5)
  80f590:	18bfed1e 	bne	r3,r2,80f548 <memcmp+0x14>
  80f594:	31bfff04 	addi	r6,r6,-4
  80f598:	21000104 	addi	r4,r4,4
  80f59c:	29400104 	addi	r5,r5,4
  80f5a0:	39bff936 	bltu	r7,r6,80f588 <memcmp+0x54>
  80f5a4:	003fe806 	br	80f548 <memcmp+0x14>

0080f5a8 <__register_exitproc>:
  80f5a8:	defffa04 	addi	sp,sp,-24
  80f5ac:	00802074 	movhi	r2,129
  80f5b0:	1086c804 	addi	r2,r2,6944
  80f5b4:	dc000015 	stw	r16,0(sp)
  80f5b8:	14000017 	ldw	r16,0(r2)
  80f5bc:	dd000415 	stw	r20,16(sp)
  80f5c0:	2829883a 	mov	r20,r5
  80f5c4:	81405217 	ldw	r5,328(r16)
  80f5c8:	dcc00315 	stw	r19,12(sp)
  80f5cc:	dc800215 	stw	r18,8(sp)
  80f5d0:	dc400115 	stw	r17,4(sp)
  80f5d4:	dfc00515 	stw	ra,20(sp)
  80f5d8:	2023883a 	mov	r17,r4
  80f5dc:	3027883a 	mov	r19,r6
  80f5e0:	3825883a 	mov	r18,r7
  80f5e4:	28002526 	beq	r5,zero,80f67c <__register_exitproc+0xd4>
  80f5e8:	29000117 	ldw	r4,4(r5)
  80f5ec:	008007c4 	movi	r2,31
  80f5f0:	11002716 	blt	r2,r4,80f690 <__register_exitproc+0xe8>
  80f5f4:	8800101e 	bne	r17,zero,80f638 <__register_exitproc+0x90>
  80f5f8:	2105883a 	add	r2,r4,r4
  80f5fc:	1085883a 	add	r2,r2,r2
  80f600:	20c00044 	addi	r3,r4,1
  80f604:	1145883a 	add	r2,r2,r5
  80f608:	0009883a 	mov	r4,zero
  80f60c:	15000215 	stw	r20,8(r2)
  80f610:	28c00115 	stw	r3,4(r5)
  80f614:	2005883a 	mov	r2,r4
  80f618:	dfc00517 	ldw	ra,20(sp)
  80f61c:	dd000417 	ldw	r20,16(sp)
  80f620:	dcc00317 	ldw	r19,12(sp)
  80f624:	dc800217 	ldw	r18,8(sp)
  80f628:	dc400117 	ldw	r17,4(sp)
  80f62c:	dc000017 	ldw	r16,0(sp)
  80f630:	dec00604 	addi	sp,sp,24
  80f634:	f800283a 	ret
  80f638:	29802204 	addi	r6,r5,136
  80f63c:	00800044 	movi	r2,1
  80f640:	110e983a 	sll	r7,r2,r4
  80f644:	30c04017 	ldw	r3,256(r6)
  80f648:	2105883a 	add	r2,r4,r4
  80f64c:	1085883a 	add	r2,r2,r2
  80f650:	1185883a 	add	r2,r2,r6
  80f654:	19c6b03a 	or	r3,r3,r7
  80f658:	14802015 	stw	r18,128(r2)
  80f65c:	14c00015 	stw	r19,0(r2)
  80f660:	00800084 	movi	r2,2
  80f664:	30c04015 	stw	r3,256(r6)
  80f668:	88bfe31e 	bne	r17,r2,80f5f8 <__register_exitproc+0x50>
  80f66c:	30804117 	ldw	r2,260(r6)
  80f670:	11c4b03a 	or	r2,r2,r7
  80f674:	30804115 	stw	r2,260(r6)
  80f678:	003fdf06 	br	80f5f8 <__register_exitproc+0x50>
  80f67c:	00802074 	movhi	r2,129
  80f680:	108df904 	addi	r2,r2,14308
  80f684:	100b883a 	mov	r5,r2
  80f688:	80805215 	stw	r2,328(r16)
  80f68c:	003fd606 	br	80f5e8 <__register_exitproc+0x40>
  80f690:	00800034 	movhi	r2,0
  80f694:	10800004 	addi	r2,r2,0
  80f698:	1000021e 	bne	r2,zero,80f6a4 <__register_exitproc+0xfc>
  80f69c:	013fffc4 	movi	r4,-1
  80f6a0:	003fdc06 	br	80f614 <__register_exitproc+0x6c>
  80f6a4:	01006404 	movi	r4,400
  80f6a8:	103ee83a 	callr	r2
  80f6ac:	1007883a 	mov	r3,r2
  80f6b0:	103ffa26 	beq	r2,zero,80f69c <__register_exitproc+0xf4>
  80f6b4:	80805217 	ldw	r2,328(r16)
  80f6b8:	180b883a 	mov	r5,r3
  80f6bc:	18000115 	stw	zero,4(r3)
  80f6c0:	18800015 	stw	r2,0(r3)
  80f6c4:	80c05215 	stw	r3,328(r16)
  80f6c8:	18006215 	stw	zero,392(r3)
  80f6cc:	18006315 	stw	zero,396(r3)
  80f6d0:	0009883a 	mov	r4,zero
  80f6d4:	883fc826 	beq	r17,zero,80f5f8 <__register_exitproc+0x50>
  80f6d8:	003fd706 	br	80f638 <__register_exitproc+0x90>

0080f6dc <register_fini>:
  80f6dc:	f800283a 	ret

0080f6e0 <__call_exitprocs>:
  80f6e0:	00802074 	movhi	r2,129
  80f6e4:	1086c804 	addi	r2,r2,6944
  80f6e8:	10800017 	ldw	r2,0(r2)
  80f6ec:	defff304 	addi	sp,sp,-52
  80f6f0:	df000b15 	stw	fp,44(sp)
  80f6f4:	d8800115 	stw	r2,4(sp)
  80f6f8:	00800034 	movhi	r2,0
  80f6fc:	10800004 	addi	r2,r2,0
  80f700:	1005003a 	cmpeq	r2,r2,zero
  80f704:	d8800215 	stw	r2,8(sp)
  80f708:	d8800117 	ldw	r2,4(sp)
  80f70c:	dd400815 	stw	r21,32(sp)
  80f710:	dd000715 	stw	r20,28(sp)
  80f714:	10805204 	addi	r2,r2,328
  80f718:	dfc00c15 	stw	ra,48(sp)
  80f71c:	ddc00a15 	stw	r23,40(sp)
  80f720:	dd800915 	stw	r22,36(sp)
  80f724:	dcc00615 	stw	r19,24(sp)
  80f728:	dc800515 	stw	r18,20(sp)
  80f72c:	dc400415 	stw	r17,16(sp)
  80f730:	dc000315 	stw	r16,12(sp)
  80f734:	282b883a 	mov	r21,r5
  80f738:	2039883a 	mov	fp,r4
  80f73c:	d8800015 	stw	r2,0(sp)
  80f740:	2829003a 	cmpeq	r20,r5,zero
  80f744:	d8800117 	ldw	r2,4(sp)
  80f748:	14405217 	ldw	r17,328(r2)
  80f74c:	88001026 	beq	r17,zero,80f790 <__call_exitprocs+0xb0>
  80f750:	ddc00017 	ldw	r23,0(sp)
  80f754:	88800117 	ldw	r2,4(r17)
  80f758:	8c802204 	addi	r18,r17,136
  80f75c:	143fffc4 	addi	r16,r2,-1
  80f760:	80000916 	blt	r16,zero,80f788 <__call_exitprocs+0xa8>
  80f764:	05bfffc4 	movi	r22,-1
  80f768:	a000151e 	bne	r20,zero,80f7c0 <__call_exitprocs+0xe0>
  80f76c:	8409883a 	add	r4,r16,r16
  80f770:	2105883a 	add	r2,r4,r4
  80f774:	1485883a 	add	r2,r2,r18
  80f778:	10c02017 	ldw	r3,128(r2)
  80f77c:	a8c01126 	beq	r21,r3,80f7c4 <__call_exitprocs+0xe4>
  80f780:	843fffc4 	addi	r16,r16,-1
  80f784:	85bff81e 	bne	r16,r22,80f768 <__call_exitprocs+0x88>
  80f788:	d8800217 	ldw	r2,8(sp)
  80f78c:	10003126 	beq	r2,zero,80f854 <__call_exitprocs+0x174>
  80f790:	dfc00c17 	ldw	ra,48(sp)
  80f794:	df000b17 	ldw	fp,44(sp)
  80f798:	ddc00a17 	ldw	r23,40(sp)
  80f79c:	dd800917 	ldw	r22,36(sp)
  80f7a0:	dd400817 	ldw	r21,32(sp)
  80f7a4:	dd000717 	ldw	r20,28(sp)
  80f7a8:	dcc00617 	ldw	r19,24(sp)
  80f7ac:	dc800517 	ldw	r18,20(sp)
  80f7b0:	dc400417 	ldw	r17,16(sp)
  80f7b4:	dc000317 	ldw	r16,12(sp)
  80f7b8:	dec00d04 	addi	sp,sp,52
  80f7bc:	f800283a 	ret
  80f7c0:	8409883a 	add	r4,r16,r16
  80f7c4:	88c00117 	ldw	r3,4(r17)
  80f7c8:	2105883a 	add	r2,r4,r4
  80f7cc:	1445883a 	add	r2,r2,r17
  80f7d0:	18ffffc4 	addi	r3,r3,-1
  80f7d4:	11800217 	ldw	r6,8(r2)
  80f7d8:	1c001526 	beq	r3,r16,80f830 <__call_exitprocs+0x150>
  80f7dc:	10000215 	stw	zero,8(r2)
  80f7e0:	303fe726 	beq	r6,zero,80f780 <__call_exitprocs+0xa0>
  80f7e4:	00c00044 	movi	r3,1
  80f7e8:	1c06983a 	sll	r3,r3,r16
  80f7ec:	90804017 	ldw	r2,256(r18)
  80f7f0:	8cc00117 	ldw	r19,4(r17)
  80f7f4:	1884703a 	and	r2,r3,r2
  80f7f8:	10001426 	beq	r2,zero,80f84c <__call_exitprocs+0x16c>
  80f7fc:	90804117 	ldw	r2,260(r18)
  80f800:	1884703a 	and	r2,r3,r2
  80f804:	10000c1e 	bne	r2,zero,80f838 <__call_exitprocs+0x158>
  80f808:	2105883a 	add	r2,r4,r4
  80f80c:	1485883a 	add	r2,r2,r18
  80f810:	11400017 	ldw	r5,0(r2)
  80f814:	e009883a 	mov	r4,fp
  80f818:	303ee83a 	callr	r6
  80f81c:	88800117 	ldw	r2,4(r17)
  80f820:	98bfc81e 	bne	r19,r2,80f744 <__call_exitprocs+0x64>
  80f824:	b8800017 	ldw	r2,0(r23)
  80f828:	147fd526 	beq	r2,r17,80f780 <__call_exitprocs+0xa0>
  80f82c:	003fc506 	br	80f744 <__call_exitprocs+0x64>
  80f830:	8c000115 	stw	r16,4(r17)
  80f834:	003fea06 	br	80f7e0 <__call_exitprocs+0x100>
  80f838:	2105883a 	add	r2,r4,r4
  80f83c:	1485883a 	add	r2,r2,r18
  80f840:	11000017 	ldw	r4,0(r2)
  80f844:	303ee83a 	callr	r6
  80f848:	003ff406 	br	80f81c <__call_exitprocs+0x13c>
  80f84c:	303ee83a 	callr	r6
  80f850:	003ff206 	br	80f81c <__call_exitprocs+0x13c>
  80f854:	88800117 	ldw	r2,4(r17)
  80f858:	1000081e 	bne	r2,zero,80f87c <__call_exitprocs+0x19c>
  80f85c:	89000017 	ldw	r4,0(r17)
  80f860:	20000726 	beq	r4,zero,80f880 <__call_exitprocs+0x1a0>
  80f864:	b9000015 	stw	r4,0(r23)
  80f868:	8809883a 	mov	r4,r17
  80f86c:	00000000 	call	0 <__reset-0x800000>
  80f870:	bc400017 	ldw	r17,0(r23)
  80f874:	883fb71e 	bne	r17,zero,80f754 <__call_exitprocs+0x74>
  80f878:	003fc506 	br	80f790 <__call_exitprocs+0xb0>
  80f87c:	89000017 	ldw	r4,0(r17)
  80f880:	882f883a 	mov	r23,r17
  80f884:	2023883a 	mov	r17,r4
  80f888:	883fb21e 	bne	r17,zero,80f754 <__call_exitprocs+0x74>
  80f88c:	003fc006 	br	80f790 <__call_exitprocs+0xb0>

0080f890 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80f890:	defffd04 	addi	sp,sp,-12
  80f894:	df000215 	stw	fp,8(sp)
  80f898:	df000204 	addi	fp,sp,8
  80f89c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80f8a0:	e0bfff17 	ldw	r2,-4(fp)
  80f8a4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80f8a8:	e0bffe17 	ldw	r2,-8(fp)
  80f8ac:	1005003a 	cmpeq	r2,r2,zero
  80f8b0:	1000021e 	bne	r2,zero,80f8bc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80f8b4:	002af070 	cmpltui	zero,zero,43969
  80f8b8:	00000106 	br	80f8c0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80f8bc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80f8c0:	e037883a 	mov	sp,fp
  80f8c4:	df000017 	ldw	fp,0(sp)
  80f8c8:	dec00104 	addi	sp,sp,4
  80f8cc:	f800283a 	ret

0080f8d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80f8d0:	defffd04 	addi	sp,sp,-12
  80f8d4:	dfc00215 	stw	ra,8(sp)
  80f8d8:	df000115 	stw	fp,4(sp)
  80f8dc:	df000104 	addi	fp,sp,4
  80f8e0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80f8e4:	e13fff17 	ldw	r4,-4(fp)
  80f8e8:	080f8900 	call	80f890 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80f8ec:	003fff06 	br	80f8ec <_exit+0x1c>
  80f8f0:	00000010 	cmplti	zero,zero,0
  80f8f4:	00000000 	call	0 <__reset-0x800000>
  80f8f8:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  80f8fc:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  80f900:	001b0c0b 	ldhu	zero,27696(zero)
  80f904:	00000028 	cmpgeui	zero,zero,0
  80f908:	00000018 	cmpnei	zero,zero,0
  80f90c:	00808a50 	cmplti	r2,zero,553
  80f910:	000005dc 	xori	zero,zero,23
  80f914:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  80f918:	92099170 	cmpltui	r8,r18,9797
  80f91c:	95079308 	cmpgei	r20,r18,7756
  80f920:	97049605 	stb	fp,4696(r18)
  80f924:	90019f03 	ldbu	zero,1660(r18)
  80f928:	9c06940a 	0x9c06940a
  80f92c:	00000002 	0x2
  80f930:	00000028 	cmpgeui	zero,zero,0
  80f934:	00000044 	movi	zero,1
  80f938:	0080902c 	andhi	r2,zero,576
  80f93c:	000005b0 	cmpltui	zero,zero,22
  80f940:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  80f944:	92099168 	cmpgeui	r8,r18,9797
  80f948:	95079308 	cmpgei	r20,r18,7756
  80f94c:	9c039705 	stb	r16,3676(r19)
  80f950:	90019f02 	0x90019f02
  80f954:	9606940a 	0x9606940a
  80f958:	00000004 	movi	zero,0
  80f95c:	0080f6dc 	xori	r2,zero,987
